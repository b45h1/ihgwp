{"version":3,"sources":["webpack:///../C:/agent/1/_work/60/s/libraries/sp-dragzone/lib/DragZoneUtilities.js","webpack:///../C:/agent/1/_work/60/s/libraries/sp-dragzone/lib/DragZoneTree.js","webpack:///../C:/agent/1/_work/60/s/libraries/sp-dragzone/lib/DragZoneKeyboard.js","webpack:///../C:/agent/1/_work/60/s/libraries/sp-dragzone/lib/DragZoneControl.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,kCAAkC,EAAE;AAC7F;AACA;AACA;AACA,CAAC;AACO;;;;;;;AC/DoB;AACZ;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,4BAA4B;AAC5B;AACA,wBAAwB;AACxB;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iCAAiC;AACxD;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2BAA2B;AAClD,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;;;;;;ACvRR;AACsC;AACtB;AACO;AACA;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,4BAA4B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,U;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbuBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;ACjTA;AACgB;AAChB;AACuC;AACX;AACL;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjfile":"3.3_0cbb2a75e01e6db813d8.js","sourcesContent":["import { getRTL } from '@microsoft/office-ui-fabric-react-bundle';\nimport styles from './css/DragZone.module.scss';\nvar DragZoneUtilities = (function () {\n    function DragZoneUtilities() {\n    }\n    DragZoneUtilities.getElementsWithAttribute = function (parent, tag, value) {\n        if (!parent) {\n            return [];\n        }\n        var querySelector = \"[\" + tag + (value ? \"=\\\"\" + value + \"\\\"\" : \"\") + \"]\";\n        var tempEls = parent.querySelectorAll(querySelector);\n        var elements = [];\n        for (var index = 0; index < tempEls.length; index++) {\n            elements.push(tempEls[index]);\n        }\n        return elements;\n    };\n    DragZoneUtilities.hasAttributeValue = function (elem, attribute, value) {\n        return elem && elem.getAttribute(attribute) === value;\n    };\n    DragZoneUtilities.shouldInsertBeforeElement = function (element, x, y, isHorizontalReorder) {\n        var rectangle = element.getBoundingClientRect();\n        var center;\n        if (isHorizontalReorder) {\n            center = ((rectangle.left + rectangle.right) / 2);\n            return getRTL() ? x > center : x < center;\n        }\n        else {\n            center = ((rectangle.bottom + rectangle.top) / 2);\n            return y < center;\n        }\n    };\n    DragZoneUtilities.getDefaultIcon = function () {\n        var icon = document.createElement('div');\n        icon.innerText = 'icon';\n        icon.className = styles.defaultIconClass;\n        icon.hidden = true;\n        document.body.appendChild(icon);\n        return icon;\n    };\n    DragZoneUtilities.elementArrayEquals = function (array1, array2) {\n        if (!array1 || !array2) {\n            return false;\n        }\n        if (array1.length !== array2.length) {\n            return false;\n        }\n        for (var i = 0; i < array1.length; i++) {\n            if (!array1[i].isEqualNode(array2[i])) {\n                return false;\n            }\n        }\n        return true;\n    };\n    DragZoneUtilities.getElementsNotInFirstArray = function (array1, array2) {\n        if (!array1 || !array2 || array2.length === 0) {\n            return [];\n        }\n        var addedElements = array2.filter(function (el) { return array1.indexOf(el) === -1; });\n        return addedElements;\n    };\n    return DragZoneUtilities;\n}());\nexport { DragZoneUtilities };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/agent/1/_work/60/s/libraries/sp-dragzone/lib/DragZoneUtilities.js\n// module id = null\n// module chunks = ","import { DragZoneUtilities } from './DragZoneUtilities';\nimport { clone } from '@microsoft/sp-lodash-subset';\nvar DATA_ATTRIBUTE = 'data-drag-tag';\nvar DATA_DISALLOWED_AREA_ATTRIBUTE = 'data-drag-disallowedArea-tag';\nvar DATA_DISALLOWED_ATTRIBUTE = 'data-drag-disallowed-tag';\nvar DATA_DRAG_HANDLE = 'data-drag-handle';\nvar DragZoneTree = (function () {\n    function DragZoneTree(treeLevelTagsBottomUp, host) {\n        this._bottomElements = new Map();\n        this._positionMatrix = [];\n        this._treeLevelTagsBottomUp = treeLevelTagsBottomUp;\n        this._treeDepth = treeLevelTagsBottomUp.length;\n        this._host = host;\n        this._currentPosition = { x: undefined, y: undefined };\n        this._startPosition = { x: undefined, y: undefined };\n    }\n    Object.defineProperty(DragZoneTree.prototype, \"currentPosition\", {\n        get: function () {\n            return this._currentPosition;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DragZoneTree.prototype, \"startPosition\", {\n        get: function () {\n            return this._startPosition;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DragZoneTree.prototype, \"depth\", {\n        get: function () {\n            return this._treeDepth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DragZoneTree.prototype, \"getDraggedItem\", {\n        get: function () {\n            return this._getLeafElementFromMousePosition(this._startPosition.x, this._startPosition.y);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DragZoneTree.prototype.getHoverOverItemPosition = function (el) {\n        var element = el ||\n            this.getBottomMostElementFromMousePosition();\n        if (element) {\n            return this._getElementPosition(element);\n        }\n        else {\n            return undefined;\n        }\n    };\n    DragZoneTree.prototype.getDraggedItemPosition = function () {\n        var draggedElement = this._getLeafElementFromMousePosition(this._startPosition.x, this._startPosition.y);\n        if (draggedElement) {\n            return this._getElementPosition(draggedElement);\n        }\n        else {\n            return undefined;\n        }\n    };\n    DragZoneTree.prototype.getLeafElementFromMousePosition = function () {\n        return this._getLeafElementFromMousePosition(this._currentPosition.x, this._currentPosition.y);\n    };\n    DragZoneTree.prototype.getDraggedOverElement = function () {\n        return document.elementFromPoint(this._currentPosition.x, this._currentPosition.y);\n    };\n    DragZoneTree.prototype.isDragAllowed = function (draggedItem, dragOverElement, dataDragDisallowed) {\n        var hoverOverItemWithDisallowedTag;\n        if (dragOverElement) {\n            hoverOverItemWithDisallowedTag =\n                this.getElementWithDataDisallowedAreaTag(dragOverElement, dataDragDisallowed);\n        }\n        if (!draggedItem ||\n            !dragOverElement ||\n            (hoverOverItemWithDisallowedTag &&\n                DragZoneUtilities.hasAttributeValue(draggedItem, DATA_DISALLOWED_ATTRIBUTE, dataDragDisallowed))) {\n            return false;\n        }\n        return true;\n    };\n    DragZoneTree.prototype.getBottomMostElementFromMousePosition = function (draggedItem, dataDragDisallowed) {\n        var _this = this;\n        var parents = [];\n        var elem = document.elementFromPoint(this._currentPosition.x, this._currentPosition.y);\n        if (!elem || (draggedItem && !this.isDragAllowed(draggedItem, elem, dataDragDisallowed))) {\n            return undefined;\n        }\n        do {\n            parents.push(elem);\n            elem = elem.parentElement;\n        } while (elem && elem !== this._host);\n        var _loop_1 = function (i) {\n            var candidates = parents.filter(function (element) {\n                return DragZoneUtilities.hasAttributeValue(element, DATA_ATTRIBUTE, _this._treeLevelTagsBottomUp[i]);\n            });\n            if (candidates && candidates.length > 0) {\n                var lastLeaf = this_1._getLastLeaf(candidates[0]);\n                if (lastLeaf) {\n                    var rect = lastLeaf.getBoundingClientRect();\n                    if (rect.bottom < this_1._currentPosition.y) {\n                        return { value: lastLeaf };\n                    }\n                    return { value: undefined };\n                }\n                return { value: candidates[0] };\n            }\n        };\n        var this_1 = this;\n        for (var i = 0; i < this._treeDepth; i++) {\n            var state_1 = _loop_1(i);\n            if (typeof state_1 === \"object\")\n                return state_1.value;\n        }\n        return undefined;\n    };\n    DragZoneTree.prototype.isLeafElement = function (element) {\n        return DragZoneUtilities.hasAttributeValue(element, DATA_ATTRIBUTE, this._treeLevelTagsBottomUp[0]);\n    };\n    DragZoneTree.prototype.addDisallowedStyles = function (dataDragDisallowed, dataDragDisallowedCss, draggedItem) {\n        if (!draggedItem) {\n            draggedItem = this._getLeafElementFromMousePosition(this._startPosition.x, this._startPosition.y);\n        }\n        if (DragZoneUtilities.hasAttributeValue(draggedItem, DATA_DISALLOWED_ATTRIBUTE, dataDragDisallowed)) {\n            this.applyRemoveCssToDataDragDisallowed(dataDragDisallowed, true, dataDragDisallowedCss);\n        }\n    };\n    DragZoneTree.prototype.applyRemoveCssToDataDragDisallowed = function (dataDragDisallowedTag, apply, cssClass) {\n        var elements = DragZoneUtilities.getElementsWithAttribute(this._host, DATA_DISALLOWED_AREA_ATTRIBUTE, dataDragDisallowedTag);\n        for (var i = 0; i < elements.length; i++) {\n            if (apply) {\n                elements[i].classList.add(cssClass);\n            }\n            else {\n                elements[i].classList.remove(cssClass);\n            }\n        }\n    };\n    DragZoneTree.prototype.getElementWithDataDisallowedAreaTag = function (elem, value) {\n        var tempElement = elem;\n        while (tempElement && tempElement !== this._host) {\n            if (DragZoneUtilities.hasAttributeValue(tempElement, DATA_DISALLOWED_AREA_ATTRIBUTE, value)) {\n                return tempElement;\n            }\n            tempElement = tempElement.parentElement;\n        }\n        return undefined;\n    };\n    DragZoneTree.prototype.getIndexInPositionMatrix = function (position) {\n        for (var i = 0; i < this._positionMatrix.length; i++) {\n            var equals = true;\n            for (var j = 0; j < position.length; j++) {\n                if (position[j] !== this._positionMatrix[i][j]) {\n                    equals = false;\n                    break;\n                }\n            }\n            if (equals) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    DragZoneTree.prototype.getElementFromPosition = function (position, refreshMatrix) {\n        if (refreshMatrix || this._bottomElements.size === 0) {\n            this.refreshPositionMatrix();\n        }\n        var index = this.getIndexInPositionMatrix(position);\n        if (index > -1 && index < this._bottomElements.size) {\n            return this._bottomElements.get(index);\n        }\n        else {\n            return undefined;\n        }\n    };\n    DragZoneTree.prototype.getLeafElementFromHandle = function (handle) {\n        var element = handle;\n        while (element && element !== this._host) {\n            if (DragZoneUtilities.hasAttributeValue(element, DATA_ATTRIBUTE, this._treeLevelTagsBottomUp[0])) {\n                return element;\n            }\n            element = element.parentElement;\n        }\n        return undefined;\n    };\n    DragZoneTree.prototype.getHandleFromLeafElement = function (draggedElement, value) {\n        var dragHandles = DragZoneUtilities.getElementsWithAttribute(draggedElement, DATA_DRAG_HANDLE, value);\n        return dragHandles && dragHandles[0];\n    };\n    DragZoneTree.prototype.refreshPositionMatrix = function () {\n        var currentPosition = [];\n        this._positionMatrix = [];\n        this._bottomElements = new Map();\n        this._traverse(this._host, this._treeDepth - 1, currentPosition);\n        this._fixMatrix(this._positionMatrix);\n        return this._positionMatrix;\n    };\n    DragZoneTree.prototype._traverse = function (parent, tagLevel, currentPosition) {\n        var children = DragZoneUtilities.getElementsWithAttribute(parent, DATA_ATTRIBUTE, this._treeLevelTagsBottomUp[tagLevel]);\n        if (children.length === 0 || tagLevel < 0) {\n            this._positionMatrix.push(clone(currentPosition));\n            this._bottomElements.set(this._positionMatrix.length - 1, parent);\n            return;\n        }\n        for (var i = 0; i < children.length; i++) {\n            currentPosition.push(i);\n            this._traverse(children[i], tagLevel - 1, currentPosition);\n            currentPosition.pop();\n        }\n    };\n    DragZoneTree.prototype._fixMatrix = function (positionMatrix) {\n        for (var i = 0; i < positionMatrix.length; i++) {\n            for (var j = 0; j < this._treeDepth; j++) {\n                if (positionMatrix[i].length <= j) {\n                    positionMatrix[i].push(-1);\n                }\n            }\n            positionMatrix[i] = positionMatrix[i].reverse();\n        }\n    };\n    DragZoneTree.prototype._getElementPosition = function (element) {\n        var treeIndeces = [];\n        var tempElement = element;\n        var tagLevel = this._getElementTagLevel(tempElement);\n        for (var i = 0; i < this._treeDepth - 1; i++) {\n            if (i < tagLevel) {\n                treeIndeces[i] = 0;\n                continue;\n            }\n            var thisLevelElement = tempElement;\n            while (tempElement.parentElement && tempElement !== this._host) {\n                tempElement = tempElement.parentElement;\n                if (DragZoneUtilities.hasAttributeValue(tempElement, DATA_ATTRIBUTE, this._treeLevelTagsBottomUp[i + 1])) {\n                    break;\n                }\n            }\n            var siblings = DragZoneUtilities.getElementsWithAttribute(tempElement, DATA_ATTRIBUTE, this._treeLevelTagsBottomUp[i]);\n            treeIndeces[i] = siblings.indexOf(thisLevelElement);\n            if (tempElement === this._host) {\n                break;\n            }\n        }\n        if (tempElement !== this._host) {\n            var tagListLastIndex = this._treeDepth - 1;\n            var siblings = DragZoneUtilities.getElementsWithAttribute(this._host, DATA_ATTRIBUTE, this._treeLevelTagsBottomUp[tagListLastIndex]);\n            treeIndeces[tagListLastIndex] = siblings.indexOf(tempElement);\n        }\n        return treeIndeces;\n    };\n    DragZoneTree.prototype._getElementTagLevel = function (element) {\n        var tag = element.getAttribute(DATA_ATTRIBUTE);\n        if (!tag) {\n            return undefined;\n        }\n        return this._treeLevelTagsBottomUp.indexOf(tag);\n    };\n    DragZoneTree.prototype._getLeafElementFromMousePosition = function (x, y) {\n        var elem = document.elementFromPoint(x, y);\n        while (elem.parentElement && elem.parentElement !== this._host) {\n            if (DragZoneUtilities.hasAttributeValue(elem, DATA_ATTRIBUTE, this._treeLevelTagsBottomUp[0])) {\n                return elem;\n            }\n            elem = elem.parentElement;\n        }\n        return undefined;\n    };\n    DragZoneTree.prototype._getLastLeaf = function (element) {\n        var leaves = DragZoneUtilities.getElementsWithAttribute(element, DATA_ATTRIBUTE, this._treeLevelTagsBottomUp[0]);\n        if (leaves.length === 0) {\n            return undefined;\n        }\n        else {\n            return leaves[leaves.length - 1];\n        }\n    };\n    return DragZoneTree;\n}());\nexport { DragZoneTree };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/agent/1/_work/60/s/libraries/sp-dragzone/lib/DragZoneTree.js\n// module id = null\n// module chunks = ","import * as tslib_1 from \"tslib\";\nimport { autobind, getRTLSafeKeyCode } from '@microsoft/office-ui-fabric-react-bundle';\nimport { clone } from '@microsoft/sp-lodash-subset';\nimport { StringHelper } from '@ms/odsp-utilities-bundle';\nimport { ScreenReader } from '@ms/sp-a11y';\nimport styles from './css/DragZone.module.scss';\nvar KeyCodes;\n(function (KeyCodes) {\n    KeyCodes[KeyCodes[\"Enter\"] = 13] = \"Enter\";\n    KeyCodes[KeyCodes[\"Escape\"] = 27] = \"Escape\";\n    KeyCodes[KeyCodes[\"Space\"] = 32] = \"Space\";\n    KeyCodes[KeyCodes[\"LeftArrow\"] = 37] = \"LeftArrow\";\n    KeyCodes[KeyCodes[\"UpArrow\"] = 38] = \"UpArrow\";\n    KeyCodes[KeyCodes[\"RightArrow\"] = 39] = \"RightArrow\";\n    KeyCodes[KeyCodes[\"DownArrow\"] = 40] = \"DownArrow\";\n})(KeyCodes || (KeyCodes = {}));\nvar DRAG_ZONE = 'DragZone';\nvar DragZoneKeyboard = (function () {\n    function DragZoneKeyboard(options) {\n        var _this = this;\n        this._isMovingForward = false;\n        options.strings = options.strings || {\n            handleTitle: '',\n            moveStarted: '',\n            moveComplete: '',\n            moveCancelled: '',\n            moveNotAllowed: '',\n            moveInsideLevel: []\n        }; \n        this._options = options;\n        var handles = options.handles;\n        var host = options.host, strings = options.strings;\n        if (handles) {\n            handles.forEach(function (handle) {\n                handle.addEventListener('keydown', _this._viewModeKeyDown);\n                handle.title = strings.handleTitle;\n            });\n        }\n        else {\n            host.addEventListener('keydown', this._viewModeKeyDown);\n            handles = [];\n        }\n    }\n    DragZoneKeyboard.prototype.dispose = function () {\n        var _this = this;\n        var _a = this._options, handles = _a.handles, host = _a.host;\n        if (handles) {\n            handles.forEach(function (handle) {\n                handle.removeEventListener('keydown', _this._viewModeKeyDown);\n            });\n        }\n        else {\n            host.removeEventListener('keydown', this._viewModeKeyDown);\n        }\n    };\n    DragZoneKeyboard.prototype.addHandles = function (handles) {\n        var _this = this;\n        handles.forEach(function (handle) {\n            handle.addEventListener('keydown', _this._viewModeKeyDown);\n            handle.title = _this._options.strings.handleTitle;\n            _this._options.handles.push(handle);\n        });\n    };\n    DragZoneKeyboard.prototype._viewModeKeyDown = function (evt) {\n        var _a = this._options, disallowedTag = _a.disallowedTag, disallowedClassName = _a.disallowedClassName, changeIconVisibility = _a.changeIconVisibility, onMoveStart = _a.onMoveStart, moveIcon = _a.moveIcon, removeLine = _a.removeLine, strings = _a.strings, host = _a.host, tree = _a.tree;\n        if (!this._isMoving && (evt.keyCode === KeyCodes.Enter || evt.keyCode === KeyCodes.Space)) {\n            this._isMoving = true;\n            ScreenReader.alert(DRAG_ZONE, strings.moveStarted);\n            host.addEventListener('keydown', this._moveModeKeyDown);\n            this._draggedElement = tree.getLeafElementFromHandle(evt.target);\n            this._draggedPosition = tree.getHoverOverItemPosition(this._draggedElement);\n            this._treeMatrix = tree.refreshPositionMatrix();\n            this._currentLocationIndex = tree.getIndexInPositionMatrix(this._draggedPosition);\n            if (disallowedTag && disallowedClassName) {\n                tree.addDisallowedStyles(disallowedTag, disallowedClassName, this._draggedElement);\n            }\n            if (onMoveStart) {\n                onMoveStart(this._draggedPosition);\n            }\n            var iconPosition = this._getIconPosition(this._draggedElement);\n            if (iconPosition) {\n                moveIcon(iconPosition.iconLeft, iconPosition.iconTop);\n            }\n            changeIconVisibility(true);\n            evt.stopPropagation();\n            evt.preventDefault();\n        }\n        else if (evt.keyCode === KeyCodes.Escape) {\n            removeLine();\n            changeIconVisibility(false);\n            ScreenReader.alert(DRAG_ZONE, strings.moveCancelled);\n            this._isMoving = false;\n            this._setFocusOnHandle(this._draggedElement);\n            host.removeEventListener('keydown', this._moveModeKeyDown);\n            this._removeStylesFromDisallowedArea();\n        }\n    };\n    DragZoneKeyboard.prototype._moveModeKeyDown = function (evt) {\n        var _a = this._options, removeLine = _a.removeLine, host = _a.host, moveItem = _a.moveItem, strings = _a.strings, supportHorizontalReorder = _a.supportHorizontalReorder, tree = _a.tree, disallowedTag = _a.disallowedTag, changeIconVisibility = _a.changeIconVisibility;\n        if (evt.keyCode === KeyCodes.Enter) {\n            removeLine();\n            changeIconVisibility(false);\n            if (tree.isDragAllowed(this._draggedElement, this._dropOverElement, disallowedTag)) {\n                moveItem(this._draggedPosition, this._dropPosition);\n                var draggedElement = tree.getElementFromPosition(this._dropPosition, true);\n                ScreenReader.alert(DRAG_ZONE, StringHelper.format(strings.moveComplete, this._formatFullPosition(this._draggedPosition), this._formatFullPosition(this._dropPosition)));\n                this._setFocusOnHandle(draggedElement);\n            }\n            else {\n                ScreenReader.alert(DRAG_ZONE, strings.moveNotAllowed);\n            }\n            this._isMoving = false;\n            var dropPosition = clone(this._dropPosition);\n            if (this._isMovingForward && dropPosition && !dropPosition[1] && !dropPosition[2]) {\n                dropPosition[0]--;\n            }\n            var newDraggedElement = tree.getElementFromPosition(dropPosition, true);\n            ScreenReader.alert(DRAG_ZONE, StringHelper.format(strings.moveComplete, this._formatFullPosition(this._draggedPosition), this._formatFullPosition(this._dropPosition)));\n            this._setFocusOnHandle(newDraggedElement);\n            host.removeEventListener('keydown', this._moveModeKeyDown);\n            this._removeStylesFromDisallowedArea();\n        }\n        else if (evt.keyCode === KeyCodes.DownArrow ||\n            supportHorizontalReorder && KeyCodes.RightArrow === getRTLSafeKeyCode(evt.keyCode)) {\n            this._moveForward();\n            this._isMovingForward = true;\n        }\n        else if (evt.keyCode === KeyCodes.UpArrow ||\n            supportHorizontalReorder && KeyCodes.LeftArrow === getRTLSafeKeyCode(evt.keyCode)) {\n            this._moveBack();\n            this._isMovingForward = false;\n        }\n        evt.stopPropagation();\n        evt.preventDefault();\n    };\n    DragZoneKeyboard.prototype._removeStylesFromDisallowedArea = function () {\n        var _a = this._options, disallowedTag = _a.disallowedTag, disallowedClassName = _a.disallowedClassName, tree = _a.tree;\n        if (disallowedTag && disallowedClassName) {\n            tree.applyRemoveCssToDataDragDisallowed(disallowedTag, false, disallowedClassName);\n        }\n    };\n    DragZoneKeyboard.prototype._setFocusOnHandle = function (element) {\n        var _a = this._options, handleTag = _a.handleTag, tree = _a.tree;\n        var dragHandle = tree.getHandleFromLeafElement(element, handleTag);\n        if (dragHandle) {\n            var tabIndex = dragHandle.getAttribute('tabindex');\n            if (tabIndex !== '0') {\n                dragHandle.setAttribute('tabindex', '0');\n                dragHandle.focus();\n                if (!isNaN(+tabIndex)) {\n                    dragHandle.setAttribute('tabindex', tabIndex);\n                }\n            }\n            else {\n                dragHandle.focus();\n            }\n        }\n    };\n    DragZoneKeyboard.prototype._moveForward = function () {\n        var _a = this._options, tree = _a.tree, moveLine = _a.moveLine, strings = _a.strings, scrollIntoView = _a.scrollIntoView, moveIcon = _a.moveIcon, onMoving = _a.onMoving, disallowedTag = _a.disallowedTag;\n        var line;\n        if (this._currentLocationIndex < this._treeMatrix.length - 1) {\n            var newIndex = this._currentLocationIndex + 1;\n            var newTentativeElement = tree.getElementFromPosition(this._treeMatrix[newIndex]);\n            this._dropPosition = clone(this._treeMatrix[newIndex]);\n            this._dropOverElement = newTentativeElement && newTentativeElement.parentElement;\n            if (!tree.isLeafElement(newTentativeElement)) {\n                this._dropPosition[0]++;\n                line = moveLine(newTentativeElement, false, false, true);\n                this._currentLocationIndex++;\n                ScreenReader.alert(DRAG_ZONE, this._formatFullPosition(this._dropPosition));\n            }\n            else {\n                if (this._indexNotChanged) {\n                    this._indexNotChanged = false;\n                    this._dropPosition[0]++;\n                    line = moveLine(newTentativeElement, true, false, true);\n                    this._currentLocationIndex++;\n                    ScreenReader.alert(DRAG_ZONE, this._formatPosition(this._dropPosition));\n                }\n                else if (this._upperLevelChange(this._treeMatrix[this._currentLocationIndex], this._treeMatrix[newIndex])) {\n                    line = moveLine(newTentativeElement, true, true, true);\n                    this._indexNotChanged = true;\n                    ScreenReader.alert(DRAG_ZONE, this._formatFullPosition(this._dropPosition));\n                }\n                else {\n                    line = moveLine(newTentativeElement, true, true, true);\n                    this._currentLocationIndex++;\n                    ScreenReader.alert(DRAG_ZONE, this._formatPosition(this._dropPosition));\n                }\n            }\n            scrollIntoView('partial', line, 500, 0);\n            var iconPosition = this._getIconPosition(line);\n            if (iconPosition) {\n                if (onMoving) {\n                    onMoving(!tree.isDragAllowed(this._draggedElement, this._dropOverElement, disallowedTag));\n                }\n                moveIcon(iconPosition.iconLeft, iconPosition.iconTop);\n            }\n        }\n        else {\n            ScreenReader.alert(DRAG_ZONE, strings.moveNotAllowed);\n        }\n        this._checkMoveAllowed(line);\n    };\n    DragZoneKeyboard.prototype._moveBack = function () {\n        var _a = this._options, tree = _a.tree, moveLine = _a.moveLine, strings = _a.strings, scrollIntoView = _a.scrollIntoView, moveIcon = _a.moveIcon, onMoving = _a.onMoving, disallowedTag = _a.disallowedTag;\n        var line;\n        if (this._currentLocationIndex > 0) {\n            var newIndex = this._currentLocationIndex - 1;\n            var newTentativeElement = tree.getElementFromPosition(this._treeMatrix[newIndex]);\n            this._dropPosition = clone(this._treeMatrix[newIndex]);\n            this._dropOverElement = newTentativeElement && newTentativeElement.parentElement;\n            if (!tree.isLeafElement(newTentativeElement)) {\n                this._dropPosition[0]++;\n                line = moveLine(newTentativeElement, false, false, true);\n                this._currentLocationIndex--;\n                ScreenReader.alert(DRAG_ZONE, this._formatFullPosition(this._dropPosition));\n            }\n            else {\n                if (this._indexNotChanged) {\n                    this._indexNotChanged = false;\n                    line = moveLine(newTentativeElement, true, true, true);\n                    this._currentLocationIndex--;\n                    ScreenReader.alert(DRAG_ZONE, this._formatPosition(this._dropPosition));\n                }\n                else if (this._upperLevelChange(this._treeMatrix[this._currentLocationIndex], this._treeMatrix[newIndex])) {\n                    this._dropPosition[0]++;\n                    line = moveLine(newTentativeElement, true, false, true);\n                    this._indexNotChanged = true;\n                    ScreenReader.alert(DRAG_ZONE, this._formatFullPosition(this._dropPosition));\n                }\n                else {\n                    line = moveLine(newTentativeElement, true, true, true);\n                    this._currentLocationIndex--;\n                    ScreenReader.alert(DRAG_ZONE, this._formatPosition(this._dropPosition));\n                }\n            }\n            scrollIntoView('partial', line, 500, 0, true);\n            var iconPosition = this._getIconPosition(line);\n            if (iconPosition) {\n                if (onMoving) {\n                    onMoving(!tree.isDragAllowed(this._draggedElement, this._dropOverElement, disallowedTag));\n                }\n                moveIcon(iconPosition.iconLeft, iconPosition.iconTop);\n            }\n        }\n        else {\n            ScreenReader.alert(DRAG_ZONE, strings.moveNotAllowed);\n        }\n        this._checkMoveAllowed(line);\n    };\n    DragZoneKeyboard.prototype._checkMoveAllowed = function (line) {\n        var _a = this._options, tree = _a.tree, strings = _a.strings, disallowedTag = _a.disallowedTag;\n        if (disallowedTag && !tree.isDragAllowed(this._draggedElement, this._dropOverElement, disallowedTag) && line) {\n            line.classList.add(styles.hideLine);\n            ScreenReader.alert(DRAG_ZONE, strings.moveNotAllowed);\n        }\n    };\n    DragZoneKeyboard.prototype._upperLevelChange = function (oldPosition, newPosition) {\n        if (oldPosition.length !== newPosition.length || oldPosition.length < 2 || newPosition.length < 2) {\n            return false;\n        }\n        for (var i = 1; i < oldPosition.length; i++) {\n            if (oldPosition[i] !== newPosition[i]) {\n                return true;\n            }\n        }\n        return false;\n    };\n    DragZoneKeyboard.prototype._formatFullPosition = function (position) {\n        var moveInsideLevel = this._options.strings.moveInsideLevel;\n        if (moveInsideLevel.length === 0 || position.length === 0) {\n            return;\n        }\n        return StringHelper.format.apply(StringHelper, [moveInsideLevel[moveInsideLevel.length - 1]].concat(position.reverse().map(function (val) {\n            return val + 1;\n        })));\n    };\n    DragZoneKeyboard.prototype._getIconPosition = function (element) {\n        var boundingRect = element && element.getBoundingClientRect();\n        if (boundingRect) {\n            var position = {\n                iconLeft: boundingRect.left + boundingRect.width / 2,\n                iconTop: boundingRect.top\n            };\n            return position;\n        }\n        return undefined;\n    };\n    DragZoneKeyboard.prototype._formatPosition = function (position) {\n        var moveInsideLevel = this._options.strings.moveInsideLevel;\n        if (moveInsideLevel.length === 0 || position.length === 0) {\n            return;\n        }\n        return StringHelper.format(moveInsideLevel[0], position[0] + 1);\n    };\n    tslib_1.__decorate([\n        autobind\n    ], DragZoneKeyboard.prototype, \"_viewModeKeyDown\", null);\n    tslib_1.__decorate([\n        autobind\n    ], DragZoneKeyboard.prototype, \"_moveModeKeyDown\", null);\n    return DragZoneKeyboard;\n}());\nexport default DragZoneKeyboard;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/agent/1/_work/60/s/libraries/sp-dragzone/lib/DragZoneKeyboard.js\n// module id = null\n// module chunks = ","import * as tslib_1 from \"tslib\";\nimport { Async } from '@ms/odsp-utilities-bundle';\nimport styles from './css/DragZone.module.scss';\nimport { autobind, getRTL, AutoScroll } from '@microsoft/office-ui-fabric-react-bundle';\nimport { DragZoneUtilities } from './DragZoneUtilities';\nimport { DragZoneTree } from './DragZoneTree';\nimport DragZoneKeyboard from './DragZoneKeyboard';\nvar DATA_DRAG_HANDLE = 'data-drag-handle';\nvar DRAGSTART_TIMEOUT_MS = 100;\nvar ICON_MARGIN_PX = -25;\nvar DRAGOVER_INTERVAL_MS = 200;\nvar LINE_WIDTH_PX = 3;\nvar DragZoneControl = (function () {\n    function DragZoneControl(options) {\n        if (!options.host) {\n            throw Error('Need to specify a host control for the DropZone');\n        }\n        if (!(options.treeLevelTagsBottomUp && options.treeLevelTagsBottomUp.length > 0)) {\n            throw Error('Need to have at least one level of tags for the DropZone');\n        }\n        this._options = options;\n        if (options.icon) {\n            this._icon = options.icon;\n        }\n        else {\n            this._icon = DragZoneUtilities.getDefaultIcon();\n            this._icon.classList.add(styles.iconCollapsed);\n            this._icon.classList.add(styles.iconAdditionalStyle);\n        }\n        this._tree = new DragZoneTree(options.treeLevelTagsBottomUp, options.host);\n    }\n    DragZoneControl.prototype.activate = function () {\n        var _this = this;\n        var _a = this._options, host = _a.host, dragHandleTag = _a.dragHandleTag, scrollIntoView = _a.scrollIntoView, disallowedTag = _a.disallowedTag, disallowedClassName = _a.disallowedClassName, onMoveStart = _a.onMoveStart, onMoving = _a.onMoving;\n        this._async = new Async();\n        if (dragHandleTag) {\n            this._dragHandles =\n                DragZoneUtilities.getElementsWithAttribute(host, DATA_DRAG_HANDLE, dragHandleTag);\n            this._dragHandles.forEach(function (handle) {\n                handle.addEventListener('mousedown', _this._onMouseDown);\n                handle.addEventListener('touchstart', _this._onMouseDown);\n                handle.classList.add(styles.handleGrab);\n            });\n        }\n        else {\n            host.addEventListener('mousedown', this._onMouseDown);\n            host.addEventListener('touchstart', this._onMouseDown);\n        }\n        var dragZoneKeyboardOptions = {\n            host: host,\n            tree: this._tree,\n            supportHorizontalReorder: this._supportHorizontalReorder,\n            moveLine: this._moveLine,\n            removeLine: this._removeLine,\n            moveItem: this._triggerOnMoved,\n            handles: this._dragHandles,\n            strings: this._options.dragZoneStrings,\n            handleTag: dragHandleTag,\n            scrollIntoView: scrollIntoView,\n            disallowedTag: disallowedTag,\n            disallowedClassName: disallowedClassName,\n            moveIcon: this._moveIcon,\n            changeIconVisibility: this._changeIconVisibility,\n            onMoveStart: onMoveStart,\n            onMoving: onMoving\n        };\n        if (this._supportKeyboardAlternative) {\n            this._dragZoneKeyboard = new DragZoneKeyboard(dragZoneKeyboardOptions);\n        }\n        host.addEventListener('mouseup', this._internalMouseUp);\n        host.addEventListener('touchend', this._internalMouseUp);\n        host.addEventListener('mouseout', this._onMouseOut);\n        host.addEventListener('touchout', this._onMouseOut);\n    };\n    DragZoneControl.prototype.deactivate = function () {\n        var _this = this;\n        var _a = this._options, host = _a.host, dragHandleTag = _a.dragHandleTag;\n        this._async.dispose();\n        if (this._supportKeyboardAlternative && this._dragZoneKeyboard) {\n            this._dragZoneKeyboard.dispose();\n        }\n        if (dragHandleTag) {\n            this._dragHandles =\n                DragZoneUtilities.getElementsWithAttribute(host, DATA_DRAG_HANDLE, dragHandleTag);\n            this._dragHandles.forEach(function (handle) {\n                handle.removeEventListener('mousedown', _this._onMouseDown);\n                handle.removeEventListener('touchstart', _this._onMouseDown);\n                handle.classList.remove(styles.handleGrab);\n            });\n        }\n        else {\n            host.removeEventListener('mousedown', this._onMouseDown);\n            host.removeEventListener('touchstart', this._onMouseDown);\n        }\n        host.removeEventListener('mouseup', this._internalMouseUp);\n        host.removeEventListener('touchend', this._internalMouseUp);\n        host.removeEventListener('mouseout', this._onMouseOut);\n        host.removeEventListener('touchout', this._onMouseOut);\n    };\n    DragZoneControl.prototype.refreshHandles = function () {\n        var _this = this;\n        var _a = this._options, host = _a.host, dragHandleTag = _a.dragHandleTag;\n        if (dragHandleTag) {\n            var dragHandles = DragZoneUtilities.getElementsWithAttribute(host, DATA_DRAG_HANDLE, dragHandleTag);\n            var itemsAdded = DragZoneUtilities.getElementsNotInFirstArray(this._dragHandles, dragHandles);\n            if (itemsAdded.length > 0) {\n                itemsAdded.forEach(function (handle) {\n                    _this._dragHandles.push(handle);\n                    handle.addEventListener('mousedown', _this._onMouseDown);\n                    handle.addEventListener('touchstart', _this._onMouseDown);\n                    handle.classList.remove(styles.handleGrab);\n                });\n            }\n            if (this._supportKeyboardAlternative && this._dragZoneKeyboard) {\n                this._dragZoneKeyboard.addHandles(itemsAdded);\n            }\n        }\n    };\n    DragZoneControl.prototype._onMouseMove = function (evt) {\n        this._mouseOut = false;\n        this._tree.currentPosition.x = evt.clientX;\n        this._tree.currentPosition.y = evt.clientY;\n    };\n    DragZoneControl.prototype._onTouchMove = function (evt) {\n        this._mouseOut = false;\n        if (evt.touches.length === 1) {\n            var touch = evt.touches[0];\n            this._tree.currentPosition.x = touch.clientX;\n            this._tree.currentPosition.y = touch.clientY;\n            evt.preventDefault();\n        }\n    };\n    DragZoneControl.prototype._onMouseOut = function () {\n        this._mouseOut = true;\n    };\n    DragZoneControl.prototype._onMouseDown = function (evt) {\n        evt.preventDefault();\n        this._mouseDown = true;\n        this._async.setTimeout(this._startDrag, DRAGSTART_TIMEOUT_MS);\n        if (evt instanceof MouseEvent) {\n            var mouseEvent = evt;\n            this._tree.startPosition.x = mouseEvent.clientX;\n            this._tree.startPosition.y = mouseEvent.clientY;\n            this._tree.currentPosition.x = mouseEvent.clientX;\n            this._tree.currentPosition.y = mouseEvent.clientY;\n        }\n        else if (evt instanceof TouchEvent) {\n            var touchEvent = evt;\n            if (touchEvent && touchEvent.touches.length > 0) {\n                this._tree.startPosition.x = touchEvent.touches[0].clientX;\n                this._tree.startPosition.y = touchEvent.touches[0].clientY;\n                this._tree.currentPosition.x = touchEvent.touches[0].clientX;\n                this._tree.currentPosition.y = touchEvent.touches[0].clientY;\n            }\n        }\n    };\n    DragZoneControl.prototype._onDragStart = function () {\n        var _a = this._options, disallowedTag = _a.disallowedTag, disallowedClassName = _a.disallowedClassName;\n        this._isDragging = true;\n        if (window.getSelection()) {\n            window.getSelection().removeAllRanges();\n        }\n        document.body.classList.add(styles.noselect);\n        this._animationFrameHandle = window.requestAnimationFrame(this._emulateMouseMove);\n        this._dragOverInterval = this._async.setInterval(this._emulateDragOver, DRAGOVER_INTERVAL_MS);\n        this._options.host.addEventListener('mousemove', this._onMouseMove);\n        this._options.host.addEventListener('touchmove', this._onTouchMove);\n        window.addEventListener('mouseup', this._onMouseUp);\n        window.addEventListener('touchend', this._onMouseUp);\n        this._autoScroll = new AutoScroll(this._options.host);\n        this._changeIconVisibility(true);\n        this._options.host.classList.add(styles.cursorDragging);\n        this._draggedItemPosition = this._tree.getDraggedItemPosition();\n        this._draggedElement = this._tree.getDraggedItem;\n        this._tree.addDisallowedStyles(disallowedTag, disallowedClassName);\n        if (this._options.onMoveStart) {\n            this._options.onMoveStart(this._draggedItemPosition);\n        }\n    };\n    DragZoneControl.prototype._changeIconVisibility = function (visible) {\n        this._icon.classList.remove(visible ? styles.iconCollapsed : styles.iconVisible);\n        this._icon.classList.add(visible ? styles.iconVisible : styles.iconCollapsed);\n    };\n    DragZoneControl.prototype._internalMouseUp = function () {\n        this._mouseDown = false;\n    };\n    DragZoneControl.prototype._onMouseUp = function () {\n        if (!this._isDragging) {\n            return;\n        }\n        this._isDragging = false;\n        this._changeIconVisibility(false);\n        document.body.classList.remove(styles.noselect);\n        if (this._mouseOut || !this._draggedElement || !this._dragOverElement) {\n            this._resetCursorEvents();\n            this._reset();\n            return;\n        }\n        this._resetCursorEvents();\n        this._triggerOnMoved(this._draggedItemPosition, this._hoverOverPosition);\n    };\n    DragZoneControl.prototype._triggerOnMoved = function (draggedItemPosition, dropPosition) {\n        if (this._options.onMoved) {\n            if (draggedItemPosition &&\n                draggedItemPosition.length === this._tree.depth &&\n                dropPosition && dropPosition.length === this._tree.depth) {\n                this._options.onMoved(draggedItemPosition, dropPosition);\n            }\n        }\n        this._reset();\n    };\n    DragZoneControl.prototype._emulateDragOver = function () {\n        var disallowedTag = this._options.disallowedTag;\n        var plainElement = this._options.canDropOnEmptyParent ?\n            this._tree.getBottomMostElementFromMousePosition(this._draggedElement, disallowedTag) :\n            this._tree.getLeafElementFromMousePosition();\n        var element = plainElement;\n        if (!element) {\n            return;\n        }\n        this._hoverOverPosition = this._tree.getHoverOverItemPosition(element);\n        var shouldInsertBefore = DragZoneUtilities.shouldInsertBeforeElement(element, this._tree.currentPosition.x, this._tree.currentPosition.y, this._supportHorizontalReorder);\n        var isLeaf = this._tree.isLeafElement(element);\n        if (!shouldInsertBefore && isLeaf) {\n            this._hoverOverPosition[0]++;\n        }\n        this._moveLine(element, isLeaf, shouldInsertBefore);\n    };\n    DragZoneControl.prototype._moveLine = function (adjacentElement, isLeaf, shouldInsertBefore) {\n        this._removeLine();\n        this._line = document.createElement('div');\n        this._line.className = styles.dropLocation;\n        var supportHorizontalReorder = this._options.supportHorizontalReorder;\n        if (supportHorizontalReorder) {\n            this._line.classList.add(styles.verticalLine);\n        }\n        else {\n            this._line.classList.add(styles.horizontalLine);\n        }\n        if (isLeaf) {\n            this._line.classList.add(styles.linePositionAbsolute);\n            if (supportHorizontalReorder) {\n                if (getRTL()) {\n                    if (!shouldInsertBefore) {\n                        this._line.style.marginRight = adjacentElement.getBoundingClientRect().width + \"px\";\n                    }\n                    else {\n                        this._line.style.marginRight = -LINE_WIDTH_PX + \"px\";\n                    }\n                }\n                else {\n                    if (!shouldInsertBefore) {\n                        this._line.style.marginLeft = adjacentElement.getBoundingClientRect().width + \"px\";\n                    }\n                    else {\n                        this._line.style.marginLeft = -LINE_WIDTH_PX + \"px\";\n                    }\n                }\n            }\n            else {\n                if (!shouldInsertBefore) {\n                    this._line.style.marginTop =\n                        this._getLineBottomPosition(adjacentElement.parentElement, adjacentElement) + 'px';\n                    this._line.style.marginTop =\n                        this._getLineBottomPosition(adjacentElement.parentElement, adjacentElement) + 'px';\n                }\n                else {\n                    this._line.style.marginTop = -this._options.dropPositionOffsetTopPx + 'px';\n                }\n            }\n            adjacentElement.parentElement.insertBefore(this._line, adjacentElement);\n        }\n        else {\n            if (this._supportHorizontalReorder) {\n                this._line.classList.add(styles.verticalLine);\n            }\n            else {\n                this._line.classList.add(styles.horizontalLine);\n            }\n            adjacentElement.appendChild(this._line);\n        }\n        this._dragOverElement = adjacentElement;\n        return this._line;\n    };\n    DragZoneControl.prototype._emulateMouseMove = function () {\n        var _a = this._options, disallowedTag = _a.disallowedTag, onMoving = _a.onMoving;\n        this._moveIcon(this._tree.currentPosition.x, this._tree.currentPosition.y);\n        if (onMoving && this._isDragging) {\n            onMoving(!this._tree.isDragAllowed(this._draggedElement, this._tree.getDraggedOverElement(), disallowedTag));\n        }\n        window.requestAnimationFrame(this._emulateMouseMove);\n    };\n    DragZoneControl.prototype._moveIcon = function (x, y) {\n        this._icon.style.top = y + ICON_MARGIN_PX + \"px\";\n        if (getRTL()) {\n            this._icon.style.right = x + ICON_MARGIN_PX + \"px\";\n        }\n        else {\n            this._icon.style.left = x + ICON_MARGIN_PX + \"px\";\n        }\n    };\n    DragZoneControl.prototype._startDrag = function () {\n        if (this._mouseDown) {\n            this._onDragStart();\n        }\n    };\n    DragZoneControl.prototype._resetCursorEvents = function () {\n        this._removeLine();\n        this._tree.startPosition.x = undefined;\n        this._tree.startPosition.y = undefined;\n        window.cancelAnimationFrame(this._animationFrameHandle);\n        this._async.clearInterval(this._dragOverInterval);\n        this._options.host.removeEventListener('mousemove', this._onMouseMove);\n        this._options.host.removeEventListener('touchmove', this._onTouchMove);\n        window.removeEventListener('mouseup', this._onMouseUp);\n        window.removeEventListener('touchend', this._onMouseUp);\n        this._options.host.classList.remove(styles.cursorDragging);\n        this._autoScroll.dispose();\n    };\n    DragZoneControl.prototype._reset = function () {\n        var _a = this._options, disallowedTag = _a.disallowedTag, disallowedClassName = _a.disallowedClassName;\n        this._draggedItemPosition = undefined;\n        this._dragOverElement = undefined;\n        this._tree.applyRemoveCssToDataDragDisallowed(disallowedTag, false, disallowedClassName);\n    };\n    DragZoneControl.prototype._removeLine = function () {\n        if (this._dragOverElement) {\n            if (this._tree.isLeafElement(this._dragOverElement) &&\n                this._dragOverElement.parentElement.contains(this._line)) {\n                this._dragOverElement.parentElement.removeChild(this._line);\n            }\n            else if (this._dragOverElement.contains(this._line)) {\n                this._dragOverElement.removeChild(this._line);\n            }\n        }\n    };\n    DragZoneControl.prototype._getLineBottomPosition = function (parent, element) {\n        var childRect = element.getBoundingClientRect();\n        var bottomInsideParent = childRect.height + this._options.dropPositionOffsetBottomPx;\n        return bottomInsideParent || 0;\n    };\n    Object.defineProperty(DragZoneControl.prototype, \"_supportHorizontalReorder\", {\n        get: function () {\n            return this._options.supportHorizontalReorder;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DragZoneControl.prototype, \"_supportKeyboardAlternative\", {\n        get: function () {\n            return this._options.supportKeyboardAlternative;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    tslib_1.__decorate([\n        autobind\n    ], DragZoneControl.prototype, \"_onMouseMove\", null);\n    tslib_1.__decorate([\n        autobind\n    ], DragZoneControl.prototype, \"_onTouchMove\", null);\n    tslib_1.__decorate([\n        autobind\n    ], DragZoneControl.prototype, \"_onMouseOut\", null);\n    tslib_1.__decorate([\n        autobind\n    ], DragZoneControl.prototype, \"_onMouseDown\", null);\n    tslib_1.__decorate([\n        autobind\n    ], DragZoneControl.prototype, \"_changeIconVisibility\", null);\n    tslib_1.__decorate([\n        autobind\n    ], DragZoneControl.prototype, \"_internalMouseUp\", null);\n    tslib_1.__decorate([\n        autobind\n    ], DragZoneControl.prototype, \"_onMouseUp\", null);\n    tslib_1.__decorate([\n        autobind\n    ], DragZoneControl.prototype, \"_triggerOnMoved\", null);\n    tslib_1.__decorate([\n        autobind\n    ], DragZoneControl.prototype, \"_emulateDragOver\", null);\n    tslib_1.__decorate([\n        autobind\n    ], DragZoneControl.prototype, \"_moveLine\", null);\n    tslib_1.__decorate([\n        autobind\n    ], DragZoneControl.prototype, \"_emulateMouseMove\", null);\n    tslib_1.__decorate([\n        autobind\n    ], DragZoneControl.prototype, \"_moveIcon\", null);\n    tslib_1.__decorate([\n        autobind\n    ], DragZoneControl.prototype, \"_startDrag\", null);\n    tslib_1.__decorate([\n        autobind\n    ], DragZoneControl.prototype, \"_removeLine\", null);\n    return DragZoneControl;\n}());\nexport { DragZoneControl };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/agent/1/_work/60/s/libraries/sp-dragzone/lib/DragZoneControl.js\n// module id = null\n// module chunks = "],"sourceRoot":""}