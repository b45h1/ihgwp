{"version":3,"sources":["WorkbenchPage.ts"],"names":[],"mappings":";;AAAA,2BAA6B;AAC7B,8BAAgC;AAEhC,kEAGsC;AAEtC,gFAAsF;AAWtF,IAAM,oBAAoB,GAAW,sCAAsC,CAAC,CAAC,kBAAkB;AAC/F,IAAM,iBAAiB,GAAW,sCAAsC,CAAC;AACzE,IAAM,qBAAqB,GAAW,sCAAsC,CAAC;AAE7E;IAQE;QAPQ,yBAAoB,GAAwB,IAAI,GAAG,EAAkB,CAAC;QACtE,qBAAgB,GAAW,OAAO,CAAC,GAAG,EAAE,CAAC;QACzC,oBAAe,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;QACnE,+BAA0B,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,oBAAoB,CAAC,CAAC;QAC3F,uBAAkB,GAAW,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAIvE,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAErE,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;QACnD,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;IACpD,CAAC;IAED,qCAAqC;IAC9B,8CAAsB,GAA7B,UAA8B,OAAY,EAAE,QAAa;QACvD,IAAM,iBAAiB,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,gBAAgB,CAAC,CAAC;QACpF,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC;QACnD,GAAG,CAAC,aAAa,CAAC,iBAAiB,EAAE,IAAI,CAAC,6BAA6B,EAAE,CAAC,CAAC;QAE3E,IAAM,YAAY,GAAW,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;QACpE,QAAQ,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;IAClC,CAAC;IAEO,qDAA6B,GAArC;QACE,4BAA4B;QAC5B,IAAM,eAAe,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,cAAc,CAAC,CAAC;QAChF,IAAM,aAAa,GAAW,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;QACnE,IAAM,gBAAgB,GAAW,IAAI,CAAC,qBAAqB,CACzD,iCAAiC,EACjC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,kBAAkB,CAAC,CAC5C,CAAC;QAEF,IAAM,WAAW,GAAuB,IAAI,CAAC,YAAY,CAAC;QAC1D,IAAI,IAAY,CAAC;QACjB,IAAI,IAAY,CAAC;QACjB,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YACjB,4FAA4F;YAC5F,mEAAmE;YACnE,IAAI,GAAG,IAAI,CAAC,aAAa,CACvB,+FAA+F,CAChG,CAAC;QACJ,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,GAAG,kDAC6B,aAAa,iEACb,WAAW,2MAKpB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,2BAA2B,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC,oEAEvD,gBAAgB,6IAI5C,CAAC;YACX,IAAI,GAAG,kHAGG,CAAC;QACX,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAClD,CAAC;IAMD,sBAAY,sCAAW;QAJvB;;;WAGG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAC/B,iCAAiC,EACjC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,iBAAiB,CAAC,CACrD,CAAC;QACJ,CAAC;;;OAAA;IAKD,sBAAY,uCAAY;QAHxB;;WAEG;aACH;YACE,IAAI,CAAC;gBACH,IAAM,YAAY,GAAW,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBACrD,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,EAAE,YAAY,CAAC,CAAC;YAC1E,CAAC;YAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACX,gGAAgG;gBAChG,MAAM,CAAC,SAAS,CAAC;YACnB,CAAC;QACH,CAAC;;;OAAA;IAKD,sBAAY,uCAAY;QAHxB;;WAEG;aACH;YACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;gBAC7B,IAAI,CAAC;oBACH,IAAI,CAAC,kBAAkB,GAAG,4BAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC,CAAC;gBACpG,CAAC;gBAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACX,iDAAiD;oBACjD,IAAI,CAAC,kBAAkB,GAAG;wBACxB,IAAI,EAAE,IAAI;wBACV,WAAW,EAAE,EAAE;qBAChB,CAAC;gBACJ,CAAC;YACH,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC;QACjC,CAAC;;;OAAA;IAEO,qCAAa,GAArB,UAAsB,YAAoB;QACxC,MAAM,CAAC,8EAEH,YAAY,kBACR,CAAC;IACX,CAAC;IAEO,+CAAuB,GAA/B,UAAgC,IAAY,EAAE,IAAa;QACzD,MAAM,CAAC,mXAS2B,IAAI,CAAC,WAAW,kBAClD,IAAI,IAAI,EAAE,kCAGV,IAAI,+BAGL,CAAC;IACF,CAAC;IAEO,wCAAgB,GAAxB;QACE,IAAM,cAAc,GAAW,wBAAc,CAAC,sBAAsB,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAC/F,IAAM,UAAU,GAAW,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;QAC7D,IAAM,oBAAoB,GAAW,IAAI,CAAC,IAAI,CAAC,UAAU,EAAK,oBAAoB,mBAAgB,CAAC,CAAC;QACpG,IAAM,gBAAgB,GAA+B,4BAAQ,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;QACzF,IAAM,yBAAyB,GAC7B,gBAAgB,CAAC,YAAY,CAAC,eAAe,CAAC,gBAAgB,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;QAE7F,EAAE,CAAC,CAAC,CAAC,yBAAyB,CAAC,CAAC,CAAC;YAC/B,MAAM,oCAAoC,CAAC;QAC7C,CAAC;QAED,IAAI,SAAiB,CAAC;QACtB,MAAM,CAAC,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC,CAAC;YACvC,KAAK,MAAM;gBACT,SAAS,GAAG,IAAI,CAAC,yBAAyB,CACvC,yBAAsD,CAAC,IAAI,CAC7D,CAAC;gBACF,KAAK,CAAC;YAER,KAAK,eAAe;gBAClB,SAAS,GAAG,IAAI,CAAC,yBAAyB,CACvC,yBAA+D,CAAC,WAAW,CAC7E,CAAC;gBACF,KAAK,CAAC;YAER;gBACE,MAAM,+CAA6C,oBAAsB,CAAC;QAC9E,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACf,MAAM,8BAA8B,CAAC;QACvC,CAAC;QAED,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IAEO,iDAAyB,GAAjC,UAAkC,kBAAkC;QAClE,EAAE,CAAC,CAAC,OAAO,kBAAkB,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,kBAAkB,CAAC;QAC5B,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,kBAAkB,CAAC,KAAK,IAAI,kBAAkB,CAAC,OAAO,CAAC;QAChE,CAAC;IACH,CAAC;IAEO,6CAAqB,GAA7B,UAA8B,WAAmB,EAAE,iBAAyB;QAC1E,IAAM,qBAAqB,GAAW,WAAW,CAAC,WAAW,EAAE,CAAC;QAChE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;YAC1D,IAAM,WAAW,GAAW,wBAAc,CAAC,WAAW,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;YACjF,IAAM,WAAW,GAAW,IAAI,CAAC,IAAI,CACnC,IAAI,CAAC,0BAA0B,EAC/B,WAAW,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,yEAAyE;aAC1G,CAAC;YACF,GAAG,CAAC,WAAW,CAAC,WAAW,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;YACtD,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,qBAAqB,EAAE,WAAW,CAAC,CAAC;QACpE,CAAC;QAED,IAAM,iBAAiB,GAAW,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QACvF,IAAM,QAAQ,GAAW,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,CAAC;QACzE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;IACvC,CAAC;IAEO,sCAAc,GAAtB,UAAuB,QAAgB;QACrC,IAAM,YAAY,GAAW,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;QAC5E,MAAM,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,OAAO,GAAG,MAAM,CAAE;aAClD,kBAAgB,IAAI,CAAC,YAAY,CAAC,IAAI,SAAI,YAAY,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAG,CAAA,CAAC;IACjF,CAAC;IAEO,mDAA2B,GAAnC;QACE,4BAA4B;QAC5B,IAAM,gBAAgB,GAAW,wBAAc,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QACpE,IAAM,YAAY,GAAiB,4BAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,cAAc,CAAC,CAAC,CAAC;QAC9F,IAAM,QAAQ,GAAW,IAAI,CAAC,qBAAqB,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC;QAE5F,gCAAgC;QAChC,IAAM,mBAAmB,GAAW,wBAAc,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;QAC3E,IAAM,eAAe,GAAiB,4BAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,cAAc,CAAC,CAAC,CAAC;QACpG,IAAM,WAAW,GAAW,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC,CAAC;QAEvG,IAAM,aAAa,GAA+B;YAChD,EAAE,EAAE,iBAAiB;YACrB,eAAe,EAAE,CAAC;YAClB,aAAa,EAAE,SAAS;YACxB,KAAK,EAAE,OAAO;YACd,OAAO,EAAE,YAAY,CAAC,OAAO;YAC7B,YAAY,EAAE;gBACZ,sBAAsB,EAAE,EAAE;gBAC1B,aAAa,EAAE,OAAO;gBACtB,eAAe,EAAE;oBACf,OAAO,EAAE;wBACP,IAAI,EAAE,MAAM;wBACZ,IAAI,EAAE,QAAQ;qBACa;iBAC9B;aACF;SACF,CAAC;QAEF,IAAM,gBAAgB,GAA+B;YACnD,EAAE,EAAE,qBAAqB;YACzB,eAAe,EAAE,CAAC;YAClB,aAAa,EAAE,SAAS;YACxB,KAAK,EAAE,WAAW;YAClB,OAAO,EAAE,eAAe,CAAC,OAAO;YAChC,YAAY,EAAE;gBACZ,sBAAsB,EAAE,EAAE;gBAC1B,aAAa,EAAE,WAAW;gBAC1B,eAAe,EAAE;oBACf,WAAW,EAAE;wBACX,IAAI,EAAE,MAAM;wBACZ,IAAI,EAAE,WAAW;qBACU;oBAC7B,OAAO,EAAE;wBACP,IAAI,EAAE,WAAW;wBACjB,EAAE,EAAE,iBAAiB;wBACrB,OAAO,EAAE,YAAY,CAAC,OAAO;qBACG;iBACnC;aACF;SACF,CAAC;QAEF,MAAM,CAAC;YACL,aAAa;YACb,gBAAgB;SACjB,CAAC;IACJ,CAAC;IACH,oBAAC;AAAD,CAtQA,AAsQC,IAAA;AAtQY,sCAAa","file":"WorkbenchPage.js","sourcesContent":["import * as path from 'path';\r\nimport * as fsx from 'fs-extra';\r\n\r\nimport {\r\n  JsonFile,\r\n  IPackageJson\r\n} from '@microsoft/node-core-library';\r\nimport { IServeTaskConfig } from '@microsoft/gulp-core-build-serve/lib/ServeTask';\r\nimport { resolvePackage } from '@microsoft/sp-build-core-tasks/lib/utilities/Resolve';\r\nimport {\r\n  IClientSideLibraryManifest,\r\n  IModuleConfiguration,\r\n  IPathModuleConfiguration,\r\n  ILocalizedPathModuleConfiguration,\r\n  IPath,\r\n  IClientSideComponentManifest,\r\n  IComponentModuleConfiguration\r\n} from '@microsoft/sp-module-interfaces';\r\n\r\nconst ASSEMBLY_MANIFEST_ID: string = '44bae1a2-d2eb-4e10-8c21-a1dbdce1036f'; // loader assembly\r\nconst REACT_MANIFEST_ID: string = '0d910c1c-13b9-4e1c-9aa4-b008c5e42d7d';\r\nconst REACT_DOM_MANIFEST_ID: string = 'aa0a46ec-1505-43cd-a44a-93f3a5aa460a';\r\n\r\nexport class WorkbenchPage {\r\n  private _packageNameSymlinks: Map<string, string> = new Map<string, string>();\r\n  private _projectRootPath: string = process.cwd();\r\n  private _tempFolderPath: string = path.join(this._projectRootPath, 'temp');\r\n  private _workbenchPackagesTempPath: string = path.join(this._tempFolderPath, 'workbench-packages');\r\n  private _workbenchRootPath: string = path.resolve(__dirname, '..', '..');\r\n  private _cachedServeConfig: IServeTaskConfig;\r\n\r\n  public constructor() {\r\n    this.handleWorkbenchRequest = this.handleWorkbenchRequest.bind(this);\r\n\r\n    fsx.ensureDirSync(this._workbenchPackagesTempPath);\r\n    fsx.emptyDirSync(this._workbenchPackagesTempPath);\r\n  }\r\n\r\n  /* tslint:disable-next-line:no-any */\r\n  public handleWorkbenchRequest(request: any, response: any): void {\r\n    const workbenchFilePath: string = path.join(this._tempFolderPath, 'workbench.html');\r\n    fsx.ensureDirSync(path.dirname(workbenchFilePath));\r\n    fsx.writeFileSync(workbenchFilePath, this._generateWorkbenchPageContent());\r\n\r\n    const redirectPath: string = this._getUrlForPath(workbenchFilePath);\r\n    response.redirect(redirectPath);\r\n  }\r\n\r\n  private _generateWorkbenchPageContent(): string {\r\n    // Get the manifests.js URL.\r\n    const manifestsJsPath: string = path.join(this._tempFolderPath, 'manifests.js');\r\n    const manifestJsUrl: string = this._getUrlForPath(manifestsJsPath);\r\n    const workbenchInitUrl: string = this._getUrlForPackagePath(\r\n      '@microsoft/sp-webpart-workbench',\r\n      path.join('lib', 'api', 'workbenchInit.js')\r\n    );\r\n\r\n    const assemblyUrl: string | undefined = this._assemblyUrl;\r\n    let head: string;\r\n    let body: string;\r\n    if (!assemblyUrl) {\r\n      // This doesn't need to be localized because this string can only show up when the workbench\r\n      //  has been NPM installed, and we only ship English modules to NPM\r\n      body = this._getErrorBody(\r\n        'The script containing the initialization code could not be resolved. Unable to load workbench'\r\n      );\r\n    } else {\r\n      head = `\r\n    <script type=\"text/javascript\" src=\"${manifestJsUrl}\"></script>\r\n    <script type=\"text/javascript\" src=\"${assemblyUrl}\"></script>\r\n    <script type=\"text/javascript\">\r\n      // The workbenchInit.js script is commonJS and expects an \"exports\" object\r\n      var exports = {};\r\n\r\n      var syntheticManifests = ${JSON.stringify(this._generateSyntheticManifests(), undefined, 2)}\r\n    </script>\r\n    <script type=\"text/javascript\" src=\"${workbenchInitUrl}\"></script>\r\n    <script type=\"text/javascript\">\r\n      // Clean up the \"exports\" object\r\n      exports = undefined;\r\n    </script>`;\r\n    body = `\r\n    <script type=\"text/javascript\">\r\n      window.spModuleLoader.start(window.preloadedData);\r\n    </script>`;\r\n    }\r\n\r\n    return this._getPageWithBodyAndHead(body, head);\r\n  }\r\n\r\n  /**\r\n   * Generate a favicon URL. Chrome will request one if we don't give a URL, so in order to avoid an error in the\r\n   * console we'll give a URL.\r\n   */\r\n  private get _faviconUrl(): string {\r\n    return this._getUrlForPackagePath(\r\n      '@microsoft/sp-webpart-workbench',\r\n      path.join('lib', 'api', 'assets', 'server-icon.png')\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Find the assembly.\r\n   */\r\n  private get _assemblyUrl(): string | undefined {\r\n    try {\r\n      const assemblyPath: string = this._getAssemblyPath();\r\n      return this._getUrlForPackagePath('@microsoft/sp-loader', assemblyPath);\r\n    } catch (e) {\r\n      // Unable to get the assembly URL. We'll inform the user if they try to load the workbench page.\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the running project's serve.json\r\n   */\r\n  private get _serveConfig(): IServeTaskConfig {\r\n    if (!this._cachedServeConfig) {\r\n      try {\r\n        this._cachedServeConfig = JsonFile.load(path.join(this._projectRootPath, 'config', 'serve.json'));\r\n      } catch (e) {\r\n        // Could not load serve config, setting defaults.\r\n        this._cachedServeConfig = {\r\n          port: 4321,\r\n          initialPage: ''\r\n        };\r\n      }\r\n    }\r\n\r\n    return this._cachedServeConfig;\r\n  }\r\n\r\n  private _getErrorBody(errorMessage: string): string {\r\n    return `\r\n    <span style=\"font-weight:bold;color:red;font-size:20px;\">\r\n      ${errorMessage}\r\n    </span>`;\r\n  }\r\n\r\n  private _getPageWithBodyAndHead(body: string, head?: string): string {\r\n    return `<!doctype html>\r\n  <html dir=\"ltr\">\r\n  <head>\r\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n\r\n    <title>SharePoint Web Part Workbench</title>\r\n\r\n    <link rel=\"shortcut icon\" href=\"${this._faviconUrl}\" />\r\n  ${head || ''}\r\n  </head>\r\n  <body>\r\n  ${body}\r\n  </body>\r\n  </html>\r\n  `;\r\n  }\r\n\r\n  private _getAssemblyPath(): string {\r\n    const loaderRootPath: string = resolvePackage('@microsoft/sp-loader', this._workbenchRootPath);\r\n    const distFolder: string = path.join(loaderRootPath, 'dist');\r\n    const assemblyManifestPath: string = path.join(distFolder, `${ASSEMBLY_MANIFEST_ID}.manifest.json`);\r\n    const assemblyManifest: IClientSideLibraryManifest = JsonFile.load(assemblyManifestPath);\r\n    const assemblyEntryModuleConfig: IModuleConfiguration =\r\n      assemblyManifest.loaderConfig.scriptResources[assemblyManifest.loaderConfig.entryModuleId];\r\n\r\n    if (!assemblyEntryModuleConfig) {\r\n      throw 'Unable to find assembly entrypoint';\r\n    }\r\n\r\n    let foundPath: string;\r\n    switch (assemblyEntryModuleConfig.type) {\r\n      case 'path':\r\n        foundPath = this._disambiguateManifestPath(\r\n          (assemblyEntryModuleConfig as IPathModuleConfiguration).path\r\n        );\r\n        break;\r\n\r\n      case 'localizedPath':\r\n        foundPath = this._disambiguateManifestPath(\r\n          (assemblyEntryModuleConfig as ILocalizedPathModuleConfiguration).defaultPath\r\n        );\r\n        break;\r\n\r\n      default:\r\n        throw `Invalid module assembly manifest found at ${assemblyManifestPath}`;\r\n    }\r\n\r\n    if (!foundPath) {\r\n      throw 'Unable to find assembly path';\r\n    }\r\n\r\n    return foundPath;\r\n  }\r\n\r\n  private _disambiguateManifestPath(pathToDisambiguate: string | IPath): string {\r\n    if (typeof pathToDisambiguate === 'string') {\r\n      return pathToDisambiguate;\r\n    } else {\r\n      return pathToDisambiguate.debug || pathToDisambiguate.default;\r\n    }\r\n  }\r\n\r\n  private _getUrlForPackagePath(packageName: string, pathInsidePackage: string): string {\r\n    const normalizedPackageName: string = packageName.toUpperCase();\r\n    if (!this._packageNameSymlinks.has(normalizedPackageName)) {\r\n      const packagePath: string = resolvePackage(packageName, this._workbenchRootPath);\r\n      const symlinkPath: string = path.join(\r\n        this._workbenchPackagesTempPath,\r\n        packageName.replace(/\\//g, '_') // Replace slashes with underscores so we don't create nested directories\r\n      );\r\n      fsx.symlinkSync(packagePath, symlinkPath, 'junction');\r\n      this._packageNameSymlinks.set(normalizedPackageName, symlinkPath);\r\n    }\r\n\r\n    const linkedPackagePath: string = this._packageNameSymlinks.get(normalizedPackageName);\r\n    const filePath: string = path.join(linkedPackagePath, pathInsidePackage);\r\n    return this._getUrlForPath(filePath);\r\n  }\r\n\r\n  private _getUrlForPath(filePath: string): string {\r\n    const relativePath: string = path.relative(this._projectRootPath, filePath);\r\n    return (this._serveConfig.https ? 'https' : 'http' ) +\r\n      `://localhost:${this._serveConfig.port}/${relativePath.replace(/\\\\/g, '/')}`;\r\n  }\r\n\r\n  private _generateSyntheticManifests(): IClientSideComponentManifest[] {\r\n    // Figure out where React is\r\n    const reactPackagePath: string = resolvePackage('react', __dirname);\r\n    const reactPackage: IPackageJson = JsonFile.load(path.join(reactPackagePath, 'package.json'));\r\n    const reactUrl: string = this._getUrlForPackagePath('react', path.join('dist', 'react.js'));\r\n\r\n    // Figure out where React-DOM is\r\n    const reactDomPackagePath: string = resolvePackage('react-dom', __dirname);\r\n    const reactDomPackage: IPackageJson = JsonFile.load(path.join(reactDomPackagePath, 'package.json'));\r\n    const reactDomUrl: string = this._getUrlForPackagePath('react-dom', path.join('dist', 'react-dom.js'));\r\n\r\n    const reactManifest: IClientSideLibraryManifest = {\r\n      id: REACT_MANIFEST_ID,\r\n      manifestVersion: 2,\r\n      componentType: 'Library',\r\n      alias: 'react',\r\n      version: reactPackage.version,\r\n      loaderConfig: {\r\n        internalModuleBaseUrls: [],\r\n        entryModuleId: 'react',\r\n        scriptResources: {\r\n          'react': {\r\n            type: 'path',\r\n            path: reactUrl\r\n          } as IPathModuleConfiguration\r\n        }\r\n      }\r\n    };\r\n\r\n    const reactDomManifest: IClientSideLibraryManifest = {\r\n      id: REACT_DOM_MANIFEST_ID,\r\n      manifestVersion: 2,\r\n      componentType: 'Library',\r\n      alias: 'react-dom',\r\n      version: reactDomPackage.version,\r\n      loaderConfig: {\r\n        internalModuleBaseUrls: [],\r\n        entryModuleId: 'react-dom',\r\n        scriptResources: {\r\n          'react-dom': {\r\n            type: 'path',\r\n            path: reactDomUrl\r\n          } as IPathModuleConfiguration,\r\n          'react': {\r\n            type: 'component',\r\n            id: REACT_MANIFEST_ID,\r\n            version: reactPackage.version\r\n          } as IComponentModuleConfiguration\r\n        }\r\n      }\r\n    };\r\n\r\n    return [\r\n      reactManifest,\r\n      reactDomManifest\r\n    ];\r\n  }\r\n}\r\n"],"sourceRoot":"../src"}