/**
 * SharePoint Framework support for building client-side components
 * 
 * @remarks
 * This package supports development of client-side components (e.g. web parts,
 * client-side extensions, and applications) built using the SharePoint Framework.
 * It defines the base classes and interfaces for functionality that is
 * common across all client-side component types.
 * 
 * @packagedocumentation
 */

import { IClientSideComponentManifest } from '@microsoft/sp-module-interfaces';
import { IDisposable } from '@microsoft/sp-core-library';
import { ISPEventObserver } from '@microsoft/sp-core-library';
import { PageContext } from '@microsoft/sp-page-context';
import { ServiceScope } from '@microsoft/sp-core-library';

/**
 * The base class for client-side components such as BaseClientSideWebPart or BaseExtension.
 *
 * @public
 */
export declare abstract class BaseComponent implements ISPEventObserver {
    /**
     * Use the context object to access common services and state associated with the component.
     *
     * @remarks
     *
     * Child classes are expected to override this field by redeclaring it with a specialized type.
     * It is meant to be a read-only property; the type cannot be declared as read-only in the base class
     * (because it is initialized outside the constructor), but child classes should redeclare
     * it as readonly.
     *
     * @internalremarks
     *
     * This is a workaround for a missing compiler feature.  If the compiler issue is resolved,
     * then we can convert "context" to an ordinary property getter.
     * https://github.com/Microsoft/TypeScript/issues/338
     */
    protected context: BaseComponentContext;
    private _isDisposed;
    /* Excluded from this release type: __constructor */
    /**
     * Disposes the component.
     *
     * @remarks
     * Third-party code generally does not need to call this method; it's invoked
     * automatically when the lifecycle ends for a web part or extension.  To perform
     * custom cleanup when your component is disposed, override the {@link BaseComponent.onDispose}
     * method.
     */
    dispose(): void;
    /**
     * Returns true if the component has been already disposed.
     */
    readonly isDisposed: boolean;
    /**
     * Provides access to the manifest for the client-side component.
     * @remarks
     * Child classes can override this with more specialized manifest types.
     */
    readonly manifest: IClientSideComponentManifest;
    /**
     * This event method is called at the end of the component's lifecycle.
     * It provides an opportunity to release any associated resources, cancel any
     * outstanding requests, etc.
     */
    protected onDispose(): void;
    /**
     * A unique identifier for the instance of the component.
     *
     * @remarks
     * A component implementation can be loaded multiple times on the page.
     * For example, if the component is a charting web part, multiple instances of this web part
     * could be added to the SharePoint canvas.  The instanceId uniquely identifies each
     * of these instances.
     */
    readonly instanceId: string;
    /**
     * Returns the component identifier as defined in the componentâ€™s associated manifest.
     *
     * @remarks
     * Each client-side component has an associated manifest that is used by the sp-loader to load its scripts,
     * and which may include additional metadata about the component.  The manifest is uniquely identified using
     * a text string containing a lower case GUID value.
     */
    readonly componentId: string;
    /* Excluded from this release type: _initializeContext */
    /* Excluded from this release type: onProvideServices */
}

/**
 * The base class for context objects for client-side components.
 *
 * @remarks
 * A "context" object is a collection of well-known services and other
 * objects that are likely to be needed by business logic that interacts with a
 * associated component.  Each component type has its own specialized subclass
 * of BaseComponentContext, e.g. WebPartContext for web parts, ExtensionContext for
 * client-side extensions, and so on.
 *
 * @internalremarks
 *
 * NOTE: The context object is a convenience that avoids the overhead of
 * properly factoring the dependencies for every class in a project.
 * If lots of members are added to the context without discipline, it can
 * easily devolve into a poor engineering practice (where "everything depends
 * on everything else").  Think carefully before adding more objects to the context object.
 * Is it really a core scenario?  Is it unnecessarily coupling your package to another
 * package?  Is there a better place to put the object?
 *
 * Only add data properties or well-defined classes with ubiquitous applicability.
 * Never add loose functions, callbacks, or settable properties to the context.
 *
 * @public
 */
export declare abstract class BaseComponentContext implements IDisposable {
    /**
     * Manifest for the client side component.
     */
    readonly manifest: IClientSideComponentManifest;
    private _serviceScope;
    private _instanceId;
    private _pageContext;
    private _dynamicDataProvider;
    private _dynamicDataSourceManager;
    private _isDisposed;
    /* Excluded from this release type: __constructor */
    /**
     * Returns true if the context is disposed.
     */
    readonly isDisposed: boolean;
    /**
     * Disposes the base component context.
     */
    dispose(): void;
    /**
     * The associated {@link @microsoft/sp-core-library:ServiceScope} for this component.
     * @remarks
     * A child service scope is created for each client-side component.
     */
    readonly serviceScope: ServiceScope;
    /**
     * {@inheritdoc BaseComponent.instanceId}
     */
    readonly instanceId: string;
    /**
     * The page context provides standard definitions for common SharePoint objects
     * that need to be shared between the client-side application, web parts, and other
     * components.
     */
    readonly pageContext: PageContext;
    /* Excluded from this release type: _initializeDynamicData */
    /* Excluded from this release type: dynamicDataProvider */
    /* Excluded from this release type: dynamicDataSourceManager */
}

/* Excluded from this release type: DynamicDataProvider */

/* Excluded from this release type: DynamicDataSourceManager */

/* Excluded from this release type: DynamicProperty */

/* Excluded from this release type: _IComponentContextParameters */

/* Excluded from this release type: _LegacyThirdPartyFabricCoreLoader */
