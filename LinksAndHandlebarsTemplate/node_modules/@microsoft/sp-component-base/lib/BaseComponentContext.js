import { Validate } from '@microsoft/sp-core-library';
import { _LogSource, _logSourceServiceKey } from '@microsoft/sp-diagnostics';
import { PageContext } from '@microsoft/sp-page-context';
import DynamicDataProvider from './DynamicDataProvider';
import DynamicDataSourceManager from './DynamicDataSourceManager';
var BaseComponentContext = (function () {
    function BaseComponentContext(parameters) {
        var _this = this;
        this._isDisposed = false;
        Validate.isNotNullOrUndefined(parameters, 'parameters');
        Validate.isNotNullOrUndefined(parameters.manifest, 'manifest');
        this.manifest = parameters.manifest;
        Validate.isNotNullOrUndefined(parameters.parentServiceScope, 'parentServiceScope');
        this._serviceScope = parameters.parentServiceScope.startNewChild();
        Validate.isNotNullOrUndefined(parameters.loggingTag, 'loggingTag');
        this.serviceScope.provide(_logSourceServiceKey, _LogSource.create(parameters.loggingTag));
        Validate.isNonemptyString(parameters.instanceId, 'instanceId');
        this._instanceId = parameters.instanceId;
        this.serviceScope.whenFinished(function () {
            _this._pageContext = _this.serviceScope.consume(PageContext.serviceKey);
        });
        this._dynamicDataProvider = new DynamicDataProvider();
        this._dynamicDataSourceManager = new DynamicDataSourceManager();
    }
    Object.defineProperty(BaseComponentContext.prototype, "isDisposed", {
        get: function () {
            return this._isDisposed;
        },
        enumerable: true,
        configurable: true
    });
    BaseComponentContext.prototype.dispose = function () {
        if (!this._isDisposed) {
            if (this._dynamicDataProvider) {
                this._dynamicDataProvider.dispose();
            }
            if (this._dynamicDataSourceManager) {
                this._dynamicDataSourceManager.dispose();
            }
            delete this._serviceScope;
            delete this._pageContext;
            delete this._dynamicDataProvider;
            delete this._dynamicDataSourceManager;
            this._isDisposed = true;
        }
    };
    Object.defineProperty(BaseComponentContext.prototype, "serviceScope", {
        get: function () { return this._serviceScope; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComponentContext.prototype, "instanceId", {
        get: function () { return this._instanceId; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComponentContext.prototype, "pageContext", {
        get: function () { return this._pageContext; },
        enumerable: true,
        configurable: true
    });
    BaseComponentContext.prototype._initializeDynamicData = function (component, serviceScope) {
        this._dynamicDataProvider._initialize(component, serviceScope);
        this._dynamicDataSourceManager._initialize(component, serviceScope);
    };
    Object.defineProperty(BaseComponentContext.prototype, "dynamicDataProvider", {
        get: function () {
            return this._dynamicDataProvider;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComponentContext.prototype, "dynamicDataSourceManager", {
        get: function () {
            return this._dynamicDataSourceManager;
        },
        enumerable: true,
        configurable: true
    });
    return BaseComponentContext;
}());
export default BaseComponentContext;
