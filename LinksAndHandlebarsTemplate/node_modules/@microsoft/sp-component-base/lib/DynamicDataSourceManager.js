import { Validate } from '@microsoft/sp-core-library';
import { _DynamicDataManager } from '@microsoft/sp-dynamic-data';
import { cloneDeep, merge } from '@microsoft/sp-lodash-subset';
var DynamicDataSourceManager = (function () {
    function DynamicDataSourceManager() {
        this._source = undefined;
        this._isDisposed = false;
        this._isInitialized = false;
    }
    DynamicDataSourceManager.prototype._initialize = function (component, serviceScope) {
        Validate.isNotNullOrUndefined(component, 'component');
        Validate.isNotNullOrUndefined(serviceScope, 'serviceScope');
        this._component = component;
        this._dynamicDataManager = serviceScope.consume(_DynamicDataManager.serviceKey);
        this._isInitialized = true;
    };
    DynamicDataSourceManager.prototype.dispose = function () {
        if (!this._isDisposed) {
            if (this._source) {
                this._dynamicDataManager.removeSource(this._source.id);
                delete this._source;
            }
            delete this._dynamicDataManager;
            delete this._component;
            this._isInitialized = false;
            this._isDisposed = true;
        }
    };
    Object.defineProperty(DynamicDataSourceManager.prototype, "isDisposed", {
        get: function () {
            return this._isDisposed;
        },
        enumerable: true,
        configurable: true
    });
    DynamicDataSourceManager.prototype.initializeSource = function (controller) {
        this._assertNotDisposed();
        this._assertInitialized();
        if (!!this._source) {
            throw new Error('Source has already been initialized');
        }
        this._controller = controller;
        this._source = this._buildSource(this._component);
        this._dynamicDataManager.addSource(this._source);
    };
    DynamicDataSourceManager.prototype.notifySourceChanged = function () {
        this._assertNotDisposed();
        this._assertInitialized();
        this._assertSourceExists();
        this._dynamicDataManager.notifySourceChanged(this._source.id);
    };
    DynamicDataSourceManager.prototype.notifyPropertyChanged = function (propertyId) {
        Validate.isNonemptyString(propertyId, 'propertyId');
        this._assertNotDisposed();
        this._assertInitialized();
        this._assertSourceExists();
        this._dynamicDataManager.notifyPropertyChanged(this._source.id, propertyId);
    };
    DynamicDataSourceManager.prototype.updateMetadata = function (metadata) {
        this._assertNotDisposed();
        this._assertInitialized();
        this._assertSourceExists();
        Validate.isNotNullOrUndefined(metadata, 'metadata');
        metadata.alias = undefined;
        metadata.componentId = undefined;
        metadata.instanceId = undefined;
        merge(this._source.metadata, metadata);
    };
    DynamicDataSourceManager.prototype._buildSource = function (component) {
        return {
            id: this._buildId(component),
            metadata: this._buildMetadata(component),
            getPropertyDefinitions: this._getPropertyDefinitions.bind(this),
            getPropertyValue: this._getPropertyValue.bind(this)
        };
    };
    DynamicDataSourceManager.prototype._getPropertyDefinitions = function () {
        return cloneDeep(this._controller.getPropertyDefinitions());
    };
    DynamicDataSourceManager.prototype._getPropertyValue = function (propertyId) {
        var propertyValue = this._controller.getPropertyValue(propertyId);
        if (propertyValue === undefined) {
            if (
            this._controller
                .getPropertyDefinitions()
                .filter(function (def) { return def.id === propertyId; })
                .length === 0 &&
                this._source 
            ) {
                throw new Error("Property \"" + propertyId + "\" doesn't exist in source \"" + this._source.metadata.title + "\"");
            }
        }
        return cloneDeep(this._controller.getPropertyValue(propertyId));
    };
    DynamicDataSourceManager.prototype._buildId = function (component) {
        return component.manifest.componentType + "." + component.manifest.id + "." + component.instanceId;
    };
    DynamicDataSourceManager.prototype._buildMetadata = function (component) {
        var metadata = {
            title: component.manifest.alias,
            alias: component.manifest.alias,
            componentId: component.componentId,
            instanceId: component.instanceId
        };
        var componentWithMetadata = component; 
        if (componentWithMetadata.title) {
            metadata.title = componentWithMetadata.title;
        }
        if (componentWithMetadata.description) {
            metadata.description = componentWithMetadata.description;
        }
        return metadata;
    };
    DynamicDataSourceManager.prototype._assertNotDisposed = function () {
        if (this.isDisposed) {
            throw new Error('Dynamic Data Source Manager has been disposed.');
        }
    };
    DynamicDataSourceManager.prototype._assertInitialized = function () {
        if (!this._isInitialized) {
            throw new Error('Dynamic Data Source Manager has not been initialized.');
        }
    };
    DynamicDataSourceManager.prototype._assertSourceExists = function () {
        if (!this._source) {
            throw new Error('Dynamic Data Source has not been created.');
        }
    };
    return DynamicDataSourceManager;
}());
export default DynamicDataSourceManager;
