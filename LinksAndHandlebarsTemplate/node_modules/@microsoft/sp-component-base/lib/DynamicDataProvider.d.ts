import { IDisposable, ServiceScope } from '@microsoft/sp-core-library';
import { DynamicDataReference, IDynamicDataSource } from '@microsoft/sp-dynamic-data';
import BaseComponent from './BaseComponent';
/**
 * The Dynamic Data Provider allows components to consume Dynamic Data.
 * It allows data consumers to request Dynamic Data sources and register/unregister to those.
 *
 * @beta
 */
export default class DynamicDataProvider implements IDisposable {
    private _dynamicDataManager;
    private _component;
    private _source;
    private _isDisposed;
    private _isInitialized;
    /**
     * Returns true if the Dynamic Data feature is enabled.
     *
     * @internal
     */
    static _isDynamicDataEnabled(): boolean;
    /**
     * Initializes the Dynamic Data Provider for a specific component.
     *
     * @param component - Component that is going to use the Dynamic Data Provider.
     *
     * @internal
     */
    _initialize(component: BaseComponent, serviceScope: ServiceScope): void;
    /**
     * Disposes the Dynamic Data Provider.
     */
    dispose(): void;
    /**
     * Returns true if the Dynamic Data Provider is disposed.
     */
    readonly isDisposed: boolean;
    /**
     * Registers a callback for updates when a Dynamic Data source is changed.
     * This happens when any property is updated within the source.
     *
     * @param sourceId - Id of the Dynamic Data Source.
     * @param callback - Function to execute when the source updates its data.
     */
    registerSourceChanged(sourceId: string, callback: () => void): void;
    /**
     * Unregisters a callback for updates when a Dynamic Data source is changed.
     *
     * @param sourceId - Id of the Dynamic Data Source.
     * @param callback - Function to remove from the registration. Must be the same it was registered with.
     */
    unregisterSourceChanged(sourceId: string, callback: () => void): void;
    /**
     * Registers a callback for updates when a property is changed in a Dynamic Data source.
     *
     * @param sourceId - Id of the Dynamic Data Source.
     * @param propertyId - Id of the property of the source.
     * @param callback - Function to execute when the source updates its data.
     */
    registerPropertyChanged(sourceId: string, propertyId: string, callback: () => void): void;
    /**
     * Unregisters a callback for updates when a property is changed in a Dynamic Data source.
     *
     * @param sourceId - Id of the Dynamic Data Source.
     * @param propertyId - Id of the property of the source.
     * @param callback - Function to remove from the registration. Must be the same it was registered with.
     */
    unregisterPropertyChanged(sourceId: string, propertyId: string, callback: () => void): void;
    /**
     * Registers a callback to an event that raises when the list of available Dynamic Data Sources is updated.
     *
     * @param callback - Function to execute when the sources are updated.
     */
    registerAvailableSourcesChanged(callback: () => void): void;
    /**
     * Unregisters a callback to an event that raises when the list of available Dynamic Data Sources is updated.
     *
     * @param callback - Function to remove from the registration. Must be the same it was registered with.
     */
    unregisterAvailableSourcesChanged(callback: () => void): void;
    /**
     * Returns a list with all available Dynamic Data Sources.
     *
     * @returns Read-only array with all available sources.
     */
    getAvailableSources(): ReadonlyArray<IDynamicDataSource>;
    /**
     * Returns a Dynamic Data Source, by its id.
     * If the source is not present, it returns undefined.
     *
     * @param id - Id of the Dynamic Data Source.
     */
    tryGetSource(id: string): IDynamicDataSource | undefined;
    /**
     * Returns specific data from a source based on a Dynamic Data reference.
     *
     * @param dataReference - Dynamic Data Reference.
     * @internal
     */
    _getData<TData>(dataReference: DynamicDataReference): TData | undefined;
    private _assertNotDisposed();
    private _assertInitialized();
}
