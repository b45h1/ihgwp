import { IDisposable, ServiceScope } from '@microsoft/sp-core-library';
import { IDynamicDataController, IDynamicDataSourceMetadata } from '@microsoft/sp-dynamic-data';
import BaseComponent from './BaseComponent';
/**
 * The Dynamic Data Source Manager allows components to expose data to other components through Dynamic Data.
 * It allows data providers to update their metadata and notify when data has been updated.
 *
 * @beta
 */
export default class DynamicDataSourceManager implements IDisposable {
    private _dynamicDataManager;
    private _component;
    private _controller;
    private _source;
    private _isDisposed;
    private _isInitialized;
    /**
     * Initializes the Dynamic Data Provider for a specific component.
     *
     * @param component - Component that is going to use the Dynamic Data Provider.
     *
     * @internal
     */
    _initialize(component: BaseComponent, serviceScope: ServiceScope): void;
    /**
     * Disposes the Dynamic Data Provider.
     */
    dispose(): void;
    /**
     * Returns true if the Dynamic Data Provider is disposed.
     */
    readonly isDisposed: boolean;
    /**
     * Initializes a Dynamic Data Source for the component.
     *
     * @param controller - Set of functions for the Dynamic Data Source.
     */
    initializeSource(controller: IDynamicDataController): void;
    /**
     * Notifies any Dynamic Data consumer that this source has updated its data.
     */
    notifySourceChanged(): void;
    /**
     * Notifies any Dynamic Data consumer that this source has updated a specific property.
     * @param propertyId - Id of the updated property in the source.
     */
    notifyPropertyChanged(propertyId: string): void;
    /**
     * Updated the metadata of the Dynamic Data Source associated with the component.
     * It allows to updated fields like title or description.
     * Auto-generated fields like alias, componentId or instanceId cannot be updated.
     *
     * @param metadata - Partial of the metadata.
     */
    updateMetadata(metadata: Partial<IDynamicDataSourceMetadata>): void;
    private _buildSource(component);
    /**
     * This is the getPropertyDefinitions() that the DynamicDataSource actually exposes.
     * It does a copy of the data to ensure the consumer doesn't modify the source.
     * This assumes that the component has dynamic data and has a controller.
     */
    private _getPropertyDefinitions();
    /**
     * This is the getPropertyValue() that the DynamicDataSource actually exposes.
     * It does a copy of the data to ensure the consumer doesn't modify the source.
     * This assumes that the component has dynamic data and has a controller.
     *
     * If there is no value returned, it checks whether the propertyId is incorrect or the value is actually undefined.
     */
    private _getPropertyValue(propertyId);
    private _buildId(component);
    private _buildMetadata(component);
    private _assertNotDisposed();
    private _assertInitialized();
    private _assertSourceExists();
}
