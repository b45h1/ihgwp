import { Validate, _SPFlight } from '@microsoft/sp-core-library';
import { _DynamicDataManager } from '@microsoft/sp-dynamic-data';
var DynamicDataProvider = (function () {
    function DynamicDataProvider() {
        this._isDisposed = false;
        this._isInitialized = false;
    }
    DynamicDataProvider._isDynamicDataEnabled = function () {
        return _SPFlight.isEnabled(210 );
    };
    DynamicDataProvider.prototype._initialize = function (component, serviceScope) {
        Validate.isNotNullOrUndefined(component, 'component');
        Validate.isNotNullOrUndefined(serviceScope, 'serviceScope');
        this._component = component;
        this._dynamicDataManager = serviceScope.consume(_DynamicDataManager.serviceKey);
        this._isInitialized = true;
    };
    DynamicDataProvider.prototype.dispose = function () {
        if (!this._isDisposed) {
            if (this._source) {
                this._dynamicDataManager.removeSource(this._source.id);
                delete this._source;
            }
            delete this._dynamicDataManager;
            delete this._component;
            this._isInitialized = false;
            this._isDisposed = true;
        }
    };
    Object.defineProperty(DynamicDataProvider.prototype, "isDisposed", {
        get: function () {
            return this._isDisposed;
        },
        enumerable: true,
        configurable: true
    });
    DynamicDataProvider.prototype.registerSourceChanged = function (sourceId, callback) {
        this._assertNotDisposed();
        this._assertInitialized();
        Validate.isNonemptyString(sourceId, 'sourceId');
        Validate.isNotNullOrUndefined(callback, 'callback');
        this._dynamicDataManager.registerSourceChanged(sourceId, this._component, callback);
    };
    DynamicDataProvider.prototype.unregisterSourceChanged = function (sourceId, callback) {
        this._assertNotDisposed();
        this._assertInitialized();
        Validate.isNonemptyString(sourceId, 'sourceId');
        Validate.isNotNullOrUndefined(callback, 'callback');
        this._dynamicDataManager.unregisterSourceChanged(sourceId, this._component, callback);
    };
    DynamicDataProvider.prototype.registerPropertyChanged = function (sourceId, propertyId, callback) {
        this._assertNotDisposed();
        this._assertInitialized();
        Validate.isNonemptyString(sourceId, 'sourceId');
        Validate.isNonemptyString(propertyId, 'propertyId');
        Validate.isNotNullOrUndefined(callback, 'callback');
        this._dynamicDataManager.registerPropertyChanged(sourceId, propertyId, this._component, callback);
    };
    DynamicDataProvider.prototype.unregisterPropertyChanged = function (sourceId, propertyId, callback) {
        this._assertNotDisposed();
        this._assertInitialized();
        Validate.isNonemptyString(sourceId, 'sourceId');
        Validate.isNonemptyString(propertyId, 'propertyId');
        Validate.isNotNullOrUndefined(callback, 'callback');
        this._dynamicDataManager.unregisterPropertyChanged(sourceId, propertyId, this._component, callback);
    };
    DynamicDataProvider.prototype.registerAvailableSourcesChanged = function (callback) {
        Validate.isNotNullOrUndefined(callback, 'callback');
        this._assertNotDisposed();
        this._assertInitialized();
        this._dynamicDataManager.sourcesChangedEvent.add(this._component, callback);
    };
    DynamicDataProvider.prototype.unregisterAvailableSourcesChanged = function (callback) {
        Validate.isNotNullOrUndefined(callback, 'callback');
        this._assertNotDisposed();
        this._assertInitialized();
        this._dynamicDataManager.sourcesChangedEvent.remove(this._component, callback);
    };
    DynamicDataProvider.prototype.getAvailableSources = function () {
        this._assertNotDisposed();
        this._assertInitialized();
        return this._dynamicDataManager.getSources();
    };
    DynamicDataProvider.prototype.tryGetSource = function (id) {
        this._assertNotDisposed();
        this._assertInitialized();
        Validate.isNonemptyString(id, 'id');
        return this._dynamicDataManager.tryGetSource(id);
    };
    DynamicDataProvider.prototype._getData = function (dataReference) {
        this._assertNotDisposed();
        this._assertInitialized();
        Validate.isNotNullOrUndefined(dataReference, 'dataReference');
        var dataSource = this._dynamicDataManager.tryGetSource(dataReference.sourceId);
        if (!dataSource) {
            return undefined;
        }
        var data = dataSource.getPropertyValue(dataReference.property); 
        if (dataReference.propertyPath) {
            var subpaths = dataReference.propertyPath.split('.');
            subpaths.forEach(function (subpath) {
                var sps = subpath.split(/\[|\]/);
                sps.forEach(function (sp) {
                    if (!!sp) {
                        data = data[sp];
                    }
                });
            });
        }
        return data;
    };
    DynamicDataProvider.prototype._assertNotDisposed = function () {
        if (this.isDisposed) {
            throw new Error('Dynamic Data Provider has been disposed');
        }
    };
    DynamicDataProvider.prototype._assertInitialized = function () {
        if (!this._isInitialized) {
            throw new Error('Dynamic Data Provider has not been initialized.');
        }
    };
    return DynamicDataProvider;
}());
export default DynamicDataProvider;
