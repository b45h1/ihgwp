import { _LogSource, _TraceLogger } from '@microsoft/sp-diagnostics';
import { _AadTokenProviders } from '@microsoft/sp-http';
import { Environment, EnvironmentType } from '@microsoft/sp-core-library';
import strings from '../SPApplicationBase.resx';
import PlaceholderProvider from '../extensibility/placeholder/PlaceholderProvider';
import PlaceholderName from '../extensibility/placeholder/PlaceholderName';
import PlaceholderManager from '../extensibility/placeholder/PlaceholderManager';
var AadPlaceholderManager = (function () {
    function AadPlaceholderManager() {
        this._eventHooked = false;
    }
    AadPlaceholderManager.prototype.setUpTokenAcquistionFailurePlaceholder = function (application, serviceScope) {
        var _this = this;
        if (!(Environment.type === EnvironmentType.Local)) {
            try {
                var tokenProvider = _AadTokenProviders.getConfigurable();
                var placeHolderProvider_1 = new PlaceholderProvider(serviceScope, 0 );
                var placeholderManager_1 = serviceScope.consume(PlaceholderManager.serviceKey);
                tokenProvider.tokenAcquisitionEvent.add(application, function (eventArgs) {
                    if (!placeholderManager_1.isEnabled) {
                        _this._renderTokenAcquistionAlert(eventArgs);
                    }
                    else {
                        if (_this._aadPlaceHolderContent) {
                            _this._renderTokenAcquistionPlaceholder(_this._aadPlaceHolderContent, eventArgs);
                        }
                        else if (!_this._eventHooked) {
                            placeHolderProvider_1.changedEvent.add(application, function () {
                                _this._aadPlaceHolderContent = _this._createAndRenderPlaceholder(placeHolderProvider_1, eventArgs);
                            });
                            _this._eventHooked = true;
                        }
                        else {
                            _this._renderTokenAcquistionAlert(eventArgs);
                        }
                    }
                });
            }
            catch (e) {
                _TraceLogger.logError(AadPlaceholderManager._logSource, e);
            }
        }
    };
    AadPlaceholderManager.prototype._createAndRenderPlaceholder = function (placeholderProvider, eventArgs) {
        var placeholderContent = placeholderProvider.tryCreateContent(PlaceholderName.Top);
        if (placeholderContent) {
            this._renderTokenAcquistionPlaceholder(placeholderContent, eventArgs);
        }
        else {
            this._renderTokenAcquistionAlert(eventArgs);
        }
        return placeholderContent;
    };
    AadPlaceholderManager.prototype._renderTokenAcquistionPlaceholder = function (placeholderContent, eventArgs) {
        placeholderContent.domElement.setAttribute('style', 'text-align: center; padding: 10px; background-color:#fff4ce;');
        var errorMessageElement = document.createElement('span');
        errorMessageElement.innerText = eventArgs.message;
        placeholderContent.domElement.appendChild(errorMessageElement);
        if (eventArgs.redirectUrl) {
            var resolveLinkElement = document.createElement('a');
            resolveLinkElement.href = eventArgs.redirectUrl;
            resolveLinkElement.innerText = strings.clickToResolveIssueLinkText;
            placeholderContent.domElement.appendChild(resolveLinkElement);
        }
    };
    AadPlaceholderManager.prototype._renderTokenAcquistionAlert = function (eventArgs) {
        if (confirm(eventArgs.message) && eventArgs.redirectUrl) {
            window.location.href = eventArgs.redirectUrl;
        }
    };
    AadPlaceholderManager._logSource = _LogSource.create('AadPlaceholderManager');
    return AadPlaceholderManager;
}());
export default AadPlaceholderManager;
