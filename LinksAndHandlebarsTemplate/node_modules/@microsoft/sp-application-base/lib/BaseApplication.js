import * as tslib_1 from "tslib";
import { virtual, override } from '@microsoft/decorators';
import { UrlQueryParameterCollection, Validate, Guid, _SPEventManager, _SPKillSwitch } from '@microsoft/sp-core-library';
import { BaseComponent } from '@microsoft/sp-component-base';
import SuiteNavManagerConfiguration from './suiteNav/SuiteNavManagerConfiguration';
import SPThemeProvider from './pageChrome/SPThemeProvider';
import BaseApplicationContext from './BaseApplicationContext';
import AadPlaceholderManager from './frameworkPlaceholders/AadPlaceholderManager';
import { _QosMonitor } from '@ms/sp-telemetry';
var SUITE_NAV_USE_SPO_BEHAVIOR_KILL_SWITCH = Guid.parse('22F8084E-9DEB-4642-B63E-E70A7F87C998');
var loadQosScenarioName = 'BaseApplication.load';
var renderQosScenarioName = 'BaseApplication.render';
var BaseApplication = (function (_super) {
    tslib_1.__extends(BaseApplication, _super);
    function BaseApplication() {
        var _this = _super.call(this) || this;
        _this._domElement = undefined;
        _this['__type'] = 'BaseApplication';
        return _this;
    }
    Object.defineProperty(BaseApplication.prototype, "domElement", {
        get: function () {
            Validate.isNotNullOrUndefined(this._domElement, 'domElement');
            return this._domElement;
        },
        set: function (value) {
            throw new Error('The property cannot be assigned because it is read-only');
        },
        enumerable: true,
        configurable: true
    });
    BaseApplication.prototype._load = function (contextParameters) {
        var qosMonitor = new _QosMonitor(loadQosScenarioName);
        try {
            var applicationContext = this._getApplicationContext(contextParameters);
            this._initializeContext(applicationContext);
            var aadPlaceholderManager = new AadPlaceholderManager();
            aadPlaceholderManager.setUpTokenAcquistionFailurePlaceholder(this, this.context.serviceScope);
            this._navigator = contextParameters.navigator;
            return this.onLoad()
                .then(function () {
                qosMonitor.writeSuccess();
            }).catch(function (e) {
                qosMonitor.writeExpectedFailure('onLoadFailure', e);
                throw e;
            });
        }
        catch (error) {
            qosMonitor.writeUnexpectedFailure('SyncError', error);
            return Promise.reject(error);
        }
    };
    BaseApplication.prototype._render = function (domElement) {
        var qosMonitor = new _QosMonitor(renderQosScenarioName);
        try {
            this._domElement = domElement;
            this.onRender();
            qosMonitor.writeSuccess();
        }
        catch (error) {
            qosMonitor.writeExpectedFailure('onRenderError', error);
        }
    };
    BaseApplication.prototype._loadTheme = function () {
        var themeProvider = this._getThemeProvider();
        themeProvider.loadThemedStyles();
    };
    BaseApplication.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.onDispose();
        this._navigator = undefined;
        this._domElement = undefined;
    };
    BaseApplication.prototype.getBrowserCompatibility = function () {
        return {
            supportLevel: 0 ,
            warning: undefined
        };
    };
    BaseApplication.prototype.suiteNavConfiguration = function () {
        return new SuiteNavManagerConfiguration(this._getSuiteNavManagerConfigurationData());
    };
    BaseApplication.prototype._getApplicationContext = function (contextParameters) {
        return new BaseApplicationContext(contextParameters);
    };
    BaseApplication.prototype._getThemeProvider = function () {
        return new SPThemeProvider(this.context.serviceScope);
    };
    BaseApplication.prototype.onLoad = function () {
        return Promise.resolve();
    };
    BaseApplication.prototype.onRender = function () {
    };
    BaseApplication.prototype.onDispose = function () {
    };
    BaseApplication.prototype._getSuiteNavManagerConfigurationData = function () {
        var pageContext = this.context.pageContext;
        var webTemplateId;
        if (!_SPKillSwitch.isActivated(SUITE_NAV_USE_SPO_BEHAVIOR_KILL_SWITCH, '9/08/2017', 'SuiteNavUseSPOBehaviors')) {
            webTemplateId = pageContext.legacyPageContext.webTemplateId;
        }
        return {
            currentUICultureName: pageContext.cultureInfo.currentUICultureName,
            disableSuiteNav: this._shouldDisableSuiteNav(),
            settingsData: pageContext.legacyPageContext.MenuData ?
                pageContext.legacyPageContext.MenuData.SettingsData :
                undefined,
            signoutUrl: pageContext.legacyPageContext.MenuData ?
                pageContext.legacyPageContext.MenuData.SignOutUrl :
                undefined,
            siteClientTag: pageContext.legacyPageContext.siteClientTag,
            systemUserKey: pageContext.legacyPageContext.systemUserKey,
            webServerRelativeUrl: pageContext.web.serverRelativeUrl,
            webTemplateId: webTemplateId
        };
    };
    BaseApplication.prototype._navigate = function (url) {
        Validate.isNonemptyString(url, 'url');
        return this._navigator.navigate(url);
    };
    BaseApplication.prototype._navigateToPreloadedData = function (preloadedData) {
        Validate.isNotNullOrUndefined(preloadedData, 'preloadedData');
        return this._navigator.navigateToPreloadedData(preloadedData);
    };
    BaseApplication.prototype.raiseLayoutChangedEvent = function () {
        _SPEventManager.instance.raiseEvent(BaseApplication._layoutChangedEventName, {});
    };
    BaseApplication.prototype._shouldDisableSuiteNav = function () {
        var urlQueryParams = new UrlQueryParameterCollection(window.location.href);
        return window.location.hostname === 'localhost' ||
            urlQueryParams.getValue('disableSuiteNav') === 'true' ?
            true :
            false;
    };
    BaseApplication._navigatedEventName = 'application.navigatedEvent';
    BaseApplication._layoutChangedEventName = 'application.layoutChangedEvent';
    tslib_1.__decorate([
        override
    ], BaseApplication.prototype, "dispose", null);
    tslib_1.__decorate([
        virtual
    ], BaseApplication.prototype, "getBrowserCompatibility", null);
    tslib_1.__decorate([
        virtual
    ], BaseApplication.prototype, "suiteNavConfiguration", null);
    tslib_1.__decorate([
        virtual
    ], BaseApplication.prototype, "_getApplicationContext", null);
    tslib_1.__decorate([
        virtual
    ], BaseApplication.prototype, "_getThemeProvider", null);
    tslib_1.__decorate([
        virtual
    ], BaseApplication.prototype, "onLoad", null);
    tslib_1.__decorate([
        virtual
    ], BaseApplication.prototype, "onRender", null);
    tslib_1.__decorate([
        virtual
    ], BaseApplication.prototype, "onDispose", null);
    return BaseApplication;
}(BaseComponent));
export default BaseApplication;
