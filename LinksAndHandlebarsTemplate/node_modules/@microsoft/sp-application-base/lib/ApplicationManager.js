import { Environment, EnvironmentType, Guid, Text, Validate, _SPKillSwitch } from '@microsoft/sp-core-library';
import { _LogSource, _TraceLogger } from '@microsoft/sp-diagnostics';
import { SPComponentLoader, _SPLoaderFlights } from '@microsoft/sp-loader';
import * as loadThemedStyles from '@ms/sp-load-themed-styles';
import { _PerformanceLogger, _QosMonitor } from '@ms/sp-telemetry';
import strings from './SPApplicationBase.resx';
import ApplicationCustomizerLoader from './extensibility/ApplicationCustomizerLoader';
import Navigator from './navigator/Navigator';
import SPPageChrome from './pageChrome/SPPageChrome';
import SuiteNavManager from './suiteNav/SuiteNavManager';
var startQosScenarioName = 'ApplicationManager.start';
var initializeQosScenarioName = 'ApplicationManager.initialize';
var applicationFailedToLoadFailure = 'ApplicationFailedToLoad';
var shellStartFailure = 'SPShell.Start';
var Module = (function () {
    function Module() {
    }
    return Module;
}());
var ApplicationManager = (function () {
    function ApplicationManager(serviceScope, navigator) {
        Validate.isNotNullOrUndefined(serviceScope, 'serviceScope');
        this._serviceScope = serviceScope;
        this._navigator = navigator || new Navigator(this._serviceScope, this);
        this._applicationCustomizerLoader = new ApplicationCustomizerLoader(serviceScope);
    }
    ApplicationManager._isChromelessApplication = function (applicationId) {
        return Environment.type === EnvironmentType.ClassicSharePoint ||
            applicationId === 'b1ab4aaa-f779-405c-8683-d3a750b5d18d';
    };
    ApplicationManager.prototype.startApplication = function (preloadedData) {
        var _this = this;
        Validate.isNonemptyString(preloadedData.clientSideApplicationId, 'preloadedData.clientSideApplicationId');
        if (_SPLoaderFlights._useNewBootSequence() &&
            this._currentApplicationId &&
            this._currentApplicationId.equals(Guid.tryParse(preloadedData.clientSideApplicationId) || Guid.empty)) {
            return Promise.resolve(this._currentApplication);
        }
        var qosMonitor = new _QosMonitor(startQosScenarioName);
        function error(message, failureId) {
            var err = new Error(message);
            _TraceLogger.logError(ApplicationManager._logSource, err);
            qosMonitor.writeUnexpectedFailure(failureId, err);
            throw err;
        }
        var applicationId = preloadedData.clientSideApplicationId;
        var isSyncLoadEnabled = !_SPKillSwitch.isActivated(Guid.parse('3e0379ad-740b-427a-a11c-3317b1a1053c'), '2018/2/26', 'Load application synchronously');
        var appManifest = SPComponentLoader.tryGetManifestById(applicationId);
        var appComponent = (!!appManifest && isSyncLoadEnabled) ? SPComponentLoader.tryGetLoadedComponent(appManifest) : undefined;
        if (appComponent) {
            if (!_SPLoaderFlights._useNewBootSequence()) {
                this._navigator.navigateToPreloadedData(preloadedData);
            }
            return this._initializeApplicationWithTelemetry(appComponent, applicationId, qosMonitor, error);
        }
        else {
            var appComponentPromise = this._loadApplicationComponent(applicationId, error);
            if (!_SPLoaderFlights._useNewBootSequence()) {
                this._navigator.navigateToPreloadedData(preloadedData);
            }
            return appComponentPromise.then(function (application) {
                return _this._initializeApplicationWithTelemetry(application, applicationId, qosMonitor, error);
            });
        }
    };
    ApplicationManager.prototype._loadApplicationCustomizers = function (preloadedData) {
        if (preloadedData.clientSideApplicationId !== ApplicationManager.classicPagesComponentId &&
            preloadedData.clientSideApplicationId !== ApplicationManager.workbenchComponentId) {
            return this._applicationCustomizerLoader.loadExtensions(preloadedData.customActions);
        }
        else {
            _TraceLogger.logVerbose(ApplicationManager._logSource, 'Application Customizer is not supported for classic pages and workbench.');
            return Promise.resolve();
        }
    };
    ApplicationManager.prototype._initializeApplicationWithTelemetry = function (application, applicationId, qosMonitor, error) {
        _PerformanceLogger.markApplicationStart();
        return this._initializeApplication(application.default, applicationId).then(function (result) {
            qosMonitor.writeSuccess();
            return result;
        }).catch(function (e) {
            return error(Text.format(strings.applicationFailedToInitializeError, e), shellStartFailure);
        });
    };
    ApplicationManager.prototype._loadApplicationComponent = function (applicationId, error) {
        return SPComponentLoader.loadComponentById(applicationId)
            .catch(function (e) {
            return error(Text.format(strings.applicationFailedToLoadWithMessageError, applicationId, e.message), applicationFailedToLoadFailure);
        });
    };
    ApplicationManager.prototype._isChromelessApplication = function (applicationId) {
        return ApplicationManager._isChromelessApplication(applicationId);
    };
    ApplicationManager.prototype._initializeApplication = function (application, applicationId) {
        var _this = this;
        if (application['__type'] !== 'BaseApplication') {
            return Promise.reject(new Error('The application is not a subclass of BaseApplication'));
        }
        var qosMonitor = new _QosMonitor(initializeQosScenarioName);
        var applicationManifest = SPComponentLoader.tryGetManifestById(applicationId);
        var qosApplicationData = {
            alias: application.alias || applicationManifest.alias,
            isInternal: applicationManifest.isInternal,
            manifestId: applicationManifest.id
        };
        this._currentApplication = application;
        this._currentApplicationId = Guid.parse(applicationId);
        try {
            var suiteNavManager_1;
            if (!this._isChromelessApplication(applicationId)) {
                this._spPageChrome = SPPageChrome.getInstance(this._serviceScope);
                suiteNavManager_1 = new SuiteNavManager(this._spPageChrome.suiteNavDiv, this._serviceScope);
            }
            return application._load({
                manifest: applicationManifest,
                parentServiceScope: this._serviceScope,
                navigator: this._navigator,
                instanceId: applicationManifest.id,
                loggingTag: "Application." + applicationManifest.id,
                suiteNavManager: suiteNavManager_1
            }).then(function () {
                if (!_this._isChromelessApplication(applicationId)) {
                    if (!_SPKillSwitch.isActivated(SPPageChrome.DEFER_LOAD_THEME_KILL_SWITCH, '04/04/2018', 'DeferLoadTheme')) {
                        application._loadTheme();
                    }
                    _this._renderApplication(application, suiteNavManager_1);
                }
                qosMonitor.writeSuccess(qosApplicationData);
                return application;
            }).catch(function (e) {
                qosMonitor.writeUnexpectedFailure('AsyncError', e, qosApplicationData);
                return Promise.reject(e);
            });
        }
        catch (e) {
            qosMonitor.writeUnexpectedFailure('GeneralError', e, qosApplicationData);
            return Promise.reject(e);
        }
    };
    ApplicationManager.prototype._renderApplication = function (application, suiteNav) {
        if (!application.suiteNavConfiguration().isSuiteNavDisabled()) {
            suiteNav.loadSuiteNav(application.suiteNavConfiguration());
        }
        loadThemedStyles.flush();
        application._render(this._spPageChrome.appDiv);
    };
    ApplicationManager.classicPagesComponentId = 'eb4b666b-5c29-4dad-9a99-23613f21a2b7';
    ApplicationManager.workbenchComponentId = '8be81a5c-af38-4bb2-af97-afa3b64dfbed';
    ApplicationManager._logSource = _LogSource.create('ApplicationManager');
    return ApplicationManager;
}());
export default ApplicationManager;
