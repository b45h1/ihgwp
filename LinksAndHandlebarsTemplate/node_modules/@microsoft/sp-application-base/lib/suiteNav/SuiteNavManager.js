import { _LogSource, _TraceLogger } from '@microsoft/sp-diagnostics';
import { Validate } from '@microsoft/sp-core-library';
import { SPHttpClient } from '@microsoft/sp-http';
import { SPComponentLoader } from '@microsoft/sp-loader';
import { DataStore, DataStoreCachingType, loadFallbackShellThemableCss } from '@ms/odsp-utilities-bundle';
import SPOSuiteNavDataSource from './dataAccess/SPOSuiteNavDataSource';
import OnPremSuiteNavDataSource from './dataAccess/OnPremSuiteNavDataSource';
import O365ShellWrapper from './O365ShellWrapper';
import SPPageChrome from '../pageChrome/SPPageChrome';
var SuiteNavManager = (function () {
    function SuiteNavManager(suiteNavDiv, serviceScope) {
        var _this = this;
        this._suiteNavDiv = suiteNavDiv;
        this._serviceScope = serviceScope;
        serviceScope.whenFinished(function () {
            _this._httpClient = serviceScope.consume(SPHttpClient.serviceKey);
        });
    }
    SuiteNavManager._updateCache = function (model, service) {
        SuiteNavManager._cache.setValue(SuiteNavManager.DATA_KEY, model);
        SuiteNavManager._cache.setValue(SuiteNavManager.DATE_KEY, new Date());
        SuiteNavManager._cache.setValue(SuiteNavManager.VERSION_KEY, SuiteNavManager.CACHE_VERSION);
        SuiteNavManager._cache.setValue(SuiteNavManager.SESSION_KEY, true, DataStoreCachingType.session);
        SuiteNavManager._cache.setValue(SuiteNavManager.SERVICE_KEY, service);
    };
    SuiteNavManager._clearCache = function () {
        SuiteNavManager._cache.remove(SuiteNavManager.DATA_KEY);
        SuiteNavManager._cache.remove(SuiteNavManager.DATE_KEY);
        SuiteNavManager._cache.remove(SuiteNavManager.VERSION_KEY);
        SuiteNavManager._cache.remove(SuiteNavManager.SERVICE_KEY);
    };
    SuiteNavManager.prototype.setComponentVisibility = function (setVisible) {
        var _this = this;
        this._suiteNavDiv.hidden = !setVisible;
        if (this._suiteNavModelPromise) {
            this._suiteNavModelPromise.then(function (model) {
                if (model && model.NavBarData && model.NavBarData.Dimensions) {
                    SPPageChrome.getInstance(_this._serviceScope).changeSuiteNavHeight(setVisible ?
                        model.NavBarData.Dimensions.Top :
                        '0px');
                }
            });
        }
    };
    SuiteNavManager.prototype.loadSuiteNav = function (suiteNavConfig) {
        var _this = this;
        Validate.isNotNullOrUndefined(suiteNavConfig, 'suiteNavConfig');
        this._suiteNavManagerConfiguration = suiteNavConfig;
        SPPageChrome.getInstance(this._serviceScope).changeSuiteNavHeight(SuiteNavManager._defaultSuiteNavHeight);
        this._suiteNavManagerConfiguration = suiteNavConfig;
        this._suiteNavManagerConfiguration.o365ShellRenderSettings.top = this._suiteNavDiv.id;
        var o365ShellWrapper = new O365ShellWrapper();
        this._suiteNavModelPromise = this._getSuiteNavModel(o365ShellWrapper.DoesShellExist());
        this._suiteNavModelPromise.then(function (suiteNavModel) {
            var suiteNavJSPromise = !o365ShellWrapper.DoesShellExist() ?
                _this._getSuiteNavShell(suiteNavModel.CssUrl, suiteNavModel.JsUrl, suiteNavModel) :
                Promise.resolve(undefined);
            suiteNavJSPromise.then(function () {
                _this._renderSuiteNav(o365ShellWrapper, suiteNavModel.NavBarData);
            });
        });
    };
    SuiteNavManager.prototype._getSuiteNavModel = function (forceFetchData) {
        var _this = this;
        var suiteNavModelPromise;
        if (!forceFetchData && this._isCacheValid() && !this._isCacheOutdated()) {
            suiteNavModelPromise = this._loadSuiteNavFromCache();
        }
        else {
            SuiteNavManager._clearCache();
            suiteNavModelPromise = this._loadSuiteNavFromServer();
        }
        return suiteNavModelPromise.then(function (model) {
            model.NavBarData =
                _this._suiteNavManagerConfiguration.modifySuiteNavData(model);
            model.CacheToken = _this._suiteNavManagerConfiguration.cacheToken;
            model.UserIdentifier = _this._suiteNavManagerConfiguration.systemUserKey;
            SuiteNavManager._updateCache(model, _this._suiteNavDataSource.suiteNavService);
            if (model && model.NavBarData && model.NavBarData.Dimensions && model.NavBarData.Dimensions.Top) {
                SPPageChrome.getInstance(_this._serviceScope).changeSuiteNavHeight(model.NavBarData.Dimensions.Top);
            }
            return model;
        });
    };
    SuiteNavManager.prototype._loadSuiteNavFromCache = function () {
        var _this = this;
        return new Promise(function (complete) {
            SuiteNavManager._cache.getValue(SuiteNavManager.SERVICE_KEY) ===
                0  ?
                _this._suiteNavDataSource = _this._createSPODataSource() :
                _this._suiteNavDataSource = _this._createOnPremDataSource();
            complete(SuiteNavManager._cache.getValue(SuiteNavManager.DATA_KEY));
        });
    };
    SuiteNavManager.prototype._loadSuiteNavFromServer = function () {
        var _this = this;
        this._suiteNavDataSource = this._createSPODataSource();
        var onPremDataSource = this._createOnPremDataSource();
        var onPremSuiteNavResponse = onPremDataSource.loadData();
        onPremSuiteNavResponse.catch(function () {
            _this._createSuiteNavErrorLogEntry('loadData', 'Failed to retrieve Hybrid SuiteNavData');
        });
        return this._suiteNavDataSource.loadData().then(function (response) {
            return response;
        }).catch(function () {
            _this._createSuiteNavErrorLogEntry('loadData', 'Failed to retrieve SPO SuiteNavData');
            _this._suiteNavDataSource = onPremDataSource;
            return onPremSuiteNavResponse;
        });
    };
    SuiteNavManager.prototype._getSuiteNavShell = function (cssUrl, jsUrl, suiteNavModel) {
        Validate.isNonemptyString(cssUrl, 'cssUrl');
        Validate.isNonemptyString(jsUrl, 'jsUrl');
        var element = document.createElement('link');
        element.rel = 'stylesheet';
        element.type = 'text/css';
        element.href = cssUrl;
        document.head.appendChild(element);
        if (suiteNavModel && suiteNavModel.NavBarData && suiteNavModel.NavBarData.ClientData) {
            try {
                var clientData = JSON.parse(suiteNavModel.NavBarData.ClientData);
                if (clientData && clientData.IsFallbackShell) {
                    loadFallbackShellThemableCss();
                }
            }
            catch (errClientData) {
            }
        }
        return SPComponentLoader.loadScript(jsUrl);
    };
    SuiteNavManager.prototype._renderSuiteNav = function (o365Shell, navBarData) {
        var _this = this;
        o365Shell.SetData(navBarData);
        o365Shell.RenderAsync(this._suiteNavManagerConfiguration.o365ShellRenderSettings, function () {
            _this._onRender(o365Shell);
        }, function () {
            _this._onPostRender();
        });
        o365Shell.OnHasMember('LoadShellPlus', function () {
            _this._loadShellPlus(o365Shell);
        });
    };
    SuiteNavManager.prototype._onRender = function (o365Shell) {
        var actionsMap = this._suiteNavManagerConfiguration.getActionsMap();
        if (actionsMap && Object.keys(actionsMap).length > 0) {
            o365Shell.Navigation.OnLinkClick(function (eventArgs) {
                var action = actionsMap && actionsMap[eventArgs.Id];
                if (action) {
                    action();
                }
            });
        }
        if (this._suiteNavManagerConfiguration.hamburgerCallback) {
            if (o365Shell.Navigation.OnHamburgerButtonClick) {
                o365Shell.Navigation.OnHamburgerButtonClick(this._suiteNavManagerConfiguration.hamburgerCallback);
            }
        }
    };
    SuiteNavManager.prototype._onPostRender = function () {
        if (this._suiteNavManagerConfiguration.suiteNavPostRenderCallback) {
            this._suiteNavManagerConfiguration.suiteNavPostRenderCallback();
        }
    };
    SuiteNavManager.prototype._loadShellPlus = function (o365Shell) {
        var _this = this;
        return new Promise(function () {
            o365Shell.LoadShellPlus();
        }).catch(function (errorMessage) {
            _this._createSuiteNavErrorLogEntry('loadShellPlus', errorMessage);
        });
    };
    SuiteNavManager.prototype._isCacheValid = function () {
        var model = SuiteNavManager._cache.getValue(SuiteNavManager.DATA_KEY);
        var oldVersion = SuiteNavManager._cache.getValue(SuiteNavManager.VERSION_KEY);
        var cssJsUrlPresent = model && model.NavBarData && (model.JsUrl.length > 0 && model.CssUrl.length > 0);
        var sameVersion = oldVersion === SuiteNavManager.CACHE_VERSION;
        var sameUser = model && model.UserIdentifier === this._suiteNavManagerConfiguration.systemUserKey;
        var sameCacheToken = model && model.CacheToken === this._suiteNavManagerConfiguration.cacheToken;
        return cssJsUrlPresent && sameVersion && sameUser && sameCacheToken;
    };
    SuiteNavManager.prototype._isCacheOutdated = function () {
        var cacheDate = Date.parse(SuiteNavManager._cache.getValue(SuiteNavManager.DATE_KEY));
        var currentDate = new Date();
        var cachedThisSession = SuiteNavManager._cache.getValue(SuiteNavManager.SESSION_KEY, DataStoreCachingType.session);
        return (isNaN(cacheDate) ||
            currentDate.getTime() - cacheDate > 24 * 60 * 60 * 1000 ||
            (DataStore.hasStorageType(DataStoreCachingType.session) && !cachedThisSession));
    };
    SuiteNavManager.prototype._createSPODataSource = function () {
        return new SPOSuiteNavDataSource(this._httpClient, this._suiteNavManagerConfiguration.currentUICultureName, this._suiteNavManagerConfiguration.webServerRelativeUrl);
    };
    SuiteNavManager.prototype._createOnPremDataSource = function () {
        return new OnPremSuiteNavDataSource(this._httpClient, this._suiteNavManagerConfiguration.currentUICultureName, this._suiteNavManagerConfiguration.webServerRelativeUrl);
    };
    SuiteNavManager.prototype._createSuiteNavErrorLogEntry = function (moduleName, errorMessage) {
        _TraceLogger.logVerbose(SuiteNavManager._logSource, 'SuiteNavManager ' + moduleName + ' ' + errorMessage);
    };
    SuiteNavManager._defaultSuiteNavHeight = '50px';
    SuiteNavManager.CACHE_PREFIX = 'SPPPLATSuiteNav';
    SuiteNavManager.SERVICE_KEY = 'SuiteNavService';
    SuiteNavManager.DATA_KEY = 'Data';
    SuiteNavManager.DATE_KEY = 'CacheDate';
    SuiteNavManager.VERSION_KEY = 'CacheVersion';
    SuiteNavManager.SESSION_KEY = 'CachedThisSession';
    SuiteNavManager.CACHE_VERSION = 1;
    SuiteNavManager._cache = new DataStore(SuiteNavManager.CACHE_PREFIX, DataStoreCachingType.local);
    SuiteNavManager._logSource = _LogSource.create('SuiteNavManager');
    return SuiteNavManager;
}());
export default SuiteNavManager;
