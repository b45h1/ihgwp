import { ServiceKey, Validate } from '@microsoft/sp-core-library';
import { SPEvent, SPEventArgs, _SPEventManager } from '@microsoft/sp-core-library';
import Placeholder from './Placeholder';
import PlaceholderName from './PlaceholderName';
var PlaceholderManager = (function () {
    function PlaceholderManager(serviceScope) {
        this._placeholders = undefined;
        this._isEnabled = false;
        this._changedEvent = new SPEvent(PlaceholderManager.placeholdersChangedEventName);
    }
    Object.defineProperty(PlaceholderManager.prototype, "changedEvent", {
        get: function () {
            return this._changedEvent;
        },
        enumerable: true,
        configurable: true
    });
    PlaceholderManager.prototype.registerPlaceholders = function () {
        var placeholderDivs = document.querySelectorAll("[" + PlaceholderManager.placeholderAttributeName + "]");
        var regionDef = [];
        for (var i = 0; i < placeholderDivs.length; i++) {
            var div = placeholderDivs[i];
            var name_1 = div.getAttribute(PlaceholderManager.placeholderAttributeName);
            if (div && name_1) {
                var placeholderName = PlaceholderName[name_1];
                if (typeof placeholderName !== 'number') {
                    throw new Error('Invalid placeholder definition: ' + name_1);
                }
                regionDef.push({
                    name: placeholderName,
                    domElement: div
                });
            }
        }
        this.initializePlaceholders(regionDef);
    };
    PlaceholderManager.prototype.initializePlaceholders = function (definitions) {
        var _this = this;
        Validate.isNotNullOrUndefined(definitions, 'definitions');
        var previousPlaceholders = this._placeholders;
        this._placeholders = [];
        this._placeholders = definitions.map(function (def) { return new Placeholder(def, _this); });
        if (previousPlaceholders) {
            this._placeholders.forEach(function (newPlaceholder) {
                var oldPlaceholder = previousPlaceholders.filter(function (ph) { return ph.name === newPlaceholder.name; }).pop();
                if (oldPlaceholder) {
                    newPlaceholder.importEntries(oldPlaceholder);
                }
            });
        }
        _SPEventManager.instance.raiseStickyEvent(PlaceholderManager.placeholdersChangedEventName, new SPEventArgs());
    };
    Object.defineProperty(PlaceholderManager.prototype, "isEnabled", {
        get: function () {
            return this._isEnabled;
        },
        enumerable: true,
        configurable: true
    });
    PlaceholderManager.prototype._enable = function () {
        this._isEnabled = true;
    };
    Object.defineProperty(PlaceholderManager.prototype, "placeholders", {
        get: function () {
            return this._isEnabled ? this._placeholders : undefined;
        },
        enumerable: true,
        configurable: true
    });
    PlaceholderManager.serviceKey = ServiceKey.create('sp-application-base:PlaceholderManager', PlaceholderManager);
    PlaceholderManager.placeholdersChangedEventName = 'placeholders.changedEvent';
    PlaceholderManager.placeholderAttributeName = 'data-sp-placeholder';
    return PlaceholderManager;
}());
export default PlaceholderManager;
