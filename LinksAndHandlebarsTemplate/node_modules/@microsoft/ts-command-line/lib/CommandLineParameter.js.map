{"version":3,"sources":["CommandLineParameter.ts"],"names":[],"mappings":"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","file":"CommandLineParameter.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport {\r\n  IBaseCommandLineDefinition,\r\n  ICommandLineFlagDefinition,\r\n  ICommandLineStringDefinition,\r\n  ICommandLineStringListDefinition,\r\n  ICommandLineIntegerDefinition,\r\n  ICommandLineChoiceDefinition,\r\n  IBaseCommandLineDefinitionWithArgument\r\n} from './CommandLineDefinition';\r\n\r\n/**\r\n * Identifies the kind of a CommandLineParameter.\r\n * @public\r\n */\r\nexport enum CommandLineParameterKind {\r\n  /** Indicates a CommandLineChoiceParameter */\r\n  Choice,\r\n  /** Indicates a CommandLineFlagParameter */\r\n  Flag,\r\n  /** Indicates a CommandLineIntegerParameter */\r\n  Integer,\r\n  /** Indicates a CommandLineStringParameter */\r\n  String,\r\n  /** Indicates a CommandLineStringListParameter */\r\n  StringList\r\n}\r\n\r\n/**\r\n * The base class for the various command-line parameter types.\r\n * @public\r\n */\r\nexport abstract class CommandLineParameter {\r\n  // Example: \"--do-something\"\r\n  private static _longNameRegExp: RegExp = /^-(-[a-z0-9]+)+$/;\r\n  // Example: \"-d\"\r\n  private static _shortNameRegExp: RegExp = /^-[a-zA-Z]$/;\r\n\r\n  /**\r\n   * A unique internal key used to retrieve the value from the parser's dictionary.\r\n   * @internal\r\n   */\r\n  public _parserKey: string;\r\n\r\n  /** {@inheritdoc IBaseCommandLineDefinition.parameterLongName} */\r\n  public readonly longName: string;\r\n\r\n  /** {@inheritdoc IBaseCommandLineDefinition.parameterShortName} */\r\n  public readonly shortName: string | undefined;\r\n\r\n  /** {@inheritdoc IBaseCommandLineDefinition.description} */\r\n  public readonly description: string;\r\n\r\n  /** @internal */\r\n  constructor(definition: IBaseCommandLineDefinition) {\r\n    if (!CommandLineParameter._longNameRegExp.test(definition.parameterLongName)) {\r\n      throw new Error(`Invalid name: \"${definition.parameterLongName}\". The parameter long name must be`\r\n        + ` lower-case and use dash delimiters (e.g. \"--do-a-thing\")`);\r\n    }\r\n    this.longName = definition.parameterLongName;\r\n\r\n    if (definition.parameterShortName) {\r\n      if (!CommandLineParameter._shortNameRegExp.test(definition.parameterShortName)) {\r\n        throw new Error(`Invalid name: \"${definition.parameterShortName}\". The parameter short name must be`\r\n          + ` a dash followed by a single upper-case or lower-case letter (e.g. \"-a\")`);\r\n      }\r\n    }\r\n    this.shortName = definition.parameterShortName;\r\n    this.description = definition.description;\r\n  }\r\n\r\n  /**\r\n   * Called internally by CommandLineParameterProvider._processParsedData()\r\n   * @internal\r\n   */\r\n  public abstract _setValue(data: any): void; // tslint:disable-line:no-any\r\n\r\n  /**\r\n   * Indicates the type of parameter.\r\n   */\r\n  public abstract get kind(): CommandLineParameterKind;\r\n\r\n  /**\r\n   * Internal usage only.  Used to report unexpected output from the argparse library.\r\n   */\r\n  protected reportInvalidData(data: any): never { // tslint:disable-line:no-any\r\n    throw new Error(`Unexpected data object for parameter \"${this.longName}\": `\r\n      + JSON.stringify(data));\r\n  }\r\n}\r\n\r\n/**\r\n * The common base class for parameters types that receive an argument.\r\n *\r\n * @remarks\r\n * An argument is an accompanying command-line token, such as \"123\" in the\r\n * example \"--max-count 123\".\r\n * @public\r\n */\r\nexport abstract class CommandLineParameterWithArgument extends CommandLineParameter {\r\n  // Matches the first character that *isn't* part of a valid upper-case argument name such as \"URL_2\"\r\n  private static _invalidArgumentNameRegExp: RegExp = /[^A-Z_0-9]/;\r\n\r\n  /** {@inheritdoc IBaseCommandLineDefinitionWithArgument.argumentName} */\r\n  public readonly argumentName: string;\r\n\r\n  /** @internal */\r\n  constructor(definition: IBaseCommandLineDefinitionWithArgument) {\r\n    super(definition);\r\n\r\n    if (definition.argumentName === '') {\r\n      throw new Error('The argument name cannot be an empty string. (For the default name, specify undefined.)');\r\n    }\r\n    if (definition.argumentName.toUpperCase() !== definition.argumentName) {\r\n      throw new Error(`Invalid name: \"${definition.argumentName}\". The argument name must be all upper case.`);\r\n    }\r\n    const match: RegExpMatchArray | null = definition.argumentName.match(\r\n      CommandLineParameterWithArgument._invalidArgumentNameRegExp);\r\n    if (match) {\r\n      throw new Error(`The argument name \"${definition.argumentName}\" contains an invalid character \"${match[0]}\".`\r\n        + ` Only upper-case letters, numbers, and underscores are allowed.`);\r\n    }\r\n    this.argumentName = definition.argumentName;\r\n  }\r\n}\r\n\r\n/**\r\n * The data type returned by {@link CommandLineParameterProvider.defineChoiceParameter}.\r\n * @public\r\n */\r\nexport class CommandLineChoiceParameter extends CommandLineParameter {\r\n  /** {@inheritdoc ICommandLineChoiceDefinition.alternatives} */\r\n  public readonly alternatives: ReadonlyArray<string>;\r\n\r\n  /** {@inheritdoc ICommandLineChoiceDefinition.defaultValue} */\r\n  public readonly defaultValue: string | undefined;\r\n\r\n  private _value: string | undefined = undefined;\r\n\r\n  /** @internal */\r\n  constructor(definition: ICommandLineChoiceDefinition) {\r\n    super(definition);\r\n\r\n    if (definition.alternatives.length <= 1) {\r\n      throw new Error(`When defining a choice parameter, the alternatives list must contain at least one value.`);\r\n    }\r\n    if (definition.defaultValue && definition.alternatives.indexOf(definition.defaultValue) === -1) {\r\n      throw new Error(`The specified default value \"${definition.defaultValue}\"`\r\n        + ` is not one of the available options: ${definition.alternatives.toString()}`);\r\n    }\r\n\r\n    this.alternatives = definition.alternatives;\r\n    this.defaultValue = definition.defaultValue;\r\n  }\r\n\r\n  /** {@inheritdoc CommandLineParameter.kind} */\r\n  public get kind(): CommandLineParameterKind {\r\n    return CommandLineParameterKind.Choice;\r\n  }\r\n\r\n  /**\r\n   * {@inheritdoc CommandLineParameter._setValue}\r\n   * @internal\r\n   */\r\n  // tslint:disable-next-line:no-any\r\n  public _setValue(data: any): void { // abstract\r\n    if (data === null) {\r\n      data = undefined;\r\n    }\r\n    if (data !== undefined && typeof data !== 'string') {\r\n      this.reportInvalidData(data);\r\n    }\r\n    this._value = data;\r\n  }\r\n\r\n  /**\r\n   * Returns the argument value for a choice parameter that was parsed from the command line.\r\n   *\r\n   * @remarks\r\n   * The return value will be `undefined` if the command-line has not been parsed yet,\r\n   * or if the parameter was omitted and has no default value.\r\n   */\r\n  public get value(): string | undefined {\r\n    return this._value;\r\n  }\r\n}\r\n\r\n/**\r\n * The data type returned by {@link CommandLineParameterProvider.defineFlagParameter}.\r\n * @public\r\n */\r\nexport class CommandLineFlagParameter extends CommandLineParameter {\r\n  private _value: boolean = false;\r\n\r\n  /** @internal */\r\n  constructor(definition: ICommandLineFlagDefinition) {\r\n    super(definition);\r\n  }\r\n\r\n  /** {@inheritdoc CommandLineParameter.kind} */\r\n  public get kind(): CommandLineParameterKind {\r\n    return CommandLineParameterKind.Flag;\r\n  }\r\n\r\n  /**\r\n   * {@inheritdoc CommandLineParameter._setValue}\r\n   * @internal\r\n   */\r\n  // tslint:disable-next-line:no-any\r\n  public _setValue(data: any): void { // abstract\r\n    if (data === null) {\r\n      data = undefined;\r\n    }\r\n    if (data !== undefined && typeof data !== 'boolean') {\r\n      this.reportInvalidData(data);\r\n    }\r\n    this._value = !!data;\r\n  }\r\n\r\n  /**\r\n   * Returns a boolean indicating whether the parameter was included in the command line.\r\n   *\r\n   * @remarks\r\n   * The return value will be false if the command-line has not been parsed yet,\r\n   * or if the flag was not used.\r\n   */\r\n  public get value(): boolean {\r\n    return this._value;\r\n  }\r\n}\r\n\r\n/**\r\n * The data type returned by {@link CommandLineParameterProvider.defineIntegerParameter}.\r\n * @public\r\n */\r\nexport class CommandLineIntegerParameter extends CommandLineParameterWithArgument {\r\n  private _value: number | undefined = undefined;\r\n\r\n  /** @internal */\r\n  constructor(definition: ICommandLineIntegerDefinition) {\r\n    super(definition);\r\n  }\r\n\r\n  /** {@inheritdoc CommandLineParameter.kind} */\r\n  public get kind(): CommandLineParameterKind {\r\n    return CommandLineParameterKind.Integer;\r\n  }\r\n\r\n  /**\r\n   * {@inheritdoc CommandLineParameter._setValue}\r\n   * @internal\r\n   */\r\n  // tslint:disable-next-line:no-any\r\n  public _setValue(data: any): void { // abstract\r\n    if (data === null) {\r\n      data = undefined;\r\n    }\r\n    if (data !== undefined && typeof data !== 'number') {\r\n      this.reportInvalidData(data);\r\n    }\r\n    this._value = data;\r\n  }\r\n\r\n  /**\r\n   * Returns the argument value for an integer parameter that was parsed from the command line.\r\n   *\r\n   * @remarks\r\n   * The return value will be undefined if the command-line has not been parsed yet,\r\n   * or if the parameter was omitted and has no default value.\r\n   */\r\n  public get value(): number | undefined {\r\n    return this._value;\r\n  }\r\n}\r\n\r\n/**\r\n * The data type returned by {@link CommandLineParameterProvider.defineStringParameter}.\r\n * @public\r\n */\r\nexport class CommandLineStringParameter extends CommandLineParameterWithArgument {\r\n  private _value: string | undefined = undefined;\r\n\r\n  /** @internal */\r\n  constructor(definition: ICommandLineStringDefinition) {\r\n    super(definition);\r\n  }\r\n\r\n  /** {@inheritdoc CommandLineParameter.kind} */\r\n  public get kind(): CommandLineParameterKind {\r\n    return CommandLineParameterKind.String;\r\n  }\r\n\r\n  /**\r\n   * {@inheritdoc CommandLineParameter._setValue}\r\n   * @internal\r\n   */\r\n  // tslint:disable-next-line:no-any\r\n  public _setValue(data: any): void { // abstract\r\n    if (data === null) {\r\n      data = undefined;\r\n    }\r\n    if (data !== undefined && typeof data !== 'string') {\r\n      this.reportInvalidData(data);\r\n    }\r\n    this._value = data;\r\n  }\r\n\r\n  /**\r\n   * Returns the argument value for a string parameter that was parsed from the command line.\r\n   *\r\n   * @remarks\r\n   * The return value will be undefined if the command-line has not been parsed yet,\r\n   * or if the parameter was omitted and has no default value.\r\n   */\r\n  public get value(): string | undefined {\r\n    return this._value;\r\n  }\r\n}\r\n\r\n/**\r\n * The data type returned by {@link CommandLineParameterProvider.defineStringListParameter}.\r\n * @public\r\n */\r\nexport class CommandLineStringListParameter extends CommandLineParameterWithArgument {\r\n  private _values: string[] = [];\r\n\r\n  /** @internal */\r\n  constructor(definition: ICommandLineStringListDefinition) {\r\n    super(definition);\r\n  }\r\n\r\n  /** {@inheritdoc CommandLineParameter.kind} */\r\n  public get kind(): CommandLineParameterKind {\r\n    return CommandLineParameterKind.StringList;\r\n  }\r\n\r\n  /**\r\n   * {@inheritdoc CommandLineParameter._setValue}\r\n   * @internal\r\n   */\r\n  // tslint:disable-next-line:no-any\r\n  public _setValue(data: any): void { // abstract\r\n    if (data === null) {\r\n      data = undefined;\r\n    }\r\n\r\n    if (data !== undefined) {\r\n      if (!Array.isArray(data)) {\r\n        this.reportInvalidData(data);\r\n      }\r\n\r\n      for (const arrayItem of data) {\r\n        if (typeof(arrayItem) !== 'string') {\r\n          this.reportInvalidData(data);\r\n        }\r\n      }\r\n    }\r\n\r\n    this._values = data || [];\r\n  }\r\n\r\n  /**\r\n   * Returns the string arguments for a string list parameter that was parsed from the command line.\r\n   *\r\n   * @remarks\r\n   * The array will be empty if the command-line has not been parsed yet,\r\n   * or if the parameter was omitted and has no default value.\r\n   */\r\n  public get values(): ReadonlyArray<string> {\r\n    return this._values;\r\n  }\r\n}\r\n"],"sourceRoot":"../src"}