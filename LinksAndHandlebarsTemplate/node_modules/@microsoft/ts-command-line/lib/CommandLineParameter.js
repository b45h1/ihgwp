"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Identifies the kind of a CommandLineParameter.
 * @public
 */
var CommandLineParameterKind;
(function (CommandLineParameterKind) {
    /** Indicates a CommandLineChoiceParameter */
    CommandLineParameterKind[CommandLineParameterKind["Choice"] = 0] = "Choice";
    /** Indicates a CommandLineFlagParameter */
    CommandLineParameterKind[CommandLineParameterKind["Flag"] = 1] = "Flag";
    /** Indicates a CommandLineIntegerParameter */
    CommandLineParameterKind[CommandLineParameterKind["Integer"] = 2] = "Integer";
    /** Indicates a CommandLineStringParameter */
    CommandLineParameterKind[CommandLineParameterKind["String"] = 3] = "String";
    /** Indicates a CommandLineStringListParameter */
    CommandLineParameterKind[CommandLineParameterKind["StringList"] = 4] = "StringList";
})(CommandLineParameterKind = exports.CommandLineParameterKind || (exports.CommandLineParameterKind = {}));
/**
 * The base class for the various command-line parameter types.
 * @public
 */
class CommandLineParameter {
    /** @internal */
    constructor(definition) {
        if (!CommandLineParameter._longNameRegExp.test(definition.parameterLongName)) {
            throw new Error(`Invalid name: "${definition.parameterLongName}". The parameter long name must be`
                + ` lower-case and use dash delimiters (e.g. "--do-a-thing")`);
        }
        this.longName = definition.parameterLongName;
        if (definition.parameterShortName) {
            if (!CommandLineParameter._shortNameRegExp.test(definition.parameterShortName)) {
                throw new Error(`Invalid name: "${definition.parameterShortName}". The parameter short name must be`
                    + ` a dash followed by a single upper-case or lower-case letter (e.g. "-a")`);
            }
        }
        this.shortName = definition.parameterShortName;
        this.description = definition.description;
    }
    /**
     * Internal usage only.  Used to report unexpected output from the argparse library.
     */
    reportInvalidData(data) {
        throw new Error(`Unexpected data object for parameter "${this.longName}": `
            + JSON.stringify(data));
    }
}
// Example: "--do-something"
CommandLineParameter._longNameRegExp = /^-(-[a-z0-9]+)+$/;
// Example: "-d"
CommandLineParameter._shortNameRegExp = /^-[a-zA-Z]$/;
exports.CommandLineParameter = CommandLineParameter;
/**
 * The common base class for parameters types that receive an argument.
 *
 * @remarks
 * An argument is an accompanying command-line token, such as "123" in the
 * example "--max-count 123".
 * @public
 */
class CommandLineParameterWithArgument extends CommandLineParameter {
    /** @internal */
    constructor(definition) {
        super(definition);
        if (definition.argumentName === '') {
            throw new Error('The argument name cannot be an empty string. (For the default name, specify undefined.)');
        }
        if (definition.argumentName.toUpperCase() !== definition.argumentName) {
            throw new Error(`Invalid name: "${definition.argumentName}". The argument name must be all upper case.`);
        }
        const match = definition.argumentName.match(CommandLineParameterWithArgument._invalidArgumentNameRegExp);
        if (match) {
            throw new Error(`The argument name "${definition.argumentName}" contains an invalid character "${match[0]}".`
                + ` Only upper-case letters, numbers, and underscores are allowed.`);
        }
        this.argumentName = definition.argumentName;
    }
}
// Matches the first character that *isn't* part of a valid upper-case argument name such as "URL_2"
CommandLineParameterWithArgument._invalidArgumentNameRegExp = /[^A-Z_0-9]/;
exports.CommandLineParameterWithArgument = CommandLineParameterWithArgument;
/**
 * The data type returned by {@link CommandLineParameterProvider.defineChoiceParameter}.
 * @public
 */
class CommandLineChoiceParameter extends CommandLineParameter {
    /** @internal */
    constructor(definition) {
        super(definition);
        this._value = undefined;
        if (definition.alternatives.length <= 1) {
            throw new Error(`When defining a choice parameter, the alternatives list must contain at least one value.`);
        }
        if (definition.defaultValue && definition.alternatives.indexOf(definition.defaultValue) === -1) {
            throw new Error(`The specified default value "${definition.defaultValue}"`
                + ` is not one of the available options: ${definition.alternatives.toString()}`);
        }
        this.alternatives = definition.alternatives;
        this.defaultValue = definition.defaultValue;
    }
    /** {@inheritdoc CommandLineParameter.kind} */
    get kind() {
        return CommandLineParameterKind.Choice;
    }
    /**
     * {@inheritdoc CommandLineParameter._setValue}
     * @internal
     */
    // tslint:disable-next-line:no-any
    _setValue(data) {
        if (data === null) {
            data = undefined;
        }
        if (data !== undefined && typeof data !== 'string') {
            this.reportInvalidData(data);
        }
        this._value = data;
    }
    /**
     * Returns the argument value for a choice parameter that was parsed from the command line.
     *
     * @remarks
     * The return value will be `undefined` if the command-line has not been parsed yet,
     * or if the parameter was omitted and has no default value.
     */
    get value() {
        return this._value;
    }
}
exports.CommandLineChoiceParameter = CommandLineChoiceParameter;
/**
 * The data type returned by {@link CommandLineParameterProvider.defineFlagParameter}.
 * @public
 */
class CommandLineFlagParameter extends CommandLineParameter {
    /** @internal */
    constructor(definition) {
        super(definition);
        this._value = false;
    }
    /** {@inheritdoc CommandLineParameter.kind} */
    get kind() {
        return CommandLineParameterKind.Flag;
    }
    /**
     * {@inheritdoc CommandLineParameter._setValue}
     * @internal
     */
    // tslint:disable-next-line:no-any
    _setValue(data) {
        if (data === null) {
            data = undefined;
        }
        if (data !== undefined && typeof data !== 'boolean') {
            this.reportInvalidData(data);
        }
        this._value = !!data;
    }
    /**
     * Returns a boolean indicating whether the parameter was included in the command line.
     *
     * @remarks
     * The return value will be false if the command-line has not been parsed yet,
     * or if the flag was not used.
     */
    get value() {
        return this._value;
    }
}
exports.CommandLineFlagParameter = CommandLineFlagParameter;
/**
 * The data type returned by {@link CommandLineParameterProvider.defineIntegerParameter}.
 * @public
 */
class CommandLineIntegerParameter extends CommandLineParameterWithArgument {
    /** @internal */
    constructor(definition) {
        super(definition);
        this._value = undefined;
    }
    /** {@inheritdoc CommandLineParameter.kind} */
    get kind() {
        return CommandLineParameterKind.Integer;
    }
    /**
     * {@inheritdoc CommandLineParameter._setValue}
     * @internal
     */
    // tslint:disable-next-line:no-any
    _setValue(data) {
        if (data === null) {
            data = undefined;
        }
        if (data !== undefined && typeof data !== 'number') {
            this.reportInvalidData(data);
        }
        this._value = data;
    }
    /**
     * Returns the argument value for an integer parameter that was parsed from the command line.
     *
     * @remarks
     * The return value will be undefined if the command-line has not been parsed yet,
     * or if the parameter was omitted and has no default value.
     */
    get value() {
        return this._value;
    }
}
exports.CommandLineIntegerParameter = CommandLineIntegerParameter;
/**
 * The data type returned by {@link CommandLineParameterProvider.defineStringParameter}.
 * @public
 */
class CommandLineStringParameter extends CommandLineParameterWithArgument {
    /** @internal */
    constructor(definition) {
        super(definition);
        this._value = undefined;
    }
    /** {@inheritdoc CommandLineParameter.kind} */
    get kind() {
        return CommandLineParameterKind.String;
    }
    /**
     * {@inheritdoc CommandLineParameter._setValue}
     * @internal
     */
    // tslint:disable-next-line:no-any
    _setValue(data) {
        if (data === null) {
            data = undefined;
        }
        if (data !== undefined && typeof data !== 'string') {
            this.reportInvalidData(data);
        }
        this._value = data;
    }
    /**
     * Returns the argument value for a string parameter that was parsed from the command line.
     *
     * @remarks
     * The return value will be undefined if the command-line has not been parsed yet,
     * or if the parameter was omitted and has no default value.
     */
    get value() {
        return this._value;
    }
}
exports.CommandLineStringParameter = CommandLineStringParameter;
/**
 * The data type returned by {@link CommandLineParameterProvider.defineStringListParameter}.
 * @public
 */
class CommandLineStringListParameter extends CommandLineParameterWithArgument {
    /** @internal */
    constructor(definition) {
        super(definition);
        this._values = [];
    }
    /** {@inheritdoc CommandLineParameter.kind} */
    get kind() {
        return CommandLineParameterKind.StringList;
    }
    /**
     * {@inheritdoc CommandLineParameter._setValue}
     * @internal
     */
    // tslint:disable-next-line:no-any
    _setValue(data) {
        if (data === null) {
            data = undefined;
        }
        if (data !== undefined) {
            if (!Array.isArray(data)) {
                this.reportInvalidData(data);
            }
            for (const arrayItem of data) {
                if (typeof (arrayItem) !== 'string') {
                    this.reportInvalidData(data);
                }
            }
        }
        this._values = data || [];
    }
    /**
     * Returns the string arguments for a string list parameter that was parsed from the command line.
     *
     * @remarks
     * The array will be empty if the command-line has not been parsed yet,
     * or if the parameter was omitted and has no default value.
     */
    get values() {
        return this._values;
    }
}
exports.CommandLineStringListParameter = CommandLineStringListParameter;

//# sourceMappingURL=CommandLineParameter.js.map
