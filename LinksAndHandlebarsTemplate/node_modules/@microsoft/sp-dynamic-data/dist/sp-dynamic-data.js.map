{"version":3,"sources":["webpack:///../webpack/bootstrap cfea36b6fb2c909abda1","webpack:///.././lib/DynamicDataReference.js","webpack:///.././lib/SPDynamicDataStrings.resx.js","webpack:///.././lib/DynamicDataManager.js","webpack:///.././lib/index.js","webpack:///../external \"@microsoft/sp-core-library\"","webpack:///../external \"resx-strings\""],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;;;;;;;ACzCA;AACA;AACA;AACA;;;ACHoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oHAAgG;AAChG,kHAA8F;AAC9F;AACA;AACA;AACA;AACA,2HAAuG;AACvG,kHAA8F;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,6BAA6B,EAAE;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,oGAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;ACjI0C;AACD;;;;;;;ACDzC,+C;;;;;;ACAA,+C","file":"sp-dynamic-data.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap cfea36b6fb2c909abda1","var DynamicDataReference = (function () {\n    function DynamicDataReference(reference) {\n        var split = reference.split(':');\n        if (split.length < 2) {\n            throw new Error(\"Data id is malformed. Data id: \\\"\" + reference + \"\\\"\");\n        }\n        this._reference = reference;\n        this._sourceId = split[0];\n        this._property = split[1];\n        this._propertyPath = split[2];\n    }\n    Object.defineProperty(DynamicDataReference.prototype, \"reference\", {\n        get: function () {\n            return this._reference;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DynamicDataReference.prototype, \"sourceId\", {\n        get: function () {\n            return this._sourceId;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DynamicDataReference.prototype, \"property\", {\n        get: function () {\n            return this._property;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DynamicDataReference.prototype, \"propertyPath\", {\n        get: function () {\n            return this._propertyPath;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return DynamicDataReference;\n}());\nexport default DynamicDataReference;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/DynamicDataReference.js\n// module id = null\n// module chunks = ","var strings = (typeof DEPRECATED_UNIT_TEST === 'undefined' || DEPRECATED_UNIT_TEST) ?\n    require(\"./resx-strings/en-us.json\") :\n    require(\"resx-strings\");\nexport default strings['_lEB8pJuVoVQWKRMUKX0ZJQ'];\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/SPDynamicDataStrings.resx.js\n// module id = null\n// module chunks = ","import { _SPEventManager, SPEvent, Validate, Text, Log, ServiceKey } from '@microsoft/sp-core-library';\nimport strings from './SPDynamicDataStrings.resx';\nvar ANY_PROPERTY_EVENT_PREFIX = 'DynamicData_AnyPropertyChanged';\nvar PROPERTY_EVENT_PREFIX = 'DynamicData_PropertyChanged';\nvar ALL_PROPERTIES_EVENT_PREFIX = 'DynamicData_AllPropertiesChanged';\nvar SOURCES_CHANGED_EVENT_NAME = 'DynamicData_SourcesChanged';\nvar EVENT_NAME_SEPARATOR = '_';\nvar DynamicDataManager = (function () {\n    function DynamicDataManager(serviceScope) {\n        this._sources = new Map();\n        this._sourcesChangedEvent = new SPEvent(SOURCES_CHANGED_EVENT_NAME);\n    }\n    Object.defineProperty(DynamicDataManager.prototype, \"sourcesChangedEvent\", {\n        get: function () {\n            return this._sourcesChangedEvent;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DynamicDataManager.prototype.notifySourceChanged = function (sourceId) {\n        Validate.isNonemptyString(sourceId, 'sourceId');\n        _SPEventManager.instance.raiseEvent(this._getAllPropertiesChangedEventName(sourceId), {});\n        _SPEventManager.instance.raiseEvent(this._getAnyPropertyChangedEventName(sourceId), {});\n    };\n    DynamicDataManager.prototype.notifyPropertyChanged = function (sourceId, propertyId) {\n        Validate.isNonemptyString(sourceId, 'sourceId');\n        Validate.isNonemptyString(propertyId, 'propertyId');\n        _SPEventManager.instance.raiseEvent(this._getPropertyChangedEventName(sourceId, propertyId), {});\n        _SPEventManager.instance.raiseEvent(this._getAnyPropertyChangedEventName(sourceId), {});\n    };\n    DynamicDataManager.prototype.registerSourceChanged = function (sourceId, observer, callback) {\n        Validate.isNonemptyString(sourceId, 'sourceId');\n        Validate.isNotNullOrUndefined(observer, 'observer');\n        Validate.isNotNullOrUndefined(callback, 'callback');\n        if (!this._sources.has(sourceId)) {\n            throw new Error(Text.format(strings.dynamicDataManagerSourceDoesntExist, sourceId));\n        }\n        _SPEventManager.instance.registerEvent(this._getAllPropertiesChangedEventName(sourceId), observer, callback);\n        _SPEventManager.instance.registerEvent(this._getAnyPropertyChangedEventName(sourceId), observer, callback);\n    };\n    DynamicDataManager.prototype.unregisterSourceChanged = function (sourceId, observer, callback) {\n        Validate.isNonemptyString(sourceId, 'sourceId');\n        Validate.isNotNullOrUndefined(observer, 'observer');\n        Validate.isNotNullOrUndefined(callback, 'callback');\n        if (!this._sources.has(sourceId)) {\n            throw new Error(Text.format(strings.dynamicDataManagerSourceDoesntExist, sourceId));\n        }\n        _SPEventManager.instance.unregisterEvent(this._getAllPropertiesChangedEventName(sourceId), observer, callback);\n        _SPEventManager.instance.unregisterEvent(this._getAnyPropertyChangedEventName(sourceId), observer, callback);\n    };\n    DynamicDataManager.prototype.registerPropertyChanged = function (sourceId, propertyId, observer, callback) {\n        Validate.isNonemptyString(sourceId, 'sourceId');\n        Validate.isNonemptyString(propertyId, 'propertyId');\n        Validate.isNotNullOrUndefined(observer, 'observer');\n        Validate.isNotNullOrUndefined(callback, 'callback');\n        if (!this._sources.has(sourceId)) {\n            throw new Error(Text.format(strings.dynamicDataManagerSourceDoesntExist, sourceId));\n        }\n        _SPEventManager.instance.registerEvent(this._getPropertyChangedEventName(sourceId, propertyId), observer, callback);\n        _SPEventManager.instance.registerEvent(this._getAnyPropertyChangedEventName(sourceId), observer, callback);\n    };\n    DynamicDataManager.prototype.unregisterPropertyChanged = function (sourceId, propertyId, observer, callback) {\n        Validate.isNonemptyString(sourceId, 'sourceId');\n        Validate.isNonemptyString(propertyId, 'propertyId');\n        Validate.isNotNullOrUndefined(observer, 'observer');\n        Validate.isNotNullOrUndefined(callback, 'callback');\n        if (!this._sources.has(sourceId)) {\n            throw new Error(Text.format(strings.dynamicDataManagerSourceDoesntExist, sourceId));\n        }\n        _SPEventManager.instance.unregisterEvent(this._getPropertyChangedEventName(sourceId, propertyId), observer, callback);\n        _SPEventManager.instance.unregisterEvent(this._getAnyPropertyChangedEventName(sourceId), observer, callback);\n    };\n    DynamicDataManager.prototype.getSources = function () {\n        var sources = [];\n        this._sources.forEach(function (source) { return sources.push(source); });\n        return sources;\n    };\n    DynamicDataManager.prototype.tryGetSource = function (sourceId) {\n        Validate.isNonemptyString(sourceId, 'sourceId');\n        return this._sources.get(sourceId);\n    };\n    DynamicDataManager.prototype.addSource = function (source) {\n        this._validateSource(source);\n        if (this._sources.has(source.id)) {\n            Log.warn('DynamicDataManager', Text.format(strings.dynamicDataManagerSourceAlreadyExists, source.id));\n        }\n        this._sources.set(source.id, source);\n        this._raiseSourcesChangedEvent();\n    };\n    DynamicDataManager.prototype.removeSource = function (sourceId) {\n        Validate.isNonemptyString(sourceId, 'sourceId');\n        if (this._sources.has(sourceId)) {\n            _SPEventManager.instance.removeEvent(this._getAllPropertiesChangedEventName(sourceId));\n            _SPEventManager.instance.removeEvent(this._getAnyPropertyChangedEventName(sourceId));\n            _SPEventManager.instance.removeEventsByPrefix(this._getPropertyChangedEventPrefix(sourceId));\n            this._sources.delete(sourceId);\n            this._raiseSourcesChangedEvent();\n        }\n    };\n    DynamicDataManager.prototype._validateSource = function (source) {\n        Validate.isNotNullOrUndefined(source, 'source');\n        if (source.id.indexOf(EVENT_NAME_SEPARATOR) > -1) {\n            throw new Error(\"Source id contains invalid characters, like \\\"\" + EVENT_NAME_SEPARATOR + \"\\\". Id: \\\"\" + source.id + \"\\\".\");\n        }\n        var regex = /^[a-zA-Z0-9\\-_]+$/;\n        source.getPropertyDefinitions().forEach(function (def) {\n            if (!regex.test(def.id)) {\n                throw new Error(\"Source contains invalid property \\\"\" + def.id + \"\\\".\");\n            }\n        });\n    };\n    DynamicDataManager.prototype._raiseSourcesChangedEvent = function () {\n        _SPEventManager.instance.raiseStickyEvent(SOURCES_CHANGED_EVENT_NAME, {});\n    };\n    DynamicDataManager.prototype._getAllPropertiesChangedEventName = function (sourceId) {\n        return [ALL_PROPERTIES_EVENT_PREFIX, sourceId].join(EVENT_NAME_SEPARATOR);\n    };\n    DynamicDataManager.prototype._getAnyPropertyChangedEventName = function (sourceId) {\n        return [ANY_PROPERTY_EVENT_PREFIX, sourceId].join(EVENT_NAME_SEPARATOR);\n    };\n    DynamicDataManager.prototype._getPropertyChangedEventPrefix = function (sourceId) {\n        return [PROPERTY_EVENT_PREFIX, sourceId].join(EVENT_NAME_SEPARATOR);\n    };\n    DynamicDataManager.prototype._getPropertyChangedEventName = function (sourceId, propertyId) {\n        return [this._getPropertyChangedEventPrefix(sourceId), propertyId].join(EVENT_NAME_SEPARATOR);\n    };\n    DynamicDataManager.serviceKey = ServiceKey.create('sp-core-library:DynamicDataManager', DynamicDataManager);\n    return DynamicDataManager;\n}());\nexport default DynamicDataManager;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/DynamicDataManager.js\n// module id = null\n// module chunks = ","export { default as DynamicDataReference } from './DynamicDataReference';\nexport { default as _DynamicDataManager } from './DynamicDataManager';\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/index.js\n// module id = null\n// module chunks = ","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@microsoft/sp-core-library\"\n// module id = 1\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"resx-strings\"\n// module id = 2\n// module chunks = 0"],"sourceRoot":""}