/**
 * Dynamic Data Sources provide Dynamic Data to consumers.
 * They offer metadata to identify the data sources and API to get the data.
 *
 * @beta
 */
export interface IDynamicDataSource {
    /**
     * Id of the Dynamic Data Source.
     */
    id: string;
    /**
     * Metadata of the Dynamic Data Source.
     */
    metadata: IDynamicDataSourceMetadata;
    /**
     * Returns the definitions for all the properties exposed by the source.
     */
    getPropertyDefinitions(): ReadonlyArray<IDynamicDataPropertyDefinition>;
    /**
     * For a given property id, returns the value of the property.
     * Throws an error if the property id doesn't exist in the source.
     *
     * @remarks
     * It returns a read-only copy of the property value, so modifying its value will not impact
     * on the value in the data source.
     *
     * Property values are JSON-serializable objects, so there are no functions that can be called inside.
     */
    getPropertyValue(propertyId: string): any;
}
/**
 * Definition of a property. It includes the id of the property to be used with the APIs, along with
 * a user-friendly, localized title and description to be seen and used by end users.
 *
 * @beta
 */
export interface IDynamicDataPropertyDefinition {
    /**
     * Id of the property. This can only contains letters, numbers, dashes and underscores.
     *
     * @remarks
     * The regular expression used to validate the constraints is /^[a-zA-Z0-9\-_]+$/
     * Example: "myFiles"
     */
    id: string;
    /**
     * User-friendly, localized title of the property.
     * Example: "My files" / "Mis archivos" (depending of current language)
     */
    title: string;
    /**
     * User-friendly, localized description of the property.
     * Example: "Contains a list of ids with the files of the current user"
     */
    description?: string;
}
/**
 * Metadata of the Dynamic Data Source. It allows consumers to easily distinguish Dynamic Data Sources.
 *
 * @beta
 */
export interface IDynamicDataSourceMetadata {
    /**
     * User-friendly, localized title of the Dynamic Data Source.
     * This can be customized by the component it refers to. By default it's the alias of the component.
     */
    title: string;
    /**
     * User-friendly, localized description of the Dynamic Data Source.
     */
    description?: string;
    /**
     * Alias of the component that the Dynamic Data Source refers to.
     * It can be undefined when the sources doesn't come from a component, for example framework level data sources.
     */
    alias?: string;
    /**
     * Id of the component that the Dynamic Data Source refers to.
     * It can be undefined when the sources doesn't come from a component, for example framework level data sources.
     */
    componentId?: string;
    /**
     * Id of the instance of the component that the Dynamic Data Source refers to.
     * This allows to distinguish, for example, between two web parts with the same type.
     * It can be undefined when the sources doesn't come from a component, for example framework level data sources.
     */
    instanceId?: string;
}
