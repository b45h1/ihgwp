/**
 * Base communication layer for the SharePoint Framework
 * 
 * @remarks
 * This package defines the base communication layer for
 * the SharePoint Framework.  For REST calls, it handles authentication,
 * logging, diagnostics, and batching.  It also simplifies requests by
 * adding default headers that follow the recommended best practices.
 * 
 * @packagedocumentation
 */

/// <reference types="adal" />
import { Guid } from '@microsoft/sp-core-library';
import { ServiceKey } from '@microsoft/sp-core-library';
import { ServiceScope } from '@microsoft/sp-core-library';
import { SPEvent } from '@microsoft/sp-core-library';
import { SPEventArgs } from '@microsoft/sp-core-library';

/* Excluded from this release type: _AadConstants */

/* Excluded from this release type: AadHttpClient */

/**
 * Configuration for HttpClient.
 *
 * @remarks
 * The HttpClientConfiguration object provides a set of switches for enabling/disabling
 * various features of the HttpClient class.  Normally these switches are set
 * (e.g. when calling HttpClient.fetch()) by providing one of the predefined defaults
 * from HttpClientConfigurations, however switches can also be changed via the
 * HttpClientConfiguration.overrideWith() method.
 *
 * @public
 */
export declare class AadHttpClientConfiguration extends HttpClientConfiguration implements IAadHttpClientConfiguration {
    protected flags: IAadHttpClientConfiguration;
    /**
     * Constructs a new instance of HttpClientConfiguration with the specified flags.
     * The default values will be used for any flags that are missing or undefined.
     * If overrideFlags is specified, it takes precedence over flags.
     */
    constructor(flags: IAadHttpClientConfiguration, overrideFlags?: IAadHttpClientConfiguration);
    overrideWith(sourceFlags: IAadHttpClientConfiguration): AadHttpClientConfiguration;
}

/* Excluded from this release type: AadTokenProvider */

/* Excluded from this release type: _AadTokenProviders */

/* Excluded from this release type: DigestCache */

/* Excluded from this release type: GraphHttpClient */

/* Excluded from this release type: GraphHttpClientConfiguration */

/* Excluded from this release type: _GraphHttpClientContext */

/* Excluded from this release type: GraphHttpClientResponse */

/**
 * HttpClient implements a basic set of features for performing REST operations against
 * a generic service.
 *
 * @remarks
 * For communicating with SharePoint, use the {@link SPHttpClient} class instead.
 *
 * @public
 */
export declare class HttpClient {
    /**
     * The standard predefined HttpClientConfiguration objects for use with
     * the HttpClient class.
     */
    static readonly configurations: IHttpClientConfigurations;
    /**
     * The service key for HttpClient.
     *
     * @public
     */
    static readonly serviceKey: ServiceKey<HttpClient>;
    private static readonly _className;
    /* Excluded from this release type: _serviceScope */
    private _fetchProvider;
    constructor(serviceScope: ServiceScope);
    /**
     * Performs a REST service call.
     *
     * @remarks
     * Although the SPHttpClient subclass adds additional enhancements, the parameters and semantics
     * for HttpClient.fetch() are essentially the same as the WHATWG API standard that is documented here:
     * https://fetch.spec.whatwg.org/
     *
     * @param url - the URL to fetch
     * @param configuration - determines the default behavior of HttpClient; normally this should
     *   be the latest version number from HttpClientConfigurations
     * @param options - additional options that affect the request
     * @returns A promise with behavior similar to WHATWG fetch().  This promise will resolve normally
     * (with {@link HttpClientResponse.ok} being false) for error status codes such as HTTP 404
     * or 500.  The promise will only reject for network failures or other errors that prevent communication
     * with the server.
     */
    fetch(url: string, configuration: HttpClientConfiguration, options: IHttpClientOptions): Promise<HttpClientResponse>;
    /**
     * Calls fetch(), but sets the method to "GET".
     *
     * @param url - the URL to fetch
     * @param configuration - determines the default behavior of HttpClient; normally this should
     *   be the latest version number from HttpClientConfigurations
     * @param options - additional options that affect the request
     * @returns A promise with behavior similar to WHATWG fetch().  This promise will resolve normally
     * (with {@link HttpClientResponse.ok} being false) for error status codes such as HTTP 404
     * or 500.  The promise will only reject for network failures or other errors that prevent communication
     * with the server.
     */
    get(url: string, configuration: HttpClientConfiguration, options?: IHttpClientOptions): Promise<HttpClientResponse>;
    /**
     * Calls fetch(), but sets the method to "POST".
     *
     * @param url - the URL to fetch
     * @param configuration - determines the default behavior of HttpClient; normally this should
     *   be the latest version number from HttpClientConfigurations
     * @param options - additional options that affect the request
     * @returns A promise with behavior similar to WHATWG fetch().  This promise will resolve normally
     * (with {@link HttpClientResponse.ok} being false) for error status codes such as HTTP 404
     * or 500.  The promise will only reject for network failures or other errors that prevent communication
     * with the server.
     */
    post(url: string, configuration: HttpClientConfiguration, options: IHttpClientOptions): Promise<HttpClientResponse>;
}

/**
 * Configuration for HttpClient.
 *
 * @remarks
 * The HttpClientConfiguration object provides a set of switches for enabling/disabling
 * various features of the HttpClient class.  Normally these switches are set
 * (e.g. when calling HttpClient.fetch()) by providing one of the predefined defaults
 * from HttpClientConfigurations, however switches can also be changed via the
 * HttpClientConfiguration.overrideWith() method.
 *
 * @public
 */
export declare class HttpClientConfiguration implements IHttpClientConfiguration {
    protected flags: IHttpClientConfiguration;
    /**
     * Constructs a new instance of HttpClientConfiguration with the specified flags.
     * The default values will be used for any flags that are missing or undefined.
     * If overrideFlags is specified, it takes precedence over flags.
     */
    constructor(flags: IHttpClientConfiguration, overrideFlags?: IHttpClientConfiguration);
    /**
     * Child classes should override this method to construct the child class type,
     * rather than the base class type.
     */
    overrideWith(sourceFlags: IHttpClientConfiguration): HttpClientConfiguration;
    /**
     * Child classes should override this method to initialize the flags
     * object.
     */
    protected initializeFlags(): void;
    private _mergeFlags(source);
}

/**
 * The Response subclass returned by methods such as HttpClient.fetch().
 *
 * @remarks
 * This is a placeholder.  In the future, additional HttpClient-specific functionality
 * may be added to this class.
 *
 * @internalremarks
 * This class exposes the same members as our typings for the browser's native
 * Response and Body classes, which is why we can say that it "implements" them.
 * It cannot actually inherit from Response because that class does not have a copy
 * constructor (because it would probably be inefficient to copy the response stream).
 *
 * @public
 */
export declare class HttpClientResponse implements Response, Body {
    protected nativeResponse: Response;
    /* Excluded from this release type: __constructor */
    /* Excluded from this release type: body */
    /**
     * {@inheritdoc whatwg-fetch:Body.bodyUsed}
     */
    readonly bodyUsed: boolean;
    /**
     * {@inheritdoc whatwg-fetch:Body.arrayBuffer}
     */
    arrayBuffer(): Promise<ArrayBuffer>;
    /**
     * {@inheritdoc whatwg-fetch:Body.blob}
     */
    blob(): Promise<Blob>;
    /**
     * {@inheritdoc whatwg-fetch:Body.formData}
     */
    formData(): Promise<FormData>;
    /**
     * {@inheritdoc whatwg-fetch:Body.json}
     */
    json(): Promise<any>;
    /**
     * {@inheritdoc whatwg-fetch:Body.text}
     */
    text(): Promise<string>;
    /**
     * {@inheritdoc whatwg-fetch:Response.type}
     */
    readonly type: ResponseType;
    /**
     * {@inheritdoc whatwg-fetch:Response.url}
     */
    readonly url: string;
    /**
     * {@inheritdoc whatwg-fetch:Response.status}
     */
    readonly status: number;
    /**
     * {@inheritdoc whatwg-fetch:Response.ok}
     */
    readonly ok: boolean;
    /**
     * {@inheritdoc whatwg-fetch:Response.statusText}
     */
    readonly statusText: string;
    /**
     * {@inheritdoc whatwg-fetch:Response.headers}
     */
    readonly headers: Headers;
    clone(): HttpClientResponse;
}

/**
 * Flags interface for HttpClientConfiguration.
 *
 * @public
 */
export declare interface IAadHttpClientConfiguration extends IHttpClientConfiguration {
}

/**
 * Standard configurations for AadHttpClient.
 *
 * @remarks
 * This interface provides standard predefined AadHttpClientConfiguration objects for use with
 * the AadHttpClient class.  In general, clients should choose the latest available
 * version number, which enables all the switches that are recommended for typical
 * scenarios.  (If new switches are introduced in the future, a new version number
 * will be introduced, which ensures that existing code will continue to function the
 * way it did at the time when it was tested.)
 *
 * @public
 */
export declare interface IAadHttpClientConfigurations {
    /**
     * This configuration turns off every feature switch for AadHttpClient. The fetch()
     * behavior will be essentially identical to the WHATWG standard API that
     * is documented here:
     * https://fetch.spec.whatwg.org/
     */
    readonly v1: AadHttpClientConfiguration;
}

/* Excluded from this release type: IAadTokenProviderParameters */

/* Excluded from this release type: _IAdalJsModule */

/* Excluded from this release type: _IAuthenticationContextInternal */

/* Excluded from this release type: IDigestCache */

/* Excluded from this release type: _IDisplayCallHandlerArgs */

/* Excluded from this release type: IFetchProvider */

/* Excluded from this release type: IGraphHttpClientConfiguration */

/* Excluded from this release type: IGraphHttpClientConfigurations */

/* Excluded from this release type: IGraphHttpClientOptions */

/**
 * Flags interface for HttpClientConfiguration.
 *
 * @public
 */
export declare interface IHttpClientConfiguration {
}

/**
 * Standard configurations for HttpClient.
 *
 * @remarks
 * This interface provides standard predefined HttpClientConfiguration objects for use with
 * the HttpClient class.  In general, clients should choose the latest available
 * version number, which enables all the switches that are recommended for typical
 * scenarios.  (If new switches are introduced in the future, a new version number
 * will be introduced, which ensures that existing code will continue to function the
 * way it did at the time when it was tested.)
 *
 * @public
 */
export declare interface IHttpClientConfigurations {
    /**
     * This configuration turns off every feature switch for HttpClient.  The fetch()
     * behavior will be essentially identical to the WHATWG standard API that
     * is documented here:
     * https://fetch.spec.whatwg.org/
     */
    readonly v1: HttpClientConfiguration;
}

/**
 * Options for HttpClient
 *
 * @remarks
 * This interface defines the options for the HttpClient operations such as
 * get(), post(), fetch(), etc.  It is based on the whatwg API standard
 * parameters that are documented here:
 * https://fetch.spec.whatwg.org/
 *
 * @public
 */
export declare interface IHttpClientOptions extends RequestInit {
}

/* Excluded from this release type: ISPHttpClientBatchConfiguration */

/* Excluded from this release type: ISPHttpClientBatchConfigurations */

/* Excluded from this release type: ISPHttpClientBatchCreationOptions */

/* Excluded from this release type: ISPHttpClientBatchOptions */

/**
 * Flags interface for SPHttpClientCommonConfiguration
 *
 * @public
 */
export declare interface ISPHttpClientCommonConfiguration extends IHttpClientConfiguration {
    /**
     * Automatically configure the "Content-Type" header for a JSON payload.
     *
     * @remarks
     * When this switch is true:
     *
     * If the "Content-Type" header was not explicitly added for the request,
     * then SPHttpClient will add it if the request is a write operation (i.e.
     * an HTTP method other than "GET", "HEAD", or "OPTIONS").
     *
     * For OData 3.0, the value is 'application/json;odata=verbose;charset=utf-8'.
     *
     * For OData 4.0, the value is 'application/json;charset=utf-8'.
     */
    jsonRequest?: boolean;
    /**
     * Automatically configure the "Accept" header for a JSON payload.
     *
     * @remarks
     * When this switch is true:
     *
     * If the "Accept" header was not explicitly added for the request,
     * then SPHttpClient will add it.
     *
     * For OData 3.0, the value is 'application/json'.
     *
     * For OData 4.0, the value is 'application/json;odata.metadata=minimal'.
     */
    jsonResponse?: boolean;
}

/**
 * Flags interface for SPHttpClientConfiguration.
 *
 * @public
 */
export declare interface ISPHttpClientConfiguration extends ISPHttpClientCommonConfiguration {
    /**
     * Automatically configure the RequestInit.credentials.
     *
     * @remarks
     * When this switch is true:
     *
     * If RequestInit.credentials is not explicitly specified for the request,
     * then SPHttpClient will assign it to be "same-origin".  Without this switch,
     * different web browsers may apply different defaults.
     *
     * For more information, see the spec:
     * https://fetch.spec.whatwg.org/#cors-protocol-and-credentials
     */
    defaultSameOriginCredentials?: boolean;
    /**
     * Automatically configure the "OData-Version" header.
     *
     * @remarks
     * When this switch is specified (i.e. not undefined):
     * If the "OData-Version" header was not explicitly added for the request,
     * then SPHttpClient will add the header to specify the version indicated
     * by defaultODataVersion.
     *
     * NOTE: Without an 'OData-Version' header, the SharePoint server currently
     * defaults to Version 3.0 in most cases.  The recommended version is 4.0.
     */
    defaultODataVersion?: ODataVersion;
    /**
     * Automatically provide an "X-RequestDigest" header for authentication.
     *
     * @remarks
     * When this switch is true:
     *
     * If the "X-RequestDigest" header was not explicitly added for the request,
     * then SPHttpClient will add it if the request is a write operation (i.e.
     * an HTTP method other than "GET", "HEAD", or "OPTIONS").  The request digest
     * is managed by the DigestCache service.  In the case of a cache miss, an
     * additional network request may be performed.
     */
    requestDigest?: boolean;
}

/**
 * Standard configurations for SPHttpClient.
 *
 * @remarks
 * This interface provides standard predefined SPHttpClientConfiguration objects for use with
 * the SPHttpClient class.  In general, clients should choose the latest available
 * version number, which enables all the switches that are recommended for typical
 * scenarios.  (If new switches are introduced in the future, a new version number
 * will be introduced, which ensures that existing code will continue to function the
 * way it did at the time when it was tested.)
 *
 * @public
 */
export declare interface ISPHttpClientConfigurations {
    /**
     * Version 1 enables these switches:
     *
     * consoleLogging = true;
     * jsonRequest = true;
     * jsonResponse = true;
     * defaultSameOriginCredentials = true;
     * defaultODataVersion = ODataVersion.v4;
     * requestDigest = true
     */
    readonly v1: SPHttpClientConfiguration;
}

/**
 * This interface defines the options for the SPHttpClient operations such as
 * get(), post(), fetch(), etc.  It is based on the WHATWG API standard
 * parameters that are documented here:
 * https://fetch.spec.whatwg.org/
 *
 * @public
 */
export declare interface ISPHttpClientOptions extends IHttpClientOptions {
    /**
     * Configure the SPWeb URL for authentication.
     *
     * @remarks
     * For a write operation, SPHttpClient will automatically add the
     * "X-RequestDigest" header, which may need to be fetched using a seperate
     * request such as "https://example.com/sites/sample/_api/contextinfo".
     * Typically the SPWeb URL ("https://example.com/sites/sample" in this
     * example) can be guessed by looking for a reserved URL segment such
     * as "_api" in the original REST query, however certain REST endpoints
     * do not contain a reserved URL segment; in this case, the webUrl can
     * be explicitly specified using this option.
     */
    webUrl?: string;
}

/* Excluded from this release type: OAuthTokenProvider */

/**
 * Represents supported version of the "OData-Version" header, which is part
 * of the Open Data Protocol standard.
 *
 * @public
 */
export declare class ODataVersion {
    /**
     * Represents version 3.0 for the "OData-Version" header
     */
    static v3: ODataVersion;
    /**
     * Represents version 4.0 for the "OData-Version" header
     */
    static v4: ODataVersion;
    private _versionString;
    /**
     * Attempt to parse the "OData-Version" header.
     *
     * @remarks
     * If the "OData-Version" header is present, this returns the
     * corresponding ODataVersion constant.  An error is thrown if
     * the version number is not supported.  If the header is missing,
     * then undefined is returned.
     */
    static tryParseFromHeaders(headers: Headers): ODataVersion | undefined;
    /**
     * Returns the "OData-Version" value, for example "4.0".
     */
    toString(): string;
    private constructor();
}

/**
 * SPHttpClient is used to perform REST calls against SharePoint.  It adds default
 * headers, manages the digest needed for writes, and collects telemetry that
 * helps the service to monitor the performance of an application.
 *
 * @remarks
 * For communicating with other internet services, use the {@link HttpClient} class.
 *
 * @public
 */
export declare class SPHttpClient {
    /**
     * The standard predefined SPHttpClientConfiguration objects for use with
     * the SPHttpClient class.
     */
    static readonly configurations: ISPHttpClientConfigurations;
    /**
     * The service key for SPHttpClient.
     */
    static readonly serviceKey: ServiceKey<SPHttpClient>;
    private static readonly _className;
    private static _logSource;
    private static _reservedUrlSegments;
    private _digestCache;
    private _parentSource;
    private _serviceScope;
    private _fetchProvider;
    /**
     * Use a heuristic to infer the base URL for authentication.
     *
     * @remarks
     * Attempts to infer the SPWeb URL associated with the provided REST URL, by looking
     * for common SharePoint path components such as "_api", "_layouts", or "_vit_bin".
     * This is necessary for operations such as the X-RequestDigest
     * and ODATA batching, which require POSTing to a separate REST endpoint
     * in order to complete a request.
     *
     * For example, if the requestUrl is "/sites/site/web/_api/service",
     * the returned URL would be "/sites/site/web".  Or if the requestUrl
     * is "http://example.com/_layouts/service", the returned URL would be
     * "http://example.com".
     *
     * If the URL cannot be determined, an exception is thrown.
     *
     * @param requestUrl - The URL for a SharePoint REST service
     * @returns the inferred SPWeb URL
     */
    static getWebUrlFromRequestUrl(requestUrl: string): string;
    constructor(serviceScope: ServiceScope);
    /**
     * Perform a REST service call.
     *
     * @remarks
     * Generally, the parameters and semantics for SPHttpClient.fetch() are essentially
     * the same as the WHATWG API standard that is documented here:
     * https://fetch.spec.whatwg.org/
     *
     * The SPHttpClient subclass adds some additional behaviors that are convenient when
     * working with SharePoint ODATA API's (which can be avoided by using
     * HttpClient instead):
     *
     * - Default "Accept" and "Content-Type" headers are added if not explicitly specified.
     *
     * - For write operations, an "X-RequestDigest" header is automatically added
     *
     * - The request digest token is automatically fetched and stored in a cache, with
     *   support for preloading
     *
     * For a write operation, SPHttpClient will automatically add the "X-RequestDigest"
     * header, which may need to be obtained by issuing a seperate request such as
     * "https://example.com/sites/sample/_api/contextinfo".  Typically the appropriate
     * SPWeb URL can be guessed by looking for a reserved URL segment such as "_api"
     * in the original URL passed to fetch(); if not, use ISPHttpClientOptions.webUrl
     * to specify it explicitly.
     *
     * @param url - the URL to fetch
     * @param configuration - determines the default behavior of SPHttpClient; normally this should
     *   be the latest version number from SPHttpClientConfigurations
     * @param options - additional options that affect the request
     * @returns A promise with behavior similar to WHATWG fetch().  This promise will resolve normally
     * (with {@link HttpClientResponse.ok} being false) for error status codes such as HTTP 404
     * or 500.  The promise will only reject for network failures or other errors that prevent communication
     * with the server.
     */
    fetch(url: string, configuration: SPHttpClientConfiguration, options: ISPHttpClientOptions): Promise<SPHttpClientResponse>;
    /**
     * Calls fetch(), but sets the method to "GET".
     *
     * @param url - the URL to fetch
     * @param configuration - determines the default behavior of SPHttpClient; normally this should
     *   be the latest version number from SPHttpClientConfigurations
     * @param options - additional options that affect the request
     * @returns A promise with behavior similar to WHATWG fetch().  This promise will resolve normally
     * (with {@link HttpClientResponse.ok} being false) for error status codes such as HTTP 404
     * or 500.  The promise will only reject for network failures or other errors that prevent communication
     * with the server.
     */
    get(url: string, configuration: SPHttpClientConfiguration, options?: ISPHttpClientOptions): Promise<SPHttpClientResponse>;
    /**
     * Calls fetch(), but sets the method to "POST".
     *
     * @param url - the URL to fetch
     * @param configuration - determines the default behavior of SPHttpClient; normally this should
     *   be the latest version number from SPHttpClientConfigurations
     * @param options - additional options that affect the request
     * @returns A promise with behavior similar to WHATWG fetch().  This promise will resolve normally
     * (with {@link HttpClientResponse.ok} being false) for error status codes such as HTTP 404
     * or 500.  The promise will only reject for network failures or other errors that prevent communication
     * with the server.
     */
    post(url: string, configuration: SPHttpClientConfiguration, options: ISPHttpClientOptions): Promise<SPHttpClientResponse>;
    /* Excluded from this release type: beginBatch */
    private _fetchWithInstrumentation(configuration, request);
    private readonly _logSourceId;
}

/* Excluded from this release type: SPHttpClientBatch */

/* Excluded from this release type: SPHttpClientBatchConfiguration */

/**
 * Common base class for SPHttpClientConfiguration and SPHttpClientBatchConfiguration.
 *
 * @public
 */
export declare class SPHttpClientCommonConfiguration extends HttpClientConfiguration implements ISPHttpClientCommonConfiguration {
    protected flags: ISPHttpClientCommonConfiguration;
    /**
     * Constructs a new instance of SPHttpClientCommonConfiguration with the specified flags.
     *
     * @remarks
     * The default values will be used for any flags that are missing or undefined.
     * If overrideFlags is specified, it takes precedence over flags.
     */
    constructor(flags: ISPHttpClientCommonConfiguration, overrideFlags?: ISPHttpClientCommonConfiguration);
    overrideWith(sourceFlags: ISPHttpClientCommonConfiguration): SPHttpClientCommonConfiguration;
    /**
     * {@inheritdoc ISPHttpClientCommonConfiguration.jsonRequest}
     */
    readonly jsonRequest: boolean;
    /**
     * {@inheritdoc ISPHttpClientCommonConfiguration.jsonResponse}
     */
    readonly jsonResponse: boolean;
    protected initializeFlags(): void;
}

/**
 * Configuration for {@link SPHttpClient}.
 *
 * @remarks
 * The SPHttpClientConfiguration object provides a set of switches for enabling/disabling
 * various features of the SPHttpClient class.  Normally these switches are set
 * (e.g. when calling SPHttpClient.fetch()) by providing one of the predefined defaults
 * from SPHttpClientConfigurations, however switches can also be changed via the
 * SPHttpClientConfiguration.overrideWith() method.
 *
 * @public
 */
export declare class SPHttpClientConfiguration extends SPHttpClientCommonConfiguration implements ISPHttpClientConfiguration {
    protected flags: ISPHttpClientConfiguration;
    /**
     * Constructs a new instance of SPHttpClientConfiguration with the specified flags.
     * The default values will be used for any flags that are missing or undefined.
     * If overrideFlags is specified, it takes precedence over flags.
     */
    constructor(flags: ISPHttpClientConfiguration, overrideFlags?: ISPHttpClientConfiguration);
    overrideWith(sourceFlags: ISPHttpClientConfiguration): SPHttpClientConfiguration;
    /**
     * {@inheritdoc ISPHttpClientConfiguration.defaultSameOriginCredentials}
     */
    readonly defaultSameOriginCredentials: boolean;
    /**
     * {@inheritdoc ISPHttpClientConfiguration.defaultODataVersion}
     */
    readonly defaultODataVersion: ODataVersion;
    /**
     * {@inheritdoc ISPHttpClientConfiguration.requestDigest}
     */
    readonly requestDigest: boolean;
    protected initializeFlags(): void;
}

/**
 * The Response subclass returned by methods such as SPHttpClient.fetch().
 *
 * @remarks
 * This is a placeholder.  In the future, additional SPHttpClient-specific functionality
 * may be added to this class.
 *
 * @public
 */
export declare class SPHttpClientResponse extends HttpClientResponse {
    private _correlationId;
    constructor(response: Response);
    clone(): SPHttpClientResponse;
    /* Excluded from this release type: correlationId */
    /* Excluded from this release type: statusMessage */
}

/* Excluded from this release type: SPHttpHeader */

/* Excluded from this release type: TokenAcquisitionEventArgs */
