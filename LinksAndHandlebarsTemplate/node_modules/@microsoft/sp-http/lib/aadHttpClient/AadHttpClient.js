import * as tslib_1 from "tslib";
import { Validate } from '@microsoft/sp-core-library';
import { override, sealed } from '@microsoft/decorators';
import { fetchProviderServiceKey } from '../httpClient/FetchProvider';
import HttpClientResponse from '../httpClient/HttpClientResponse';
import AadTokenProviders from '../oauthTokenProvider/AadTokenProviders';
import HttpClientHelper from '../httpClient/HttpClientHelper';
import { predefinedConfigurations } from './AadHttpClientConfiguration';
var AadHttpClient = (function () {
    function AadHttpClient(serviceScope, resourceEndpoint) {
        var _this = this;
        Validate.isNotNullOrUndefined(serviceScope, 'serviceScope');
        Validate.isNotNullOrUndefined(resourceEndpoint, 'resourceUrl');
        this._resourceUrl = resourceEndpoint;
        this._serviceScope = serviceScope;
        this._aadTokenProvider = AadTokenProviders.getConfigurable();
        serviceScope.whenFinished(function () {
            _this._fetchProvider = serviceScope.consume(fetchProviderServiceKey);
        });
    }
    AadHttpClient_1 = AadHttpClient;
    AadHttpClient.prototype.fetch = function (url, configuration, options) {
        var _this = this;
        return this._aadTokenProvider.getToken(this._resourceUrl).then(function (token) {
            if (!options.headers) {
                options.headers = new Headers();
            }
            options.headers.append('Authorization', 'Bearer ' + token);
            return HttpClientHelper.fetchCore(configuration, new Request(url, options), _this._serviceScope, _this._fetchProvider, AadHttpClient_1._className);
        }).then(function (value) {
            return new HttpClientResponse(value);
        });
    };
    AadHttpClient.prototype.get = function (url, configuration, options) {
        return this.fetch(url, configuration, HttpClientHelper.overrideHttpMethod(options, 'GET'));
    };
    AadHttpClient.prototype.post = function (url, configuration, options) {
        return this.fetch(url, configuration, HttpClientHelper.overrideHttpMethod(options, 'POST'));
    };
    AadHttpClient.configurations = predefinedConfigurations;
    AadHttpClient._className = 'AadHttpClient';
    tslib_1.__decorate([
        override
    ], AadHttpClient.prototype, "fetch", null);
    AadHttpClient = AadHttpClient_1 = tslib_1.__decorate([
        sealed
    ], AadHttpClient);
    return AadHttpClient;
    var AadHttpClient_1;
}());
export default AadHttpClient;
