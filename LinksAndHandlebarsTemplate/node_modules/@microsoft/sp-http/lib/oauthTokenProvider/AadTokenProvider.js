import * as tslib_1 from "tslib";
import { _QosMonitor } from '@microsoft/sp-diagnostics';
import { sealed } from '@microsoft/decorators';
import { Environment, EnvironmentType, Guid, SPEvent, SPEventArgs, UrlUtilities, Validate, _SPEventManager, _SPFlight, _SPKillSwitch } from '@microsoft/sp-core-library';
import strings from '../SPHttpStrings.resx';
var TokenAcquisitionEventArgs = (function (_super) {
    tslib_1.__extends(TokenAcquisitionEventArgs, _super);
    function TokenAcquisitionEventArgs(message, redirectUrl) {
        var _this = _super.call(this) || this;
        _this.message = message;
        _this.redirectUrl = redirectUrl;
        return _this;
    }
    return TokenAcquisitionEventArgs;
}(SPEventArgs));
export { TokenAcquisitionEventArgs };
var AadTokenProvider = (function () {
    function AadTokenProvider(parameters) {
        this._displayCallHandler = undefined;
        this._loadAndConfigureAdalJsModulePromise = undefined;
        this._loginUserPromise = undefined;
        Validate.isNonemptyString(parameters.aadInstanceUrl, 'aadInstanceUrl');
        Validate.isNonemptyString(parameters.aadTenantId, 'aadTenantId');
        Validate.isNonemptyString(parameters.redirectUri, 'redirectUri');
        Validate.isNonemptyString(parameters.servicePrincipalId, 'servicePrincipalId');
        this._aadInstanceUrl = UrlUtilities.removeEndSlash(parameters.aadInstanceUrl);
        this._aadTenantId = parameters.aadTenantId;
        this._aadUserId = parameters.aadUserId;
        this._popupRedirectUri = parameters.popupRedirectUri;
        this._redirectUri = parameters.redirectUri;
        this._servicePrincipalId = parameters.servicePrincipalId;
        this._tokenAcquisitionEvent = new SPEvent(AadTokenProvider_1._tokenAcquisitionEventId);
    }
    AadTokenProvider_1 = AadTokenProvider;
    AadTokenProvider.prototype.getToken = function (resourceEndpoint) {
        var _this = this;
        if (!DATACENTER ||
            Environment.type === EnvironmentType.Local ||
            !_SPFlight.isEnabled(375 )) {
            return Promise.reject(new Error('The requested operation is part of an experimental feature ' +
                'that is not supported in the current environment.'));
        }
        return this._loginUser().then(function () {
            return _this._acquireTokenPromise(resourceEndpoint).then(function (token) {
                return token.token;
            });
        });
    };
    Object.defineProperty(AadTokenProvider.prototype, "tokenAcquisitionEvent", {
        get: function () {
            return this._tokenAcquisitionEvent;
        },
        enumerable: true,
        configurable: true
    });
    AadTokenProvider.prototype._acquireTokenPromise = function (resourceEndpoint) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var acquireAccessTokenQosMonitor = new _QosMonitor('AadTokenProvider.AcquireAccessToken');
            AadTokenProvider_1._authContext.config.redirectUri = _this._redirectUri;
            AadTokenProvider_1._authContext.acquireToken(resourceEndpoint, function (message, token) {
                if (!token) {
                    if (AadTokenProvider_1._authContext._getItem(AadTokenProvider_1._authContext.CONSTANTS.STORAGE.ERROR) === 'interaction_required') {
                        var urlNavigate = AadTokenProvider_1._authContext._getNavigateUrl(AadTokenProvider_1._authContext.RESPONSE_TYPE.TOKEN, resourceEndpoint) +
                            '&prompt=select_account';
                        _SPEventManager.instance.raiseEvent(AadTokenProvider_1._tokenAcquisitionEventId, new TokenAcquisitionEventArgs(strings.multiFactorAuthenticationWarning, urlNavigate));
                    }
                    reject(new Error(message));
                }
                else {
                    if (message) {
                        acquireAccessTokenQosMonitor.writeSuccess({ 'Message': message });
                    }
                    else {
                        acquireAccessTokenQosMonitor.writeSuccess();
                    }
                    resolve({
                        message: message,
                        token: token
                    });
                }
            });
        });
    };
    AadTokenProvider.prototype._loadAndConfigureAdalJsModule = function () {
        var _this = this;
        if (!this._loadAndConfigureAdalJsModulePromise) {
            this._loadAndConfigureAdalJsModulePromise = import( 'adal-angular')
                .then(function (adalJsModule) {
                _this._configureAdalJs(adalJsModule);
                return adalJsModule;
            });
        }
        return this._loadAndConfigureAdalJsModulePromise;
    };
    AadTokenProvider.prototype._configureAdalJs = function (adalJsModule) {
        var _this = this;
        AadTokenProvider_1._authContext = adalJsModule.inject({
            clientId: this._servicePrincipalId,
            redirectUri: this._popupRedirectUri || this._redirectUri,
            instance: this._aadInstanceUrl + '/',
            tenant: this._aadTenantId,
            navigateToLoginRequestUrl: false,
            displayCall: function (urlNavigate) {
                if (_this._displayCallHandler) {
                    _this._displayCallHandler({
                        urlNavigate: urlNavigate,
                        redirectUri: _this._popupRedirectUri || _this._redirectUri
                    });
                }
            }
        });
    };
    AadTokenProvider.prototype._startLogin = function (showWindowCallback) {
        if (this._displayCallHandler) {
            return; 
        }
        this._displayCallHandler = function (args) {
            showWindowCallback(args);
        };
        AadTokenProvider_1._authContext._loginInProgress = false;
        AadTokenProvider_1._authContext.login();
        this._displayCallHandler = undefined;
        return;
    };
    AadTokenProvider.prototype._loginUser = function () {
        var _this = this;
        if (this._loginUserPromise) {
            return this._loginUserPromise;
        }
        return this._loadAndConfigureAdalJsModule()
            .then(function (adalJsModule) {
            Validate.isNotNullOrUndefined(AadTokenProvider_1._authContext, 'AuthenticationContext');
            var cachedUser = AadTokenProvider_1._authContext.getCachedUser();
            if (_this._aadUserId && cachedUser && cachedUser.profile && cachedUser.profile.oid === _this._aadUserId) {
                return; 
            }
            else {
                if (!_SPKillSwitch.isActivated(AadTokenProvider_1._acquireTokenSilentGuid, 'Acquire Token silently', '3/23/18') &&
                    !DEPRECATED_UNIT_TEST) {
                    _this._loginUserPromise = _this._fetchIdTokenSilent();
                }
                else {
                    _this._loginUserPromise = _this._fetchIdTokenPopup();
                }
                return _this._loginUserPromise;
            }
        });
    };
    AadTokenProvider.prototype._fetchIdTokenSilent = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var acquireIdTokenMonitor = new _QosMonitor('AadTokenProvider.AcquireIdTokenSilent');
            var acquireIdTokenTagNameSuffix = 'AcquireIdTokenSilent';
            AadTokenProvider_1._authContext._renewToken(_this._servicePrincipalId, function (message, token) {
                if (!token) {
                    acquireIdTokenMonitor.writeUnexpectedFailure(acquireIdTokenTagNameSuffix, new Error(message));
                    _this._fetchIdTokenPopup().then(resolve, reject);
                }
                else {
                    acquireIdTokenMonitor.writeSuccess();
                    resolve();
                }
            }, AadTokenProvider_1._authContext.RESPONSE_TYPE.ID_TOKEN_TOKEN);
        });
    };
    AadTokenProvider.prototype._fetchIdTokenPopup = function () {
        var _this = this;
        var acquireIdTokenMonitor = new _QosMonitor('AadTokenProvider.AcquireIdTokenPopup');
        var acquireIdTokenTagNameSuffix = 'AcquireIdTokenPopup';
        this._startLogin(function (args) {
            var popupWindow = window.open(args.urlNavigate, 'login', 'width=483, height=600');
            if (!popupWindow) {
                var popUpDidNotOpenError = new Error('Failed to open pop-up window');
                acquireIdTokenMonitor.writeExpectedFailure(acquireIdTokenTagNameSuffix, popUpDidNotOpenError);
                _SPEventManager.instance.raiseEvent(AadTokenProvider_1._tokenAcquisitionEventId, { message: strings.disablePopUpBlockerWarning });
                throw popUpDidNotOpenError;
            }
            if (popupWindow.closed === undefined) {
                var popUpClosedPropertyMissingError = new Error('This operation requires the popupWindow.closed property, which is not supported in this browser');
                acquireIdTokenMonitor.writeExpectedFailure(acquireIdTokenTagNameSuffix, popUpClosedPropertyMissingError);
                throw popUpClosedPropertyMissingError;
            }
            if (popupWindow.focus) {
                popupWindow.focus();
            }
            _this._loginUserPromise = _this._waitForWindowToClose(popupWindow, args)
                .then(function () {
                acquireIdTokenMonitor.writeSuccess();
                _this._loginUserPromise = undefined;
            }).catch(function (e) {
                acquireIdTokenMonitor.writeExpectedFailure(acquireIdTokenTagNameSuffix, e);
                _this._loginUserPromise = undefined;
                throw e;
            });
        });
        if (!this._loginUserPromise) {
            var unreachableError = new Error('Should be impossible.');
            acquireIdTokenMonitor.writeUnexpectedFailure(acquireIdTokenTagNameSuffix, unreachableError);
            throw unreachableError;
        }
        return this._loginUserPromise;
    };
    AadTokenProvider.prototype._waitForWindowToClose = function (popupWindow, args) {
        return new Promise(function (resolve, reject) {
            var WINDOW_POLL_MS = 10;
            var ATTEMPTS_TO_POLL_WINDOW = !DEPRECATED_UNIT_TEST ? 500 : 1;
            try {
                var currentNumberOfPollAttempts_1 = 0;
                var pollTimer_1 = window.setInterval(function () {
                    if (currentNumberOfPollAttempts_1 === ATTEMPTS_TO_POLL_WINDOW) {
                        window.clearInterval(pollTimer_1);
                        popupWindow.close();
                        reject(new Error('Login popup failed to redirect to the designated redirect uri.'));
                        return;
                    }
                    if (popupWindow.closed) {
                        window.clearInterval(pollTimer_1);
                        reject(new Error('Window closed without authenticating'));
                        return;
                    }
                    if (popupWindow.document.URL.indexOf(args.redirectUri) !== -1) {
                        window.clearInterval(pollTimer_1);
                        if (!popupWindow.location.hash) {
                            popupWindow.close();
                            reject(new Error('Login popup redirected to the redirect uri but no id token was found.'));
                            return;
                        }
                        AadTokenProvider_1._authContext.handleWindowCallback(popupWindow.location.hash);
                        popupWindow.close();
                        resolve();
                        return;
                    }
                    currentNumberOfPollAttempts_1++;
                }, WINDOW_POLL_MS);
            }
            catch (e) {
                reject(e);
            }
        });
    };
    AadTokenProvider._tokenAcquisitionEventId = 'tokenAcquisitionFailure';
    AadTokenProvider._acquireTokenSilentGuid = Guid.parse('0f891667-e383-4740-ab31-e77cc48a4e41');
    AadTokenProvider = AadTokenProvider_1 = tslib_1.__decorate([
        sealed
    ], AadTokenProvider);
    return AadTokenProvider;
    var AadTokenProvider_1;
}());
export default AadTokenProvider;
