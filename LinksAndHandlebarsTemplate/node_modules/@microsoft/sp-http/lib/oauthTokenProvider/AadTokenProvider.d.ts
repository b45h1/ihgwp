/// <reference types="adal" />
import { SPEvent, SPEventArgs } from '@microsoft/sp-core-library';
/**
 * Represents arguments used for raising a token acquisiton failure event.
 * @beta
 */
export declare class TokenAcquisitionEventArgs extends SPEventArgs {
    /**
     * The message returned from ADAL fails to retrieve a token from Azure AD.
     */
    message: string;
    /**
   * The url of the page for the end user to perform Multi Factor Authentication
   */
    redirectUrl?: string;
    constructor(message: string, redirectUrl?: string);
}
/**
 * This class allows a developer to obtain OAuth2 tokens from Azure AD.
 *
 * OAuth2 tokens are used to authenticate the user from the SharePoint page
 * to other services such as PowerBI, Sway, Exchange, Yammer, etc.
 *
 * @remarks
 * AadTokenProvider is replacing the /_api.SP.OAuth.Token/Acquire endpoint
 * for authentication with ADAL.js. At some point in the near future, when Azure AD v2.0
 * can support the same scenarios as the original version, we will switch to MSAL.
 *
 * @beta
 */
export default class AadTokenProvider {
    /**
     * Adal.js authentication object with exposed internal methods/properties.
     * @internal
     */
    protected static _authContext: IAuthenticationContextInternal;
    private static _tokenAcquisitionEventId;
    private static _acquireTokenSilentGuid;
    /**
     * Handles the adal.Config.displayCall event. It is set to protected so that it can
     * be mocked in a unit test.
     * @internal
     */
    protected _displayCallHandler: ((args: IDisplayCallHandlerArgs) => void) | undefined;
    /**
     * Handles the loading of Adal.js. It is set to protected so that it can
     * be mocked in a unit test.
     * @internal
     */
    protected _loadAndConfigureAdalJsModulePromise: Promise<IAdalJsModule> | undefined;
    private _loginUserPromise;
    private _tokenAcquisitionEvent;
    private readonly _aadInstanceUrl;
    private readonly _aadTenantId;
    private readonly _aadUserId;
    private readonly _popupRedirectUri;
    private readonly _redirectUri;
    private readonly _servicePrincipalId;
    constructor(parameters: IAadTokenProviderParameters);
    /**
     * Fetches the AAD OAuth2 token for a resource if the user that's currently logged in has
     * access to that resource.
     *
     * The OAuth2 token SHOULD NOT be cached by the caller since it is already cached by the method
     * itself.
     *
     * An example of a resourceEndpoint would be https://sdfpilot.outlook.com
     *
     * @param resourceEndpoint - the resource for which the token should be obtained
     * @returns A promise that will be fullfiled with the token or that will reject
     *          with an error message
     */
    getToken(resourceEndpoint: string): Promise<string>;
    /**
     * Notifies the developer when Token Acquistion requires user action.
     * @beta
     */
    readonly tokenAcquisitionEvent: SPEvent<TokenAcquisitionEventArgs>;
    private _acquireTokenPromise(resourceEndpoint);
    private _loadAndConfigureAdalJsModule();
    private _configureAdalJs(adalJsModule);
    /**
     * Calls _authContext.login() and wires up the displayCall callback.  Returns true if the
     * callback was called.
     */
    private _startLogin(showWindowCallback);
    private _loginUser();
    private _fetchIdTokenSilent();
    private _fetchIdTokenPopup();
    private _waitForWindowToClose(popupWindow, args);
}
/**
 * Required strings for constructing an AadTokenProvider.
 * @beta
 */
export interface IAadTokenProviderParameters {
    /**
     * The sign in page used to authenticate with Azure Active Directory. Trailing slashes are forbidden.
     */
    aadInstanceUrl: string;
    /**
     * The Azure Active Directory's tenant id.
     */
    aadTenantId: string;
    /**
     * The user's Azure Active Directory id. This will be used to ensure that a valid cached token is for
     * the current user.
     */
    aadUserId?: string;
    /**
     * The page used to retrieve tokens from Azure Active Directory. This url must be listed in
     * the developer's application redirect uris. This url will be used for acquiring a id token in a
     * popup.
     * @alpha
     */
    popupRedirectUri?: string;
    /**
     * The client ID of the developer's Azure Active Directory application.
     */
    servicePrincipalId: string;
    /**
     * The page used to retrieve tokens from Azure Active Directory. This url must be listed in
     * the developer's application redirect uris.
     */
    redirectUri: string;
}
/**
 * Represents the exported module from the adal-angular npm package.
 * @internal
 */
export interface IAdalJsModule {
    inject: (configuration: adal.Config) => adal.AuthenticationContext;
}
/**
 * Interface for interacting with internals of ADAL.js
 * @internal
 */
export interface IAuthenticationContextInternal extends adal.AuthenticationContext {
    _loginInProgress: boolean;
    CONSTANTS: {
        STORAGE: {
            ERROR: string;
        };
    };
    RESPONSE_TYPE: {
        TOKEN: string;
        ID_TOKEN_TOKEN: string;
    };
    handleWindowCallback(hash?: string): void;
    _getItem(storageConstant: string): string;
    _getNavigateUrl(responseType: string, resourceEndpoint: string): string;
    _renewToken(resource: string, callback: (message: string, token: string) => void, responseType: string): void;
}
/**
 * Represents arguments used for raising a token acquisiton failure event.
 * @internal
 */
export interface ITokenAcquisitionFailureEventArgs extends SPEventArgs {
    /**
     * The message returned from ADAL fails to retrieve a token from Azure AD.
     */
    errorMessage: string;
    /**
     * The url of the page for the end user to perform Multi Factor Authentication
     */
    redirectUrl?: string;
}
/**
 * Represents arguments used for monitoring the status of popup window.
 * @internal
 */
export interface IDisplayCallHandlerArgs {
    urlNavigate: string;
    redirectUri: string;
}
