{"version":3,"sources":["rules/importRequiresChunkNameRule.ts"],"names":[],"mappings":"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","file":"importRequiresChunkNameRule.js","sourcesContent":["import {\r\n  isCallExpression,\r\n  forEachComment\r\n} from 'tsutils';\r\nimport * as ts from 'typescript';\r\nimport * as Lint from 'tslint';\r\n\r\n/**\r\n * Matches parts of the webpack import(...) meta-comment that look like these examples:\r\n *  - propertyName:'value'\r\n *  - propertyName: 'value'\r\n *  - propertyName:\"value\"\r\n *  - propertyName: \"value\"\r\n *  - propertyName :'value'\r\n *  - propertyName : 'value'\r\n *  - propertyName :\"value\"\r\n *  - propertyName : \"value\"\r\n */\r\nconst COMMENT_PART_REGEX: RegExp = /^([A-Za-z]+)\\s*:\\s*('[^']+'|\"[^\"]+\")$/;\r\n\r\n/**\r\n * This rule requires that import(...) statements include a /* webpackChunkName: '...' *\\/ comment.\r\n *\r\n * See documentation here: https://webpack.js.org/api/module-methods/#import-\r\n */\r\nexport class Rule extends Lint.Rules.AbstractRule {\r\n  public static metadata: Lint.IRuleMetadata = {\r\n    ruleName: 'import-requires-chunk-name',\r\n    description: 'Requires that calls to import(...) for code splitting include a webpack chunk name',\r\n    rationale: 'Unnamed chunks are difficult to manage.',\r\n    optionsDescription: 'No options available.',\r\n    options: {},\r\n    type: 'functionality',\r\n    typescriptOnly: false\r\n  };\r\n\r\n  public apply(sourceFile: ts.SourceFile): Lint.RuleFailure[] {\r\n    return this.applyWithFunction(\r\n      sourceFile,\r\n      (ctx: Lint.WalkContext<void>) => {\r\n        const childCallback: (node: ts.Node) => void = (node: ts.Node) => {\r\n          if (\r\n            isCallExpression(node) &&\r\n            node.expression.kind === ts.SyntaxKind.ImportKeyword &&\r\n            node.getChildCount() >= 4 // 4+ children: keyword, openParen, args..., closeParen\r\n          ) {\r\n            // In an import(...) expression\r\n\r\n            const comments: string[] = [];\r\n            forEachComment(node, (text: string, comment: ts.CommentRange) => {\r\n              comments.push(text.substring(comment.pos, comment.end));\r\n            });\r\n\r\n            let webpackChunkNameTokensFound: number = 0;\r\n            for (const rawComment of comments) {\r\n              let comment: string = rawComment.trim();\r\n              if (comment.indexOf('//') === 0) {\r\n                comment = comment.substr(2);\r\n              } else if (comment.indexOf('/*') === 0 && comment.indexOf('*/') === comment.length - 2) {\r\n                comment = comment.substring(2, comment.length - 2);\r\n              }\r\n\r\n              const commentParts: string[] = comment.split(',');\r\n              for (let commentPart of commentParts) {\r\n                commentPart = commentPart.trim();\r\n                const commentRegexResult: string[] = commentPart.match(COMMENT_PART_REGEX);\r\n                if (commentRegexResult && commentRegexResult[1] === 'webpackChunkName') {\r\n                  webpackChunkNameTokensFound++;\r\n                }\r\n              }\r\n            }\r\n\r\n            if (webpackChunkNameTokensFound === 0) {\r\n              ctx.addFailureAtNode(\r\n                node.expression,\r\n                'Calls to \"import\" must include a /* webpackChunkName: \\'name\\' */ comment'\r\n              );\r\n            } else if (webpackChunkNameTokensFound !== 1) {\r\n              ctx.addFailureAtNode(\r\n                node.expression,\r\n                'Calls to \"import\" must include only one /* webpackChunkName: \\'name\\' */ comment'\r\n              );\r\n            }\r\n          }\r\n\r\n          return ts.forEachChild(node, childCallback);\r\n        };\r\n\r\n        return ts.forEachChild(ctx.sourceFile, childCallback);\r\n      }\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"../../../src"}