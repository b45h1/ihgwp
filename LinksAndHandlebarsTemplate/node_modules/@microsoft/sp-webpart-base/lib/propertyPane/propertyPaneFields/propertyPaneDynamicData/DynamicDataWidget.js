import * as tslib_1 from "tslib";
import * as React from 'react';
import { TextField } from '@microsoft/office-ui-fabric-react-bundle';
import { Dropdown } from 'office-ui-fabric-react/lib/components/Dropdown/Dropdown';
import { DynamicProperty, DynamicDataProvider } from '@microsoft/sp-component-base';
var DynamicDataWidget = (function (_super) {
    tslib_1.__extends(DynamicDataWidget, _super);
    function DynamicDataWidget(props) {
        var _this = _super.call(this, props) || this;
        var sourceId = props.entries
            .map(function (entry) { return entry.dynamicProperty ? entry.dynamicProperty._getSourceId() : ''; })
            .reduce(function (prev, next) { return prev || next; }, '');
        var selectedValues = {};
        for (var i = 0; i < props.entries.length; i++) {
            var targetProperty = props.entries[i].targetProperty;
            var label = props.entries[i].label || 'Unnamed property';
            var dynamicProperty = props.entries[i].dynamicProperty;
            selectedValues[targetProperty] = {
                property: dynamicProperty ? dynamicProperty._getProperty() : '',
                dynamicProperty: dynamicProperty,
                label: label
            };
        }
        _this.state = {
            sourceId: sourceId,
            selectedValues: selectedValues
        };
        _this._onPropertyChange = _this._onPropertyChange.bind(_this);
        return _this;
    }
    DynamicDataWidget.prototype.render = function () {
        var _this = this;
        this._getDataSources();
        var dropDowns = [];
        for (var targetProperty in this.state.selectedValues) {
            if (this.state.selectedValues.hasOwnProperty(targetProperty)) {
                var selectedValue = this.state.selectedValues[targetProperty];
                dropDowns.push(React.createElement("div", null,
                    React.createElement(Dropdown, { label: selectedValue.label, onChanged: this._onPropertyChange.bind(this, targetProperty), options: this._getDynamicDataProperties(this.state.sourceId || ''), selectedKey: selectedValue.property })));
                if (DynamicDataProvider._isDynamicDataEnabled()) {
                    dropDowns.push(React.createElement("div", null,
                        React.createElement("p", null, "Write a hardcoded value for the property:"),
                        React.createElement(TextField, { onChanged: this._onValueChange.bind(this, targetProperty) })));
                }
            }
        }
        return (React.createElement("div", null,
            React.createElement("div", null,
                React.createElement(Dropdown, { label: 'Data source', onChanged: function (option) { _this.setState({ sourceId: option.key }); }, options: this._getDataSourcesDropdown(), selectedKey: this.state.sourceId })),
            dropDowns));
    };
    DynamicDataWidget.prototype._getDataSources = function () {
        this._sources = this.props.dynamicDataProvider.getAvailableSources();
    };
    DynamicDataWidget.prototype._getDataSourcesDropdown = function () {
        var options = [];
        this._sources.forEach(function (source) { return options.push({ key: source.id, text: source.metadata.title }); });
        return options;
    };
    DynamicDataWidget.prototype._getDynamicDataProperties = function (sourceId) {
        if (!sourceId) {
            return [];
        }
        var source = this.props.dynamicDataProvider.tryGetSource(sourceId);
        if (!source) {
            return [];
        }
        var data = source.getPropertyDefinitions();
        var options = [];
        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
            var propertyDef = data_1[_i];
            options.push({ key: propertyDef.id, text: propertyDef.title });
        }
        return options;
    };
    DynamicDataWidget.prototype._onValueChange = function (targetProperty, value 
    ) {
        if (!this.state.selectedValues[targetProperty].dynamicProperty) {
            this.state.selectedValues[targetProperty].dynamicProperty = new DynamicProperty(this.props.dynamicDataProvider, this.props.defaultCallback);
        }
        var dynamicProperty = this.state.selectedValues[targetProperty].dynamicProperty;
        dynamicProperty.setValue(value);
        var newSelectedValues = this.state.selectedValues;
        newSelectedValues[targetProperty] = {
            property: '',
            dynamicProperty: dynamicProperty,
            label: this.state.selectedValues[targetProperty].label 
        };
        this.setState({
            selectedValues: newSelectedValues
        });
        this.props.onChange(targetProperty, dynamicProperty);
    };
    DynamicDataWidget.prototype._onPropertyChange = function (targetProperty, option) {
        if (!this.state.selectedValues[targetProperty].dynamicProperty) {
            this.state.selectedValues[targetProperty].dynamicProperty = new DynamicProperty(this.props.dynamicDataProvider, this.props.defaultCallback);
        }
        var selectedDynamicDataProperty = option.key;
        var dynamicProperty = this.state.selectedValues[targetProperty].dynamicProperty;
        dynamicProperty.setReference(this._getDataReference(targetProperty, selectedDynamicDataProperty));
        var newSelectedValues = this.state.selectedValues;
        newSelectedValues[targetProperty] = {
            property: selectedDynamicDataProperty,
            dynamicProperty: dynamicProperty,
            label: this.state.selectedValues[targetProperty].label 
        };
        this.setState({
            selectedValues: newSelectedValues
        });
        this.props.onChange(targetProperty, dynamicProperty);
    };
    DynamicDataWidget.prototype._getDataReference = function (targetProperty, property) {
        return this.state.sourceId + ":" + (property || this.state.selectedValues[targetProperty].property);
    };
    return DynamicDataWidget;
}(React.Component));
export default DynamicDataWidget;
