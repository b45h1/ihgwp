'use strict';
import * as tslib_1 from "tslib";
import { virtual } from '@microsoft/decorators';
import * as lodash from '@microsoft/sp-lodash-subset';
import { _QosMonitor, _PerformanceLogger, _EngagementLogger } from '@ms/sp-telemetry';
import { _LogSource, _LogType, _LogEntry, _TraceLogger } from '@microsoft/sp-diagnostics';
import { _SPKillSwitch, DisplayMode, Environment, Guid, Text, Validate, Version } from '@microsoft/sp-core-library';
import { BaseComponent, DynamicProperty } from '@microsoft/sp-component-base';
import { PropertyPaneFieldType } from '../propertyPane/propertyPaneFields/propertyPaneField/IPropertyPaneField';
import { SPWebPartError, SPWebPartErrorCode } from './error/SPWebPartError';
import { deepFreeze } from '../utils/Object';
import { executeAndReThrow } from '../utils/ExecuteAndReThrow';
import ClassicPageUtils from './classicPages/ClassicPageUtils';
import ViewportLoader from './ViewportLoader';
import strings from './loc/Strings.resx';
import baseStyles from './styles/cswp-base.module.scss';
var BaseClientSideWebPart = (function (_super) {
    tslib_1.__extends(BaseClientSideWebPart, _super);
    function BaseClientSideWebPart() {
        var _this = _super.call(this) || this;
        _this._initialized = false;
        _this._logSource = _LogSource.create('BaseClientSideWebPart');
        _this._internalIsInViewport = false;
        _this._hasEditLogged = false;
        _this._asyncRenderQosMonitor = new _QosMonitor("WebPartAsyncRender");
        _this._emptyResolvedPromise = Promise.resolve();
        if (_this.constructor['name'] === 'BaseClientSideWebPart') {
            throw SPWebPartError.create(SPWebPartErrorCode.BaseConstructError);
        }
        return _this;
    }
    Object.defineProperty(BaseClientSideWebPart.prototype, "domElement", {
        get: function () { return this.context.domElement; },
        set: function (o) { this._throwReadOnlyError(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "width", {
        get: function () {
            if (this._width === undefined) {
                var width = window.getComputedStyle(this.domElement).width;
                this._width = width ? parseFloat(width) : 0;
            }
            return this._width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "dataVersion", {
        get: function () {
            return Version.parse('1.0');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "displayMode", {
        get: function () { return this._displayMode; },
        set: function (o) { this._throwReadOnlyError(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "properties", {
        get: function () {
            if (this._initialized) {
                return this._properties;
            }
            else {
                throw SPWebPartError.create(SPWebPartErrorCode.NotInitializedError);
            }
        },
        set: function (o) { this._throwReadOnlyError(); },
        enumerable: true,
        configurable: true
    });
    BaseClientSideWebPart.prototype._calculateMinimumHeight = function () {
        if (this.context && this.context.manifest && this.context.manifest.isInternal) {
            _TraceLogger.logVerbose(this._logSource, "Web part " + this.context.webPartTag + " should override _calculateMinimumHeight()");
        }
        return undefined;
    };
    Object.defineProperty(BaseClientSideWebPart.prototype, "propertiesMetadata", {
        get: function () { return undefined; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "renderedOnce", {
        get: function () { return this._renderedOnce; },
        set: function (o) { this._throwReadOnlyError(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "renderedFromPersistedData", {
        get: function () { return this._renderedFromPersistedData; },
        set: function (o) { this._throwReadOnlyError(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "canOpenPopupOnRender", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "disableReactivePropertyChanges", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "previewImageUrl", {
        get: function () { return undefined; },
        set: function (o) { this._throwReadOnlyError(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "accessibleTitle", {
        get: function () { return this._getDefaultAccessibleTitle(); },
        set: function (o) { this._throwReadOnlyError(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "title", {
        get: function () { return this._title; },
        set: function (o) { this._throwReadOnlyError(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "description", {
        get: function () { return this._description; },
        set: function (o) { this._throwReadOnlyError(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "isRenderAsync", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "propertyPaneRenderedByWebPart", {
        set: function (o) { this._throwReadOnlyError(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "persistedProperties", {
        get: function () {
            return this._backupProperties ? this._backupProperties : this.properties;
        },
        set: function (o) { this._throwReadOnlyError(); },
        enumerable: true,
        configurable: true
    });
    BaseClientSideWebPart.prototype._getPropertyPaneData = function () {
        var _this = this;
        return this._loadPropertyPaneResources().then(function () {
            var configuration = _this.getPropertyPaneConfiguration();
            _this._fixUpDynamicDataConfiguration(configuration);
            return {
                webPartId: _this.context.instanceId,
                title: _this.title,
                isReactive: !_this.disableReactivePropertyChanges,
                configuration: configuration,
                properties: lodash.cloneDeep(_this.properties),
                onPropertyPaneFieldChanged: undefined,
                onConfigurationEvent: undefined,
                onRendered: _this.onPropertyPaneRendered
            };
        });
    };
    BaseClientSideWebPart.prototype._loadPropertyPaneResources = function () {
        if (!this._loadPropertyPaneResourcesPromise) {
            this._loadPropertyPaneResourcesPromise = this.loadPropertyPaneResources();
        }
        return this._loadPropertyPaneResourcesPromise;
    };
    BaseClientSideWebPart.prototype.onInit = function () {
        return Promise.resolve(undefined);
    };
    BaseClientSideWebPart.prototype.renderCompleted = function () {
        this._renderCompleted();
    };
    BaseClientSideWebPart.prototype.onDisplayModeChanged = function (oldDisplayMode) {
        var qos = new _QosMonitor('BaseClientSideWebpart.onDisplayModeChanged');
        var extraData = { 'mode': oldDisplayMode };
        if (oldDisplayMode === this.displayMode) {
            qos.writeUnexpectedFailure('SameMode', undefined , extraData);
            return;
        }
        qos.writeSuccess(extraData);
        this._renderWithAccessibleTitle();
    };
    BaseClientSideWebPart.prototype.onBeforeSerialize = function () {
        return undefined;
    };
    BaseClientSideWebPart.prototype.onAfterDeserialize = function (deserializedObject, dataVersion) {
        return deserializedObject;
    };
    BaseClientSideWebPart.prototype.onEvent = function (eventName, eventObject) {
    };
    BaseClientSideWebPart.prototype.loadPropertyPaneResources = function () {
        return this._emptyResolvedPromise;
    };
    BaseClientSideWebPart.prototype.getPropertyPaneConfiguration = function () {
        return {
            pages: []
        };
    };
    BaseClientSideWebPart.prototype.onDispose = function () {
        if (!this.context.host.isViewportLoadingDisabled && !this._internalIsInViewport) {
            ViewportLoader.instance.unregister(this);
        }
    };
    BaseClientSideWebPart.prototype.onPropertyPaneFieldChanged = function (propertyPath, oldValue, newValue) {
    };
    BaseClientSideWebPart.prototype.onPropertyPaneConfigurationStart = function () {
    };
    BaseClientSideWebPart.prototype.onPropertyPaneConfigurationComplete = function () {
    };
    BaseClientSideWebPart.prototype.onAfterPropertyPaneChangesApplied = function () {
    };
    BaseClientSideWebPart.prototype.onPropertyPaneRendered = function () {
    };
    BaseClientSideWebPart.prototype.onAfterResize = function (newWidth) {
    };
    BaseClientSideWebPart.prototype.renderError = function (error) {
        this.context.statusRenderer.clearLoadingIndicator(this.domElement);
        this.context.statusRenderer.renderError(this.domElement, error);
        _TraceLogger.logError(this._logSource, error);
    };
    BaseClientSideWebPart.prototype.clearError = function () {
        this.context.statusRenderer.clearError(this.domElement);
    };
    BaseClientSideWebPart.prototype._reInstateServerProcessedData = function (deserializedProperties, serverProcessedContent) {
        var _this = this;
        if (!deserializedProperties) {
            return {};
        }
        var fixedProperties = deserializedProperties;
        if (!this.renderedFromPersistedData) {
            return fixedProperties;
        }
        this._forEachPropertyWithMetaData(function (propPath, metadata) {
            if (_this.context.manifest.id !== 'b7dd04e1-19ce-4b24-9132-b60a1c2b910d'
                && metadata.isHtmlString) {
                lodash.set(fixedProperties, propPath, undefined);
            }
        }, fixedProperties);
        if (serverProcessedContent) {
            var htmlMaps = [
                serverProcessedContent.htmlStrings,
                serverProcessedContent.searchablePlainTexts,
                serverProcessedContent.imageSources,
                serverProcessedContent.links,
                serverProcessedContent.componentDependencies
            ];
            for (var _i = 0, htmlMaps_1 = htmlMaps; _i < htmlMaps_1.length; _i++) {
                var htmlMap = htmlMaps_1[_i];
                if (htmlMap) {
                    for (var propPath in htmlMap) {
                        var value = htmlMap[propPath];
                        if (typeof value === 'string') {
                            lodash.set(fixedProperties, propPath, value);
                        }
                    }
                }
            }
        }
        return fixedProperties;
    };
    BaseClientSideWebPart.prototype._forEachPropertyWithMetaData = function (metadataProcessor, properties ) {
        if (this.propertiesMetadata) {
            var _loop_1 = function (propPath) {
                var metadata = this_1.propertiesMetadata[propPath];
                this_1._validateAndIteratePath(propPath, properties || this_1.properties, function (fixedPropPath, index) {
                    metadataProcessor(fixedPropPath, metadata, index);
                });
            };
            var this_1 = this;
            for (var propPath in this.propertiesMetadata) {
                _loop_1(propPath);
            }
        }
    };
    BaseClientSideWebPart.prototype._validateAndIteratePath = function (propPath, properties,  propertyPathHandler) {
        var wildcardCount = (propPath.match(/\*/g) || []).length;
        if (wildcardCount > 1) {
            console.warn("Invalid property path: Multiple wildcards are not supported in property paths.\nEntry with path '" + propPath + "' got ignored in the properties metadata.");
            return;
        }
        else if (wildcardCount === 1) {
            var index = propPath.indexOf('[*]');
            if (index < -1) {
                console.warn("Invalid property path: Wildcards are only supported inside brackets to select array\nindices as in 'foo[*].bar'. Entry with path '" + propPath + "' got ignored in the properties metadata.");
                return;
            }
            else {
                var arrayPath = propPath.substr(0, index);
                var arrayInstance = lodash.get(properties, arrayPath);
                if (!arrayInstance) {
                    console.warn("Invalid property path: Could not find an array named '" + arrayPath + "' in the properties.\nEntry with path '" + propPath + "' got ignored in the properties metadata.");
                    return;
                }
                else {
                    for (var i = 0; i < arrayInstance.length; i++) {
                        var fixedPropPath = propPath.replace('*', "" + i);
                        propertyPathHandler(fixedPropPath, i);
                    }
                }
            }
        }
        else {
            propertyPathHandler(propPath);
        }
    };
    BaseClientSideWebPart.prototype._foreachCustomMetadata = function (metadata, iteration, customMetadataProcessor, properties ) {
        if (metadata && metadata.customMetadata) {
            var _loop_2 = function (propName) {
                var propPath = metadata.customMetadata[propName];
                if (iteration !== undefined && propPath.indexOf('*') !== -1) {
                    propPath = propPath.replace('*', iteration.toString());
                }
                this_2._validateAndIteratePath(propPath, properties || this_2.properties, function (fixedPropPath, customIteration) {
                    if (customIteration === undefined && metadata.customMetadata) {
                        customMetadataProcessor(fixedPropPath, propName);
                    }
                });
            };
            var this_2 = this;
            for (var propName in metadata.customMetadata) {
                _loop_2(propName);
            }
        }
    };
    BaseClientSideWebPart.prototype._deserialize = function (data) {
        this._deserializeDynamicData(data);
        return this._reInstateServerProcessedData(data.properties, data.serverProcessedContent);
    };
    BaseClientSideWebPart.prototype._internalInitialize = function (webPartContext) {
        Validate.isNotNullOrUndefined(webPartContext, 'webPartContext');
        deepFreeze(webPartContext.manifest);
        _super.prototype._initializeContext.call(this, webPartContext);
        this._logEntry = 'BaseClientSideWebPart';
        _TraceLogger.logVerbose(this._logSource, Text.format(strings.ConstructLog, webPartContext.webPartTag));
        this._renderedOnce = false;
        this['__type'] = 'BaseClientSideWebPart';
        this.render = this.render.bind(this);
        this.onDispose = this.onDispose.bind(this);
        this.renderError = this.renderError.bind(this);
        this.clearError = this.clearError.bind(this);
        this.renderCompleted = this.renderCompleted.bind(this);
        this.onPropertyPaneRendered = this.onPropertyPaneRendered.bind(this);
        this._initialized = true;
    };
    BaseClientSideWebPart.prototype._internalDeserialize = function (data) {
        if (data) {
            if (data.title) {
                this._title = data.title;
            }
            if (data.description) {
                this._description = data.description;
            }
            if (typeof data.dataVersion !== 'string') {
                data.dataVersion = '1.0';
            }
            var deserializedData = {
                properties: data.properties,
                serverProcessedContent: data.serverProcessedContent,
                dynamicDataPaths: data.dynamicDataPaths,
                dynamicDataValues: data.dynamicDataValues,
                dataVersion: Version.tryParse(data.dataVersion)
            };
            var deserializedPropsObject = this._deserialize(deserializedData);
            var fixedProps = this.onAfterDeserialize(deserializedPropsObject, deserializedData.dataVersion);
            this._initPropertiesSnapshot = JSON.stringify(deserializedPropsObject);
            if (!fixedProps) {
                throw SPWebPartError.create(SPWebPartErrorCode.OnAfterDeserializeReturnedNull, this.context.webPartTag);
            }
            this._properties = fixedProps;
        }
    };
    BaseClientSideWebPart.prototype._internalFirstTimeRender = function (addedFromPersistedData, mode, qosMonitor, data, scrollableParent) {
        var _this = this;
        if (mode === void 0) { mode = DisplayMode.Read; }
        if (this._renderPromiseResolver) {
            throw SPWebPartError.create(SPWebPartErrorCode.FirstTimeRenderCalledMoreThanOnce, this.context.webPartTag);
        }
        _TraceLogger.logVerboseData({
            source: this._logSource,
            message: Text.format(strings.StartedFirstTimeRender, this.context.webPartTag),
            serviceScope: this.context.serviceScope
        });
        return new Promise(function (resolve) {
            if (!_this._initialized && qosMonitor) {
                qosMonitor.writeUnexpectedFailure('BaseConstructorNotCalled');
                throw SPWebPartError.create(SPWebPartErrorCode.NotInitializedError, _this.context.webPartTag);
            }
            _this._displayMode = mode;
            _this._renderedFromPersistedData = addedFromPersistedData;
            if (!_this._renderedFromPersistedData) {
                var isInternal = _this.context.manifest.isInternal || false;
                var logEntry = new _LogEntry(_this._logSource.id, 'WebPartAdded', _LogType.Event, {
                    'alias': _this.context.manifest.alias,
                    'isInternal': isInternal.toString()
                });
                _EngagementLogger.logEventWithLogEntry(logEntry);
            }
            if (data) {
                _this._internalDeserialize(data);
            }
            if (!_this._properties && qosMonitor) {
                qosMonitor.writeUnexpectedFailure('PropertyBagNull');
                throw SPWebPartError.create(SPWebPartErrorCode.PropertyBagNull, _this.context.webPartTag);
            }
            var minHeight = _this._calculateMinimumHeight();
            if (minHeight) {
                _this.domElement.style.minHeight = minHeight + "px";
            }
            _this._renderPromiseResolver = resolve;
            if (!_this.context.host.isViewportLoadingDisabled) {
                _PerformanceLogger.markComponent(_this.context.webPartTag, 'loadingDelayed');
                _this._internalDelayedRender(scrollableParent);
            }
            else {
                _this._internalRenderInViewPort();
            }
        });
    };
    BaseClientSideWebPart.prototype._internalDelayedRender = function (scrollableParent) {
        ViewportLoader.instance.register(this, scrollableParent);
        if (!this._internalIsInViewport) {
            _TraceLogger.logVerboseData({
                source: this._logSource,
                message: "Web part " + this.context.webPartTag + " is not in initial viewport, rendering delayed.",
                serviceScope: this.context.serviceScope
            });
        }
    };
    BaseClientSideWebPart.prototype._internalGetData = function () {
        return this._emptyResolvedPromise;
    };
    BaseClientSideWebPart.prototype._internalRenderInViewPort = function () {
        var _this = this;
        if (!this.context.host.isViewportLoadingDisabled) {
            _PerformanceLogger.markComponent(this.context.webPartTag, 'inViewportLoading');
            _TraceLogger.logVerboseData({
                source: this._logSource,
                message: "Actually started first time render for web part " + this.context.webPartTag + ".",
                serviceScope: this.context.serviceScope
            });
        }
        this._initPromise = this.onInit();
        if (!this._initPromise) {
            throw SPWebPartError.create(SPWebPartErrorCode.OnInitReturnedNullPromise, this.context.webPartTag);
        }
        this._initPromise.then(function () {
            _TraceLogger.logVerboseData({
                source: _this._logSource,
                message: Text.format(strings.OnInitCompleted, _this.context.webPartTag),
                serviceScope: _this.context.serviceScope
            });
            _PerformanceLogger.markComponent(_this.context.webPartTag, 'init');
            var getDataPromise = Promise.resolve();
            getDataPromise = _this._internalGetData();
            if (!getDataPromise) {
                throw SPWebPartError.create(SPWebPartErrorCode.GetDataReturnedNullPromise, _this.context.webPartTag);
            }
            getDataPromise.then(function () {
                _PerformanceLogger.markComponent(_this.context.webPartTag, 'getDataComplete');
                _this.context.statusRenderer.clearLoadingIndicator(_this.domElement);
                var renderPromise = _this._renderWithAccessibleTitle();
                var onAfterRender = function () {
                    _PerformanceLogger.markComponent(_this.context.webPartTag, 'syncRender');
                    if (!_this.isRenderAsync) {
                        _this._resolveOnRenderPromise();
                    }
                    else {
                        _this._startAsyncRenderGuardTimer();
                    }
                };
                if (!_SPKillSwitch.isActivated(Guid.parse('a2a8cd1a-fc93-46be-a361-309922babbcf'), '4/6/2018', 'WaitRender')) {
                    renderPromise.then(onAfterRender);
                }
                else {
                    onAfterRender();
                }
            });
        });
    };
    BaseClientSideWebPart.prototype._internalSetDisplayMode = function (newDisplayMode) {
        if (this._displayMode !== newDisplayMode) {
            var oldDisplayMode = this._displayMode;
            this._displayMode = newDisplayMode;
            this._width = undefined;
            this.onDisplayModeChanged(oldDisplayMode);
        }
    };
    BaseClientSideWebPart.prototype._internalSetWebPartData = function (webPartData) {
        this._internalDeserialize(webPartData);
        this._renderWithAccessibleTitle();
    };
    BaseClientSideWebPart.prototype._fixUpDynamicDataConfiguration = function (configuration) {
        var _this = this;
        configuration.pages.forEach(function (page) {
            page.groups.forEach(function (group) {
                group.groupFields.forEach(function (field) {
                    if (field.type === PropertyPaneFieldType.DynamicData) {
                        if (!field.properties) {
                            field.properties = {
                                entries: []
                            };
                        }
                        var props = field.properties;
                        props.dynamicDataProvider = _this.context.dynamicDataProvider;
                        props.defaultCallback = (function () { if (_this.renderedOnce) {
                            _this.render();
                        } }).bind(_this);
                        props.entries.forEach(function (entry) {
                            if (!!_this.properties[entry.targetProperty]) {
                                entry.dynamicProperty = _this.properties[entry.targetProperty];
                            }
                        });
                    }
                    else if (field.type === PropertyPaneFieldType.DynamicTextField) {
                        var props = field.properties;
                        props.dynamicDataProvider = _this.context.dynamicDataProvider;
                        props.changeCallback = (function () { if (_this.renderedOnce) {
                            _this.render();
                        } }).bind(_this);
                    }
                });
            });
        });
    };
    BaseClientSideWebPart.prototype._onPropertyPaneFieldChanged = function (propertyPath, newValue) {
        if (this.disableReactivePropertyChanges && !this._backupProperties) {
            this._backupProperties = lodash.cloneDeep(this.properties);
        }
        var oldValue = lodash.get(this._properties, propertyPath); 
        this._updateProperty(propertyPath, newValue);
        this.onPropertyPaneFieldChanged(propertyPath, oldValue, newValue);
        this._afterPropertyUpdated(!this.disableReactivePropertyChanges);
    };
    BaseClientSideWebPart.prototype._afterPropertyUpdated = function (shouldRerender) {
        if (this.context.host.setDirty) {
            this.context.host.setDirty(this.context.instanceId);
        }
        if (shouldRerender) {
            this._renderWithAccessibleTitle();
        }
    };
    BaseClientSideWebPart.prototype._onPropertyPaneLifeCycleEvent = function (propertyPaneLifeCycleEvent) {
        var _this = this;
        switch (propertyPaneLifeCycleEvent) {
            case 1 :
                this._loadPropertyPaneResources().then(function () { return _this.onPropertyPaneConfigurationStart(); });
                break;
            case 2 :
                if (this.disableReactivePropertyChanges && this._backupProperties) {
                    this._properties = this._backupProperties;
                    this._backupProperties = undefined;
                }
                this.onPropertyPaneConfigurationComplete();
                break;
            case 5 :
                this._backupProperties = this.properties;
                this.onAfterPropertyPaneChangesApplied();
                this._afterPropertyUpdated(true);
                break;
        }
    };
    BaseClientSideWebPart.prototype._internalSetDirtyBit = function () {
        if (this.displayMode === DisplayMode.Read) {
            return;
        }
        var serializedState = this._internalSerialize();
        var newState = JSON.stringify(serializedState);
        if (!this._previousState) {
            this._previousState = newState;
        }
        else if (this._previousState !== newState && this.context.host.setDirty) {
            this.context.host.setDirty(this.context.instanceId, serializedState);
            this._previousState = newState;
        }
    };
    BaseClientSideWebPart.prototype._serialize = function () {
        var _this = this;
        var serverProcessedContent = {
            htmlStrings: {},
            searchablePlainTexts: {},
            imageSources: {},
            links: {}
        };
        var properties = lodash.cloneDeep(this.persistedProperties);
        this._forEachPropertyWithMetaData(function (propPath, metadata, iteration) {
            if (metadata.shouldNotPersist) {
                lodash.set(properties, propPath, undefined);
            }
            var key = propPath;
            var value = lodash.get(properties, propPath);
            if (serverProcessedContent && typeof value === 'string' && value !== undefined) {
                if (serverProcessedContent.htmlStrings && metadata.isHtmlString) {
                    serverProcessedContent.htmlStrings[key] = value;
                }
                else if (serverProcessedContent.searchablePlainTexts && metadata.isSearchablePlainText) {
                    serverProcessedContent.searchablePlainTexts[key] = value;
                }
                else if (serverProcessedContent.links && metadata.isLink) {
                    serverProcessedContent.links[key] = value;
                }
                else if (serverProcessedContent.imageSources && metadata.isImageSource) {
                    serverProcessedContent.imageSources[key] = value;
                }
                else if (metadata.isComponentDependency) {
                    if (!serverProcessedContent.componentDependencies) {
                        serverProcessedContent.componentDependencies = {};
                    }
                    serverProcessedContent.componentDependencies[key] = value;
                }
                if (metadata.customMetadata) {
                    _this._internalSerializeCustomMetadata(key, metadata, properties, serverProcessedContent, iteration);
                }
                lodash.set(properties, propPath, undefined);
            }
        });
        return {
            dataVersion: this.dataVersion,
            properties: properties,
            serverProcessedContent: serverProcessedContent
        };
    };
    BaseClientSideWebPart.prototype._internalSerializeCustomMetadata = function (propertyPath, metadata, properties, serverProcessedContent, iteration) {
        var customMetadata = {};
        this._foreachCustomMetadata(metadata, iteration, function (customPropertyPath, customPropertyName) {
            var customValue = lodash.get(properties, customPropertyPath);
            if (serverProcessedContent && customValue !== undefined) {
                customMetadata[customPropertyName] = customValue;
            }
        });
        if (!serverProcessedContent.customMetadata) {
            serverProcessedContent.customMetadata = {};
        }
        serverProcessedContent.customMetadata[propertyPath] = customMetadata;
    };
    BaseClientSideWebPart.prototype._internalSerialize = function () {
        var _this = this;
        var data; 
        executeAndReThrow(function () {
            _this.onBeforeSerialize();
            var propertiesJson = JSON.stringify(_this.properties);
            if (!_this._hasEditLogged && _this._initPropertiesSnapshot !== propertiesJson) {
                var isInternal = !!_this.context.manifest.isInternal;
                var logEntry = new _LogEntry(_this._logSource.id, 'WebPartEdited', _LogType.Event, {
                    'alias': _this.context.manifest.alias,
                    'isInternal': isInternal.toString()
                });
                _EngagementLogger.logEventWithLogEntry(logEntry);
                _this._hasEditLogged = true;
            }
            var serializedData = _this._serialize();
            Validate.isNotNullOrUndefined(serializedData.dataVersion, 'serialized data version');
            if (propertiesJson && propertiesJson.indexOf(DynamicProperty._TYPE_NAME) !== -1) {
                _this._serializeDynamicData(serializedData);
            }
            data = {
                id: _this.context.manifest.id,
                instanceId: _this.context.instanceId,
                title: _this.title,
                description: _this.description,
                serverProcessedContent: serializedData.serverProcessedContent,
                dynamicDataPaths: serializedData.dynamicDataPaths,
                dynamicDataValues: serializedData.dynamicDataValues,
                dataVersion: serializedData.dataVersion.toString(),
                properties: serializedData.properties
            };
        }, SPWebPartError.create(SPWebPartErrorCode.SerializationFailed, this.context.webPartTag), this._logSource);
        return data;
    };
    BaseClientSideWebPart.prototype._serializeDynamicData = function (serializedData) {
        var props = serializedData.properties; 
        var dynamicDataPaths = {};
        var dynamicDataValues = {}; 
        var key = lodash.findKey(props, { __type: DynamicProperty._TYPE_NAME });
        while (key) {
            var dynamicDataReference = lodash.get(props, key + '.reference');
            var dynamicDataValue = lodash.get(props, key + '.value');
            if (dynamicDataReference) {
                dynamicDataPaths[key] = dynamicDataReference;
                lodash.unset(props, key);
            }
            else if (dynamicDataValue !== undefined) {
                dynamicDataValues[key] = dynamicDataValue;
                lodash.unset(props, key);
            }
            else {
                throw new Error('Dynamic Data is misconfigured');
            }
            key = lodash.findKey(props, { __type: DynamicProperty._TYPE_NAME });
        }
        serializedData.dynamicDataPaths = dynamicDataPaths;
        serializedData.dynamicDataValues = dynamicDataValues;
    };
    BaseClientSideWebPart.prototype._deserializeDynamicData = function (data) {
        var _this = this;
        if (data.dynamicDataPaths) {
            for (var path in data.dynamicDataPaths) {
                if (data.dynamicDataPaths.hasOwnProperty(path)) {
                    var dynamicProperty = new DynamicProperty(
                    this.context.dynamicDataProvider, (function () { if (_this.renderedOnce) {
                        _this.render();
                    } }).bind(this));
                    dynamicProperty.setReference(data.dynamicDataPaths[path]);
                    lodash.set(data.properties, path, dynamicProperty);
                }
            }
        }
        if (data.dynamicDataValues) {
            for (var path in data.dynamicDataValues) {
                if (data.dynamicDataValues.hasOwnProperty(path)) {
                    var dynamicProperty = new DynamicProperty(
                    this.context.dynamicDataProvider, (function () { if (_this.renderedOnce) {
                        _this.render();
                    } }).bind(this));
                    dynamicProperty.setValue(data.dynamicDataValues[path]);
                    lodash.set(data.properties, path, dynamicProperty);
                }
            }
        }
    };
    BaseClientSideWebPart.prototype._internalDispose = function () {
        _TraceLogger.logVerbose(this._logSource, Text.format(strings.DisposeLog, this.context.webPartTag));
        _super.prototype.dispose.call(this);
    };
    BaseClientSideWebPart.prototype._internalOnAfterResize = function () {
        this._width = undefined;
        this.onAfterResize(this.width);
    };
    BaseClientSideWebPart.prototype._updateProperty = function (propertyPath, newValue) {
        lodash.update(this.properties, propertyPath, function () { return newValue; });
    };
    BaseClientSideWebPart.prototype._throwReadOnlyError = function () {
        throw SPWebPartError.create(SPWebPartErrorCode.ReadOnlyProperty);
    };
    BaseClientSideWebPart.prototype._renderWithAccessibleTitle = function () {
        var _this = this;
        var renderWithAccessibleTitle = function () {
            _PerformanceLogger.devMark("webpart(" + _this.context.webPartTag + ")._renderWithAccessibleTitle");
            _this.render();
            if (_this._displayMode === DisplayMode.Edit) {
                var accessibleContext = _this.accessibleTitle || _this._getDefaultAccessibleTitle();
                if (accessibleContext) {
                    var contextualLabelId = "cswpAccessibleLabelContextual_" + _this.context.instanceId;
                    var accessibleDiv = _this.domElement.querySelector("#" + contextualLabelId);
                    var isNewLabelElement = !accessibleDiv;
                    if (isNewLabelElement) {
                        accessibleDiv = document.createElement('div');
                        accessibleDiv.id = contextualLabelId;
                        accessibleDiv.className = baseStyles.screenReaderOnly;
                    }
                    accessibleDiv.textContent = accessibleContext;
                    if (isNewLabelElement) {
                        _this.domElement.appendChild(accessibleDiv);
                    }
                }
                ClassicPageUtils.disableAutomaticPostbacks(_this.domElement, Environment.type);
            }
            _this.domElement.style.minHeight = null; 
            return Promise.resolve(undefined);
        };
        if (!_SPKillSwitch.isActivated(Guid.parse('a2a8cd1a-fc93-46be-a361-309922babbcf'), '4/6/2018', 'Wait on onInit') &&
            this._initPromise) {
            return this._initPromise.then(renderWithAccessibleTitle);
        }
        else {
            return renderWithAccessibleTitle();
        }
    };
    BaseClientSideWebPart.prototype._getDefaultAccessibleTitle = function () {
        return Text.format(strings.GenericAccessibleLabelTemplate, this.title);
    };
    BaseClientSideWebPart.prototype._startAsyncRenderGuardTimer = function () {
        var _this = this;
        this._clearAsyncRenderGuardTimer();
        this._asyncRenderGuardTimer = window.setTimeout(function () {
            _this._asyncRenderTimeout();
        }, 25000);
    };
    BaseClientSideWebPart.prototype._renderCompleted = function () {
        if (this._asyncRenderGuardTimer) {
            this._clearAsyncRenderGuardTimer();
            this._asyncRenderQosMonitor.writeSuccess({
                'alias': this.context.manifest.alias,
                'webPartId': this.context.manifest.id
            });
            this._resolveOnRenderPromise();
        }
    };
    BaseClientSideWebPart.prototype._asyncRenderTimeout = function () {
        if (this._asyncRenderGuardTimer) {
            this._clearAsyncRenderGuardTimer();
            var error = SPWebPartError.create(SPWebPartErrorCode.RenderCompletedCallNotCalled, this.context.webPartTag);
            _TraceLogger.logErrorData({
                source: this._logSource,
                error: error,
                serviceScope: this.context.serviceScope
            });
            this._asyncRenderQosMonitor.writeUnexpectedFailure('Timeout', error, {
                'alias': this.context.manifest.alias,
                'webPartId': this.context.manifest.id,
                'instanceId': this.instanceId
            });
            this._resolveOnRenderPromise();
        }
    };
    BaseClientSideWebPart.prototype._clearAsyncRenderGuardTimer = function () {
        if (this._asyncRenderGuardTimer) {
            window.clearTimeout(this._asyncRenderGuardTimer);
            this._asyncRenderGuardTimer = undefined;
        }
    };
    BaseClientSideWebPart.prototype._resolveOnRenderPromise = function () {
        this._renderedOnce = true;
        var message = Text.format(this.isRenderAsync ? strings.CompletedAsyncRender : strings.CompletedSyncRender, this.context.webPartTag);
        _TraceLogger.logVerboseData({
            source: this._logSource,
            message: message,
            serviceScope: this.context.serviceScope
        });
        _PerformanceLogger.endMarkForComponent(this.context.webPartTag);
        _PerformanceLogger.devMark("webpart(" + this.context.webPartTag + ").complete");
        if (this._renderPromiseResolver) {
            this._renderPromiseResolver();
        }
        this._renderPromiseResolver = undefined;
    };
    tslib_1.__decorate([
        virtual
    ], BaseClientSideWebPart.prototype, "_calculateMinimumHeight", null);
    tslib_1.__decorate([
        virtual
    ], BaseClientSideWebPart.prototype, "propertiesMetadata", null);
    tslib_1.__decorate([
        virtual
    ], BaseClientSideWebPart.prototype, "disableReactivePropertyChanges", null);
    tslib_1.__decorate([
        virtual
    ], BaseClientSideWebPart.prototype, "previewImageUrl", null);
    tslib_1.__decorate([
        virtual
    ], BaseClientSideWebPart.prototype, "accessibleTitle", null);
    tslib_1.__decorate([
        virtual
    ], BaseClientSideWebPart.prototype, "isRenderAsync", null);
    tslib_1.__decorate([
        virtual
    ], BaseClientSideWebPart.prototype, "onInit", null);
    tslib_1.__decorate([
        virtual
    ], BaseClientSideWebPart.prototype, "onDisplayModeChanged", null);
    tslib_1.__decorate([
        virtual
    ], BaseClientSideWebPart.prototype, "onBeforeSerialize", null);
    tslib_1.__decorate([
        virtual
    ], BaseClientSideWebPart.prototype, "onAfterDeserialize", null);
    tslib_1.__decorate([
        virtual
    ], BaseClientSideWebPart.prototype, "loadPropertyPaneResources", null);
    tslib_1.__decorate([
        virtual
    ], BaseClientSideWebPart.prototype, "getPropertyPaneConfiguration", null);
    tslib_1.__decorate([
        virtual
    ], BaseClientSideWebPart.prototype, "onDispose", null);
    tslib_1.__decorate([
        virtual
    ], BaseClientSideWebPart.prototype, "onPropertyPaneFieldChanged", null);
    tslib_1.__decorate([
        virtual
    ], BaseClientSideWebPart.prototype, "onPropertyPaneConfigurationStart", null);
    tslib_1.__decorate([
        virtual
    ], BaseClientSideWebPart.prototype, "onPropertyPaneConfigurationComplete", null);
    tslib_1.__decorate([
        virtual
    ], BaseClientSideWebPart.prototype, "onAfterPropertyPaneChangesApplied", null);
    tslib_1.__decorate([
        virtual
    ], BaseClientSideWebPart.prototype, "onPropertyPaneRendered", null);
    tslib_1.__decorate([
        virtual
    ], BaseClientSideWebPart.prototype, "onAfterResize", null);
    return BaseClientSideWebPart;
}(BaseComponent));
export default BaseClientSideWebPart;
