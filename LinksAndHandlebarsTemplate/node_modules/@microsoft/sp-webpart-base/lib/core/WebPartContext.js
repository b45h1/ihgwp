import * as tslib_1 from "tslib";
import { sealed } from '@microsoft/decorators';
import { HttpClient, SPHttpClient, GraphHttpClient } from '@microsoft/sp-http';
import { _TraceLogger } from '@microsoft/sp-diagnostics';
import { BaseComponentContext } from '@microsoft/sp-component-base';
import { Validate } from '@microsoft/sp-core-library';
import PropertyPaneAccessor from './context/PropertyPaneAccessor';
var WebPartContext = (function (_super) {
    tslib_1.__extends(WebPartContext, _super);
    function WebPartContext(parameters) {
        var _this = _super.call(this, parameters) || this;
        Validate.isNotNullOrUndefined(parameters, 'webpart context');
        Validate.isNotNullOrUndefined(parameters.domElement, "webpart context domElement");
        Validate.isNotNullOrUndefined(parameters.instanceId, 'webpart context instanceId');
        Validate.isNotNullOrUndefined(parameters.webPartTag, 'webpart context webPartTag');
        Validate.isNotNullOrUndefined(parameters.eventAggregator, 'webpart context eventAggregator');
        Validate.isNotNullOrUndefined(parameters.statusRenderer, 'webpart context statusRenderer');
        Validate.isNotNullOrUndefined(parameters.host, 'webpart context host');
        Validate.isNotNullOrUndefined(parameters.isPropertyPaneRenderedByWebPart, 'webpart context isPropertyPaneRenderedByWebPart');
        Validate.isNotNullOrUndefined(parameters.isPropertyPaneOpen, 'webpart context isPropertyPaneOpen');
        Validate.isNotNullOrUndefined(parameters.requestPropertyPaneAction, 'webpart context requestPropertyPaneAction');
        _this._webPartTag = parameters.webPartTag;
        _this._domElement = parameters.domElement;
        _this._host = parameters.host;
        _this._statusRenderer = parameters.statusRenderer;
        _this._eventAggregator = parameters.eventAggregator;
        _this._requestPropertyPaneAction = parameters.requestPropertyPaneAction;
        _this._isPropertyPaneRenderedByWebPart = parameters.isPropertyPaneRenderedByWebPart;
        _this._isPropertyPaneOpen = parameters.isPropertyPaneOpen;
        _this._privateDataUpdatedEvent = parameters._dataUpdatedEvent;
        _this._propertyPaneAccessor = new PropertyPaneAccessor(function () { _this._requestPropertyPaneAction(_this.instanceId, 1 , true); }, function () { _this._requestPropertyPaneAction(_this.instanceId, 5 ); }, function () { return _this._isPropertyPaneRenderedByWebPart(); }, function () { return _this._isPropertyPaneOpen(); });
        if (DATACENTER) {
            _this._graphHttpClient = _this.serviceScope.createDefaultAndProvide(GraphHttpClient.serviceKey);
        }
        _this._httpClient = _this.serviceScope.createDefaultAndProvide(HttpClient.serviceKey);
        _this._spHttpClient = _this.serviceScope.createDefaultAndProvide(SPHttpClient.serviceKey);
        return _this;
    }
    Object.defineProperty(WebPartContext.prototype, "webPartTag", {
        get: function () { return this._webPartTag; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WebPartContext.prototype, "domElement", {
        get: function () { return this._domElement; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WebPartContext.prototype, "httpClient", {
        get: function () { return this._httpClient; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WebPartContext.prototype, "spHttpClient", {
        get: function () { return this._spHttpClient; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WebPartContext.prototype, "graphHttpClient", {
        get: function () {
            if (!DATACENTER) {
                _TraceLogger.logVerbose(this._logSource, 'GraphHttpClient is not supported for OnPrem.');
            }
            return this._graphHttpClient;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WebPartContext.prototype, "statusRenderer", {
        get: function () { return this._statusRenderer; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WebPartContext.prototype, "eventAggregator", {
        get: function () {
            if (!DATACENTER) {
                _TraceLogger.logVerbose(this._logSource, 'EventAggregator is not supported for OnPrem.');
            }
            return this._eventAggregator;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WebPartContext.prototype, "propertyPane", {
        get: function () { return this._propertyPaneAccessor; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WebPartContext.prototype, "host", {
        get: function () { return this._host; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WebPartContext.prototype, "_dataUpdatedEvent", {
        get: function () { return this._privateDataUpdatedEvent; },
        enumerable: true,
        configurable: true
    });
    WebPartContext = tslib_1.__decorate([
        sealed
    ], WebPartContext);
    return WebPartContext;
}(BaseComponentContext));
export default WebPartContext;
