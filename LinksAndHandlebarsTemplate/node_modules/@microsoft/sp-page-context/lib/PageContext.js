import { _LogSource, _TraceLogger } from '@microsoft/sp-diagnostics';
import { ServiceKey, Validate } from '@microsoft/sp-core-library';
import { _DynamicDataManager } from '@microsoft/sp-dynamic-data';
import SPWeb from './SPWeb';
import SPList from './SPList';
import SPListItem from './SPListItem';
import SPSite from './SPSite';
import SPUser from './SPUser';
import CultureInfo from './CultureInfo';
import AzureActiveDirectoryInfo from './AzureActiveDirectoryInfo';
var PageContext = (function () {
    function PageContext(serviceScope) {
        var _this = this;
        this._isInitialized = false;
        this._serviceScope = serviceScope;
        this._serviceScope.whenFinished(function () {
            _this._dynamicDataManager = serviceScope.consume(_DynamicDataManager.serviceKey);
            _this._dynamicDataManager.addSource(_this._buildDataSource());
        });
    }
    PageContext.prototype.initialize = function (options, legacyPageContext) {
        var _this = this;
        Validate.isNotNullOrUndefined(options, 'options');
        try {
            this._aadInfo = options.aadInfo ? new AzureActiveDirectoryInfo(options.aadInfo) : undefined;
            this._cultureInfo = new CultureInfo(options.cultureInfo);
            this._list = options.list ? new SPList(options.list) : undefined;
            this._listItem = options.listItem ? new SPListItem(options.listItem) : undefined;
            this._site = new SPSite(options.site);
            this._user = new SPUser(options.user);
            this._web = new SPWeb(options.web);
            this._legacyPageContext = legacyPageContext;
        }
        catch (e) {
            _TraceLogger.logError(PageContext._logSource, e, 'initialize');
            throw e;
        }
        this._serviceScope.whenFinished(function () {
            _this._dynamicDataManager.notifySourceChanged(PageContext._dataSourceId);
        });
        this._isInitialized = true;
    };
    Object.defineProperty(PageContext.prototype, "aadInfo", {
        get: function () {
            return this._aadInfo;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContext.prototype, "cultureInfo", {
        get: function () {
            return this._cultureInfo;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContext.prototype, "list", {
        get: function () {
            return this._list;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContext.prototype, "listItem", {
        get: function () {
            return this._listItem;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContext.prototype, "page", {
        get: function () {
            return this._page;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContext.prototype, "site", {
        get: function () {
            return this._site;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContext.prototype, "user", {
        get: function () {
            return this._user;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContext.prototype, "web", {
        get: function () {
            return this._web;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContext.prototype, "legacyPageContext", {
        get: function () {
            return this._legacyPageContext;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PageContext.prototype, "isInitialized", {
        get: function () {
            return this._isInitialized;
        },
        enumerable: true,
        configurable: true
    });
    PageContext.prototype._buildDataSource = function () {
        var _this = this;
        return {
            id: PageContext._dataSourceId,
            metadata: {
                title: 'Page Context',
                description: 'This includes some metadata about the page'
            },
            getPropertyDefinitions: function () { return [
                { id: 'aadInfo', title: 'AAD info' },
                { id: 'cultureInfo', title: 'Culture information' },
                { id: 'list', title: 'List' },
                { id: 'listItem', title: 'List item' },
                { id: 'site', title: 'Site' },
                { id: 'user', title: 'User' },
                { id: 'web', title: 'Web' }
            ]; },
            getPropertyValue: function (propertyId) {
                var data = undefined;
                switch (propertyId) {
                    case 'aadInfo':
                        if (_this.aadInfo) {
                            data = {
                                tenantId: _this.aadInfo.tenantId.toString(),
                                userId: _this.aadInfo.userId.toString(),
                                instanceUrl: _this.aadInfo.instanceUrl
                            };
                        }
                        else {
                            data = undefined;
                        }
                        break;
                    case 'cultureInfo':
                        data = {
                            cultureName: _this.cultureInfo.currentCultureName
                        };
                        break;
                    case 'list':
                        if (_this.list) {
                            data = {
                                id: _this.list.id.toString(),
                                title: _this.list.title,
                                url: _this.list.serverRelativeUrl
                            };
                        }
                        else {
                            data = undefined;
                        }
                        break;
                    case 'listItem':
                        if (_this.listItem) {
                            data = {
                                id: _this.listItem.id
                            };
                        }
                        else {
                            data = undefined;
                        }
                        break;
                    case 'site':
                        if (_this.site) {
                            data = {
                                id: _this.site.id.toString(),
                                url: _this.site.serverRelativeUrl,
                                absoluteUrl: _this.site.absoluteUrl,
                                correlationId: _this.site.correlationId.toString()
                            };
                        }
                        else {
                            data = undefined;
                        }
                        break;
                    case 'user':
                        data = {
                            loginName: _this.user.loginName,
                            displayName: _this.user.displayName,
                            email: _this.user.email,
                            isAnonymous: _this.user.isAnonymousGuestUser
                        };
                        break;
                    case 'web':
                        if (_this.web) {
                            data = {
                                id: _this.web.id.toString(),
                                title: _this.web.title,
                                description: _this.web.description,
                                url: _this.web.serverRelativeUrl,
                                absoluteUrl: _this.web.absoluteUrl
                            };
                        }
                        else {
                            data = undefined;
                        }
                        break;
                }
                return data;
            }
        };
    };
    PageContext.serviceKey = ServiceKey.create('sp-page-context:PageContext', PageContext);
    PageContext._logSource = _LogSource.create('PageContext');
    PageContext._dataSourceId = 'PageContext';
    return PageContext;
}());
export default PageContext;
