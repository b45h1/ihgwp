import RushConfiguration from '../../data/RushConfiguration';
import { BaseShrinkwrapFile } from '../logic/base/BaseShrinkwrapFile';
import { LastInstallFlag } from '../../utilities/LastInstallFlag';
export interface CreateOptions {
    /**
     * "Set to true to omit writing mtime values for entries. Note that this prevents using other
     * mtime-based features like tar.update or the keepNewer option with the resulting tar archive."
     */
    noMtime?: boolean;
}
/**
 * Controls the behavior of InstallManager.installCommonModules()
 */
export declare enum InstallType {
    /**
     * The default behavior: (1) If the timestamps are up to date, don't do anything.
     * (2) Otherwise, if the common folder is in a good state, do an incremental install.
     * (3) Otherwise, delete everything, clear the cache, and do a clean install.
     */
    Normal = 0,
    /**
     * Force a clean install, i.e. delete "common\node_modules", clear the cache,
     * and then install.
     */
    ForceClean = 1,
    /**
     * Same as ForceClean, but also clears the global NPM cache (which is not threadsafe).
     */
    UnsafePurge = 2,
}
/**
 * This class implements common logic between "rush install" and "rush generate".
 */
export default class InstallManager {
    private _rushConfiguration;
    private _commonNodeModulesMarker;
    private _asyncRecycler;
    /**
     * Returns a map of all direct dependencies that only have a single semantic version specifier
     */
    static collectImplicitlyPreferredVersions(rushConfiguration: RushConfiguration): Map<string, string>;
    private static _updateVersionsForDependencies(versionsForDependencies, dependency, version);
    private static _collectVersionsForDependencies(versionsForDependencies, dependencies, cyclicDependencies, rushConfiguration);
    readonly commonNodeModulesMarker: LastInstallFlag;
    constructor(rushConfiguration: RushConfiguration);
    /**
     * If the "(p)npm-local" symlink hasn't been set up yet, this creates it, installing the
     * specified (P)npm version in the user's home directory if needed.
     */
    ensureLocalPackageManager(forceReinstall: boolean): Promise<void>;
    /**
     * Regenerates the common/package.json and all temp_modules projects.
     */
    createTempModules(forceCreate: boolean): void;
    /**
     * Regenerates the common/package.json and all temp_modules projects.
     * If shrinkwrapFile is provided, this function also validates whether it contains
     * everything we need to install and returns true if so; in all other cases,
     * the return value is false.
     */
    createTempModulesAndCheckShrinkwrap(shrinkwrapFile: BaseShrinkwrapFile | undefined, forceCreate: boolean): boolean;
    /**
     * Runs "npm install" in the common folder, in one of three ways:
     * 1. No action because it is already up to date
     * 2. Incremental action ("npm prune", "npm install", etc).
     * 3. Full clean and "npm install"
     */
    installCommonModules(installType: InstallType): void;
    /**
     * Used when invoking the NPM tool.  Appends the common configuration options
     * to the command-line.
     */
    pushConfigurationArgs(args: string[]): void;
    /**
     * Copies the file "sourcePath" to "targetPath", overwriting the target file location.
     * If the source file does not exist, then the target file is deleted.
     */
    syncFile(sourcePath: string, targetPath: string): void;
    /**
     * Gets the path to the tarball
     * Example: "C:\MyRepo\common\temp\projects\my-project-2.tgz"
     */
    private _getTarballFilePath(project);
    /**
     * This is a workaround for a bug introduced in NPM 5 (and still unfixed as of NPM 5.5.1):
     * https://github.com/npm/npm/issues/19006
     *
     * The regression is that "npm install" sets the package.json "version" field for the
     * @rush-temp projects to a value like "file:projects/example.tgz", when it should be "0.0.0".
     * This causes "rush link" to fail later, when read-package-tree tries to parse the bad version.
     * The error looks like this:
     *
     * ERROR: Failed to parse package.json for foo: Invalid version: "file:projects/example.tgz"
     *
     * Our workaround is to rewrite the package.json files for each of the @rush-temp projects
     * in the node_modules folder, after "npm install" completes.
     */
    private _fixupNpm5Regression();
    /**
     * Checks for temp projects that exist in the shrinkwrap file, but don't exist
     * in rush.json.  This might occur, e.g. if a project was recently deleted or renamed.
     *
     * @returns true if orphans were found, or false if everything is okay
     */
    private _findOrphanedTempProjects(shrinkwrapFile);
}
