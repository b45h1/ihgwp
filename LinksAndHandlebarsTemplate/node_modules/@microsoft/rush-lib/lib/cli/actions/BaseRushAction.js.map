{"version":3,"sources":["cli/actions/BaseRushAction.ts"],"names":[],"mappings":";;AAAA,4FAA4F;AAC5F,2DAA2D;AAC3D,yBAAyB;AACzB,6BAA6B;AAE7B,gEAGoC;AAEpC,oEAAwD;AAGxD,kEAA2D;AAiB3D;;GAEG;AACH,oBAAqC,SAAQ,mCAAiB;IAK5D,IAAc,iBAAiB;QAC7B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC;IACxC,CAAC;IAED,IAAc,MAAM;QAClB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,YAAY,OAAsC;QAChD,KAAK,CAAC,OAAO,CAAC,CAAC;QAEf,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC;QAC9B,IAAI,CAAC,iCAAiC,GAAG,CAAC,CAAC,OAAO,CAAC,gCAAgC,CAAC;IACtF,CAAC;IAES,SAAS;QACjB,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAE1B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC,CAAC;YAC5C,EAAE,CAAC,CAAC,CAAC,4BAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC1E,OAAO,CAAC,GAAG,CAAC,6DAA6D,CAAC,CAAC;gBAC3E,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAClB,CAAC;QACH,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,kBAAkB,IAAI,CAAC,UAAU,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;QAC3D,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;IACpB,CAAC;IAQD,IAAc,iBAAiB;QAC7B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAC7B,IAAI,CAAC,kBAAkB,GAAG,IAAI,2BAAiB,CAAC,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAC/E,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,CAAC;QAC7C,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC;IACjC,CAAC;IAEO,kBAAkB;QACxB,gDAAgD;QAChD,IAAI,eAAe,GAAuB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAC9D,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,cAAc,EAAE,MAAM,CAAC;YAC1F,IAAI,CAAC,SAAS,GAAG,eAAe,CAAC;QACnC,gDAAgD;QAChD,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,eAAe,CAAC;IACxC,CAAC;CACF;AAxDD,wCAwDC","file":"BaseRushAction.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\n\r\nimport {\r\n  CommandLineAction,\r\n  ICommandLineActionOptions\r\n} from '@microsoft/ts-command-line';\r\n\r\nimport { LockFile } from '@microsoft/node-core-library';\r\n\r\nimport RushConfiguration from '../../data/RushConfiguration';\r\nimport EventHooksManager from '../logic/EventHooksManager';\r\nimport RushCommandLineParser from './RushCommandLineParser';\r\n\r\nexport interface IRushCommandLineActionOptions extends ICommandLineActionOptions {\r\n  /**\r\n   * If true, no locking mechanism will be enforced when this action is run.\r\n   * Note this defaults to false (which is a safer assumption in case this value\r\n   *  is omitted).\r\n   */\r\n  safeForSimultaneousRushProcesses?: boolean;\r\n\r\n  /**\r\n   * The rush parser.\r\n   */\r\n  parser: RushCommandLineParser;\r\n}\r\n\r\n/**\r\n * The base Rush action that all Rush actions should extend.\r\n */\r\nexport abstract class BaseRushAction extends CommandLineAction {\r\n  private _parser: RushCommandLineParser;\r\n  private _eventHooksManager: EventHooksManager;\r\n  private _safeForSimultaneousRushProcesses: boolean;\r\n\r\n  protected get rushConfiguration(): RushConfiguration {\r\n    return this._parser.rushConfiguration;\r\n  }\r\n\r\n  protected get parser(): RushCommandLineParser {\r\n    return this._parser;\r\n  }\r\n\r\n  constructor(options: IRushCommandLineActionOptions) {\r\n    super(options);\r\n\r\n    this._parser = options.parser;\r\n    this._safeForSimultaneousRushProcesses = !!options.safeForSimultaneousRushProcesses;\r\n  }\r\n\r\n  protected onExecute(): Promise<void> {\r\n    this._ensureEnvironment();\r\n\r\n    if (!this._safeForSimultaneousRushProcesses) {\r\n      if (!LockFile.tryAcquire(this.rushConfiguration.commonTempFolder, 'rush')) {\r\n        console.log(`Another rush command is already running in this repository.`);\r\n        process.exit(1);\r\n      }\r\n    }\r\n\r\n    console.log(`Starting \"rush ${this.actionName}\"${os.EOL}`);\r\n    return this.run();\r\n  }\r\n\r\n  /**\r\n   * All Rush actions need to implement this method. This method runs after\r\n   * environment has been set up by the base class.\r\n   */\r\n  protected abstract run(): Promise<void>;\r\n\r\n  protected get eventHooksManager(): EventHooksManager {\r\n    if (!this._eventHooksManager) {\r\n      this._eventHooksManager = new EventHooksManager(this.rushConfiguration.eventHooks,\r\n        this.rushConfiguration.commonTempFolder);\r\n    }\r\n    return this._eventHooksManager;\r\n  }\r\n\r\n  private _ensureEnvironment(): void {\r\n    /* tslint:disable-next-line:no-string-literal */\r\n    let environmentPath: string | undefined = process.env['PATH'];\r\n    environmentPath = path.join(this.rushConfiguration.commonTempFolder, 'node_modules', '.bin') +\r\n      path.delimiter + environmentPath;\r\n    /* tslint:disable-next-line:no-string-literal */\r\n    process.env['PATH'] = environmentPath;\r\n  }\r\n}"],"sourceRoot":"../../../../../src"}