{"version":3,"sources":["cli/actions/InstallAction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,iCAAiC;AACjC,yBAAyB;AAIzB,sDAA8C;AAC9C,yDAAsD;AAEtD,kDAA2C;AAC3C,4DAAsE;AACtE,oEAAiE;AACjE,0EAAuE;AAGvE,8EAA2E;AAC3E,qDAAkD;AAElD,mBAAmC,SAAQ,+BAAc;IAMvD,YAAY,MAA6B;QACvC,KAAK,CAAC;YACJ,UAAU,EAAE,SAAS;YACrB,OAAO,EAAE,yFAAyF;YAClG,aAAa,EAAE,+FAA+F;kBAC5G,0GAA0G;kBAC1G,6FAA6F;kBAC7F,8FAA8F;kBAC9F,wFAAwF;kBACxF,gFAAgF;YAClF,MAAM;SACP,CAAC,CAAC;IACL,CAAC;IAES,kBAAkB;QAC1B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAC5C,iBAAiB,EAAE,SAAS;YAC5B,kBAAkB,EAAE,IAAI;YACxB,WAAW,EAAE,2EAA2E;kBACpF,gFAAgF;kBAChF,6EAA6E;kBAC7E,kBAAkB;SACvB,CAAC,CAAC;QACH,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAChD,iBAAiB,EAAE,cAAc;YACjC,kBAAkB,EAAE,IAAI;YACxB,WAAW,EAAE,8EAA8E;kBACvF,qFAAqF;kBACrF,sEAAsE;SAC3E,CAAC,CAAC;QACH,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAC5C,iBAAiB,EAAE,iBAAiB;YACpC,WAAW,EAAE,oDAAoD;SAClE,CAAC,CAAC;QACH,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAC/C,iBAAiB,EAAE,WAAW;YAC9B,WAAW,EAAE,sEAAsE;SACpF,CAAC,CAAC;IACL,CAAC;IAES,GAAG;QACX,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;YAC9B,EAAE,CAAC,CAAC,CAAC,mBAAS,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;gBAC7C,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAChB,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YAC3B,CAAC;YAED,iDAAuB,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACrE,CAAC;QAED,MAAM,SAAS,GAAc,qBAAS,CAAC,KAAK,EAAE,CAAC;QAE/C,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,kBAAK,CAAC,cAAc,CAAC,CAAC;QAEpD,MAAM,cAAc,GAAmB,IAAI,wBAAc,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAClF,MAAM,CAAC,cAAc,CAAC,yBAAyB,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC;YACjF,MAAM,cAAc,GAAmC,6CAAqB,CAAC,iBAAiB,CAC5F,IAAI,CAAC,iBAAiB,CAAC,cAAc,EACrC,IAAI,CAAC,iBAAiB,CAAC,2BAA2B,CAAC,CAAC;YAEtD,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;gBACpB,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;gBAChB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,oDAAoD,CAAC,CAAC,CAAC;gBAC9E,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;gBAChB,OAAO,CAAC,GAAG,CAAC,wCAAwC,CAAC,CAAC;gBACtD,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACzB,CAAC;YAED,IAAI,WAAW,GAAgB,4BAAW,CAAC,MAAM,CAAC;YAClD,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;gBACjC,WAAW,GAAG,4BAAW,CAAC,WAAW,CAAC;YACxC,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;gBACpC,WAAW,GAAG,4BAAW,CAAC,UAAU,CAAC;YACvC,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,mCAAmC,CACrD,cAAc,EACd,WAAW,KAAK,4BAAW,CAAC,MAAM,CACnC,CAAC,CAAC,CAAC;gBACF,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;gBAChB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,iEAAiE,CAAC,CAAC,CAAC;gBAC3F,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACzB,CAAC;YAED,cAAc,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK;YACb,SAAS,CAAC,IAAI,EAAE,CAAC;YACjB,IAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACzC,MAAM,KAAK,CAAC;QACd,CAAC,CAAC,CAAC,IAAI,CAAC;YACN,SAAS,CAAC,IAAI,EAAE,CAAC;YACjB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,SAAS,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;YAE7D,IAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YAExC,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,kBAAK,CAAC,eAAe,CAAC,CAAC;YAErD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC;gBACjC,MAAM,WAAW,GAAoB,uCAAkB,CAAC,cAAc,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;gBAC/F,MAAM,CAAC,WAAW,CAAC,yBAAyB,CAAC,KAAK,CAAC,CAAC;YACtD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,2CAA2C,CAAC,CAAC;YACpE,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,iBAAiB,CAAC,SAAoB,EAAE,OAAgB;QAC9D,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC;gBACxB,IAAI,EAAE,SAAS;gBACf,QAAQ,EAAE,SAAS,CAAC,QAAQ;gBAC5B,MAAM,EAAE,OAAO,GAAG,WAAW,GAAG,QAAQ;gBACxC,SAAS,EAAE;oBACT,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE;oBAC9C,SAAS,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE;iBACvD;aACF,CAAC,CAAC;QACL,CAAC;IACH,CAAC;CACF;AA7HD,gCA6HC","file":"InstallAction.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as colors from 'colors';\r\nimport * as os from 'os';\r\n\r\nimport { CommandLineFlagParameter } from '@microsoft/ts-command-line';\r\n\r\nimport { Event } from '../../data/EventHooks';\r\nimport { Stopwatch } from '../../utilities/Stopwatch';\r\nimport RushCommandLineParser from './RushCommandLineParser';\r\nimport GitPolicy from '../logic/GitPolicy';\r\nimport InstallManager, { InstallType } from '../logic/InstallManager';\r\nimport { LinkManagerFactory } from '../logic/LinkManagerFactory';\r\nimport { ShrinkwrapFileFactory } from '../logic/ShrinkwrapFileFactory';\r\nimport { BaseLinkManager } from '../logic/base/BaseLinkManager';\r\nimport { BaseShrinkwrapFile } from '../logic/base/BaseShrinkwrapFile';\r\nimport { ApprovedPackagesChecker } from '../logic/ApprovedPackagesChecker';\r\nimport { BaseRushAction } from './BaseRushAction';\r\n\r\nexport default class InstallAction extends BaseRushAction {\r\n  private _cleanInstall: CommandLineFlagParameter;\r\n  private _cleanInstallFull: CommandLineFlagParameter;\r\n  private _bypassPolicy: CommandLineFlagParameter;\r\n  private _noLinkParameter: CommandLineFlagParameter;\r\n\r\n  constructor(parser: RushCommandLineParser) {\r\n    super({\r\n      actionName: 'install',\r\n      summary: 'Install NPM packages in the Rush \"common\" folder, as specified by your shrinkwrap file.',\r\n      documentation: 'Always run \"rush install\" whenever you: (1) clone a repo, or (2) pull new changes from source'\r\n      + ' control, or (3) edit any package.json file.  The \"rush install\" command installs NPM packages into your'\r\n      + ' Rush \"common\" folder, using the exact versions specified in your npm-shrinkwrap.json file.'\r\n      + ' It also makes sure these versions satisfy your dependencies; if not, it will ask you to run'\r\n      + ' \"rush generate\". If there is nothing to do, then \"rush install\" won\\'t take any time.'\r\n      + ' Afterwards, it will run \"rush link\" to create symlinks for all your projects.',\r\n      parser\r\n    });\r\n  }\r\n\r\n  protected onDefineParameters(): void {\r\n    this._cleanInstall = this.defineFlagParameter({\r\n      parameterLongName: '--clean',\r\n      parameterShortName: '-c',\r\n      description: 'Deletes the common \"node_modules\" folder and NPM cache before installing.'\r\n        + ' Use this option if you suspect that your package folder has become corrupted.'\r\n        + ' This occurs sometimes due to bugs in the NPM tool, or if you upgraded your'\r\n        + ' Node.js engine.'\r\n    });\r\n    this._cleanInstallFull = this.defineFlagParameter({\r\n      parameterLongName: '--full-clean',\r\n      parameterShortName: '-C',\r\n      description: '(UNSAFE!) Similar to \"--clean\", but also deletes and reinstalls shared files'\r\n        + ' such as the NPM tool itself. This is a more aggressive fix that is NOT SAFE to run'\r\n        + ' regularly because it may cause other Rush or NPM processes to fail.'\r\n    });\r\n    this._bypassPolicy = this.defineFlagParameter({\r\n      parameterLongName: '--bypass-policy',\r\n      description: 'Overrides \"gitPolicy\" enforcement (use honorably!)'\r\n    });\r\n    this._noLinkParameter = this.defineFlagParameter({\r\n      parameterLongName: '--no-link',\r\n      description: 'Do not automatically run the \"rush link\" action after \"rush install\"'\r\n    });\r\n  }\r\n\r\n  protected run(): Promise<void> {\r\n    if (!this._bypassPolicy.value) {\r\n      if (!GitPolicy.check(this.rushConfiguration)) {\r\n        process.exit(1);\r\n        return Promise.resolve();\r\n      }\r\n\r\n      ApprovedPackagesChecker.rewriteConfigFiles(this.rushConfiguration);\r\n    }\r\n\r\n    const stopwatch: Stopwatch = Stopwatch.start();\r\n\r\n    this.eventHooksManager.handle(Event.preRushInstall);\r\n\r\n    const installManager: InstallManager = new InstallManager(this.rushConfiguration);\r\n    return installManager.ensureLocalPackageManager(this._cleanInstallFull.value).then(() => {\r\n      const shrinkwrapFile: BaseShrinkwrapFile | undefined = ShrinkwrapFileFactory.getShrinkwrapFile(\r\n        this.rushConfiguration.packageManager,\r\n        this.rushConfiguration.committedShrinkwrapFilename);\r\n\r\n      if (!shrinkwrapFile) {\r\n        console.log('');\r\n        console.log(colors.red('Unable to proceed: The shrinkwrap file is missing.'));\r\n        console.log('');\r\n        console.log('You need to run \"rush generate\" first.');\r\n        return process.exit(1);\r\n      }\r\n\r\n      let installType: InstallType = InstallType.Normal;\r\n      if (this._cleanInstallFull.value) {\r\n        installType = InstallType.UnsafePurge;\r\n      } else if (this._cleanInstall.value) {\r\n        installType = InstallType.ForceClean;\r\n      }\r\n\r\n      if (!installManager.createTempModulesAndCheckShrinkwrap(\r\n        shrinkwrapFile,\r\n        installType !== InstallType.Normal\r\n      )) {\r\n        console.log('');\r\n        console.log(colors.red('You need to run \"rush generate\" to update your shrinkwrap file.'));\r\n        return process.exit(1);\r\n      }\r\n\r\n      installManager.installCommonModules(installType);\r\n    }).catch((error) => {\r\n      stopwatch.stop();\r\n      this._collectTelemetry(stopwatch, false);\r\n      throw error;\r\n    }).then(() => {\r\n      stopwatch.stop();\r\n      console.log(colors.green(`Done. (${stopwatch.toString()})`));\r\n\r\n      this._collectTelemetry(stopwatch, true);\r\n\r\n      this.eventHooksManager.handle(Event.postRushInstall);\r\n\r\n      if (!this._noLinkParameter.value) {\r\n        const linkManager: BaseLinkManager = LinkManagerFactory.getLinkManager(this.rushConfiguration);\r\n        return linkManager.createSymlinksForProjects(false);\r\n      } else {\r\n        console.log(os.EOL + 'Next you should probably run: \"rush link\"');\r\n      }\r\n    });\r\n  }\r\n\r\n  private _collectTelemetry(stopwatch: Stopwatch, success: boolean): void {\r\n    if (this.parser.telemetry) {\r\n      this.parser.telemetry.log({\r\n        name: 'install',\r\n        duration: stopwatch.duration,\r\n        result: success ? 'Succeeded' : 'Failed',\r\n        extraData: {\r\n          clean: (!!this._cleanInstall.value).toString(),\r\n          fullClean: (!!this._cleanInstallFull.value).toString()\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"../../../../../src"}