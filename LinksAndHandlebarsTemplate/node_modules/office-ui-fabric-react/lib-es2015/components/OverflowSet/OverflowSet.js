import * as tslib_1 from "tslib";
import * as React from 'react';
import { css, BaseComponent, createRef, getNativeProps, divProperties, focusFirstChild, elementContains } from '../../Utilities';
import { mergeStyles } from '../../Styling';
import { FocusZone, FocusZoneDirection } from '../../FocusZone';
import * as stylesImport from './OverflowSet.scss';
var styles = stylesImport;
var OverflowSet = /** @class */ (function (_super) {
    tslib_1.__extends(OverflowSet, _super);
    function OverflowSet(props) {
        var _this = _super.call(this, props) || this;
        _this._focusZone = createRef();
        _this._divContainer = createRef();
        _this._onRenderItems = function (items) {
            return items.map(function (item, i) {
                var wrapperDivProps = { className: css('ms-OverflowSet-item', styles.item) };
                return (React.createElement("div", tslib_1.__assign({ key: item.key }, wrapperDivProps), _this.props.onRenderItem(item)));
            });
        };
        _this._onRenderOverflowButtonWrapper = function (items) {
            var wrapperDivProps = { className: css('ms-OverflowSet-overflowButton', styles.item) };
            return (React.createElement("div", tslib_1.__assign({}, wrapperDivProps), _this.props.onRenderOverflowButton(items)));
        };
        if (props.doNotContainWithinFocusZone) {
            _this._warnMutuallyExclusive({
                'doNotContainWithinFocusZone': 'focusZoneProps'
            });
        }
        return _this;
    }
    OverflowSet.prototype.render = function () {
        var _a = this.props, items = _a.items, overflowItems = _a.overflowItems, className = _a.className, focusZoneProps = _a.focusZoneProps, _b = _a.vertical, vertical = _b === void 0 ? false : _b, _c = _a.role, role = _c === void 0 ? 'menubar' : _c, doNotContainWithinFocusZone = _a.doNotContainWithinFocusZone;
        var Tag;
        var uniqueComponentProps;
        if (doNotContainWithinFocusZone) {
            Tag = 'div';
            uniqueComponentProps = tslib_1.__assign({}, getNativeProps(this.props, divProperties), { ref: this._divContainer });
        }
        else {
            Tag = FocusZone;
            uniqueComponentProps = tslib_1.__assign({}, focusZoneProps, { componentRef: this._focusZone, direction: vertical ? FocusZoneDirection.vertical : FocusZoneDirection.horizontal });
        }
        return (React.createElement(Tag, tslib_1.__assign({}, uniqueComponentProps, { className: mergeStyles('ms-OverflowSet', styles.root, vertical && styles.rootVertical, className), role: role }),
            items && this._onRenderItems(items),
            overflowItems && overflowItems.length > 0 && this._onRenderOverflowButtonWrapper(overflowItems)));
    };
    /**
     * Sets focus to the first tabbable item in the OverflowSet.
     * @param {boolean} forceIntoFirstElement If true, focus will be forced into the first element,
     * even if focus is already in theOverflowSet
     * @returns True if focus could be set to an active element, false if no operation was taken.
     */
    OverflowSet.prototype.focus = function (forceIntoFirstElement) {
        var focusSucceeded = false;
        if (this.props.doNotContainWithinFocusZone) {
            if (this._divContainer.value) {
                focusSucceeded = focusFirstChild(this._divContainer.value);
            }
        }
        else if (this._focusZone.value) {
            focusSucceeded = this._focusZone.value.focus(forceIntoFirstElement);
        }
        return focusSucceeded;
    };
    /**
     * Sets focus to a specific child element within the OverflowSet.
     * @param {HTMLElement} childElement The child element within the zone to focus.
     * @returns True if focus could be set to an active element, false if no operation was taken.
     */
    OverflowSet.prototype.focusElement = function (childElement) {
        var focusSucceeded = false;
        if (!childElement) {
            return false;
        }
        if (this.props.doNotContainWithinFocusZone) {
            if (this._divContainer.value && elementContains(this._divContainer.value, childElement)) {
                childElement.focus();
                focusSucceeded = document.activeElement === childElement;
            }
        }
        else if (this._focusZone.value) {
            focusSucceeded = this._focusZone.value.focusElement(childElement);
        }
        return focusSucceeded;
    };
    return OverflowSet;
}(BaseComponent));
export { OverflowSet };
//# sourceMappingURL=OverflowSet.js.map