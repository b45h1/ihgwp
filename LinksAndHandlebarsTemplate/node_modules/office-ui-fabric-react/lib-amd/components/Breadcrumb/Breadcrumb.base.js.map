{"version":3,"file":"Breadcrumb.base.js","sourceRoot":"../src/","sources":["components/Breadcrumb/Breadcrumb.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  css,\r\n  getRTL,\r\n  createRef\r\n} from '../../Utilities';\r\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\r\nimport { Link } from '../../Link';\r\nimport { Icon } from '../../Icon';\r\nimport { IconButton } from '../../Button';\r\nimport { IBreadcrumbProps, IBreadcrumbItem } from './Breadcrumb.types';\r\nimport { DirectionalHint } from '../../common/DirectionalHint';\r\nimport { ResizeGroup } from '../../ResizeGroup';\r\nimport { TooltipHost, TooltipOverflowMode } from '../../Tooltip';\r\n\r\nimport * as stylesImport from './Breadcrumb.scss';\r\nconst styles: any = stylesImport;\r\n\r\nexport interface IBreadCrumbData {\r\n  props: IBreadcrumbProps;\r\n  renderedItems: IBreadcrumbItem[];\r\n  renderedOverflowItems: IBreadcrumbItem[];\r\n}\r\n\r\nconst OVERFLOW_KEY = 'overflow';\r\nconst nullFunction = (): null => null;\r\n\r\nexport class Breadcrumb extends BaseComponent<IBreadcrumbProps, any> {\r\n  public static defaultProps: IBreadcrumbProps = {\r\n    items: [],\r\n    maxDisplayedItems: 999\r\n  };\r\n\r\n  protected focusZone = createRef<FocusZone>();\r\n\r\n  constructor(props: IBreadcrumbProps) {\r\n    super(props);\r\n  }\r\n\r\n  /**\r\n   * Sets focus to the first breadcrumb link.\r\n   */\r\n  public focus(): void {\r\n    if (this.focusZone.value) {\r\n      this.focusZone.value.focus();\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    const { onReduceData = this._onReduceData, maxDisplayedItems, items } = this.props;\r\n    const breadCrumbData: IBreadCrumbData = {\r\n      props: this.props,\r\n      renderedItems: items.slice(-maxDisplayedItems!),\r\n      renderedOverflowItems: items.slice(0, -maxDisplayedItems!)\r\n    };\r\n\r\n    return (\r\n      <ResizeGroup\r\n        onRenderData={ this._onRenderBreadcrumb }\r\n        onReduceData={ onReduceData }\r\n        data={ breadCrumbData }\r\n      />\r\n    );\r\n  }\r\n\r\n  private _onReduceData = (data: IBreadCrumbData): IBreadCrumbData | undefined => {\r\n    let { renderedItems, renderedOverflowItems } = data;\r\n    const movedItem = renderedItems[0];\r\n    renderedItems = renderedItems.slice(1);\r\n\r\n    renderedOverflowItems = [...renderedOverflowItems, movedItem];\r\n\r\n    if (movedItem !== undefined) {\r\n      return { ...data, renderedItems, renderedOverflowItems };\r\n    }\r\n  }\r\n\r\n  private _onRenderBreadcrumb = (data: IBreadCrumbData) => {\r\n    const {\r\n      className,\r\n      ariaLabel,\r\n      dividerAs: Divider = Icon,\r\n      onRenderItem = this._onRenderItem,\r\n      overflowAriaLabel\r\n    } = data.props;\r\n    const { renderedOverflowItems, renderedItems } = data;\r\n\r\n    const contextualItems = renderedOverflowItems.map(\r\n      (item, index) => ({\r\n        name: item.text,\r\n        key: item.key,\r\n        onClick: item.onClick ? this._onBreadcrumbClicked.bind(this, item) : null,\r\n        href: item.href\r\n      })\r\n    );\r\n\r\n    // Find index of last rendered item so the divider icon\r\n    // knows not to render on that item\r\n    const lastItemIndex = renderedItems.length - 1;\r\n\r\n    return (\r\n      <div\r\n        className={ css('ms-Breadcrumb', className, styles.root) }\r\n        role='navigation'\r\n        aria-label={ ariaLabel }\r\n      >\r\n        <FocusZone componentRef={ this.focusZone } direction={ FocusZoneDirection.horizontal } >\r\n          <ol className={ css('ms-Breadcrumb-list', styles.list) }>\r\n            { renderedOverflowItems && renderedOverflowItems.length !== 0 && (\r\n              <li className={ css('ms-Breadcrumb-overflow', styles.overflow) } key={ OVERFLOW_KEY }>\r\n                <IconButton\r\n                  className={ css('ms-Breadcrumb-overflowButton', styles.overflowButton) }\r\n                  iconProps={ { iconName: 'More' } }\r\n                  role='button'\r\n                  aria-haspopup='true'\r\n                  ariaLabel={ overflowAriaLabel }\r\n                  onRenderMenuIcon={ nullFunction }\r\n                  menuProps={ {\r\n                    items: contextualItems,\r\n                    directionalHint: DirectionalHint.bottomLeftEdge\r\n                  } }\r\n                />\r\n                <Divider\r\n                  className={ css('ms-Breadcrumb-chevron', styles.chevron) }\r\n                  iconName={ getRTL() ? 'ChevronLeft' : 'ChevronRight' }\r\n                />\r\n              </li>\r\n            ) }\r\n            { renderedItems.map(\r\n              (item, index) => (\r\n                <li className={ css('ms-Breadcrumb-listItem', styles.listItem) } key={ item.key || String(index) }>\r\n                  { onRenderItem(item, this._onRenderItem) }\r\n                  { index !== lastItemIndex && <Divider\r\n                    className={ css('ms-Breadcrumb-chevron', styles.chevron) }\r\n                    iconName={ getRTL() ? 'ChevronLeft' : 'ChevronRight' }\r\n                  /> }\r\n                </li>\r\n              )) }\r\n          </ol>\r\n        </FocusZone>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _onRenderItem = (item: IBreadcrumbItem) => {\r\n    if (item.onClick || item.href) {\r\n      return (\r\n        <Link\r\n          className={ css('ms-Breadcrumb-itemLink', styles.itemLink) }\r\n          href={ item.href }\r\n          aria-current={ item.isCurrentItem ? 'page' : undefined }\r\n          onClick={ this._onBreadcrumbClicked.bind(this, item) }\r\n        >\r\n          <TooltipHost\r\n            content={ item.text }\r\n            overflowMode={ TooltipOverflowMode.Parent }\r\n          >\r\n            { item.text }\r\n          </TooltipHost>\r\n        </Link>\r\n      );\r\n    } else {\r\n      return (\r\n        <span className={ css('ms-Breadcrumb-item', styles.item) }>\r\n          <TooltipHost\r\n            content={ item.text }\r\n            overflowMode={ TooltipOverflowMode.Parent }\r\n          >\r\n            { item.text }\r\n          </TooltipHost>\r\n        </span>\r\n      );\r\n    }\r\n  }\r\n\r\n  private _onBreadcrumbClicked = (item: IBreadcrumbItem, ev: React.MouseEvent<HTMLElement>) => {\r\n    if (item.onClick) {\r\n      item.onClick(ev, item);\r\n    }\r\n  }\r\n}\r\n"]}