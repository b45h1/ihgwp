{"version":3,"sources":["propertyPane/propertyFieldImageSelector/PropertyFieldImageSelectorHost.tsx"],"names":[],"mappings":"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","file":"PropertyFieldImageSelectorHost.js","sourcesContent":["import * as React from 'react';\nimport * as ReactDom from 'react-dom';\nimport { Link } from 'office-ui-fabric-react/lib/Link';\nimport { IPropertyFieldImageSelectorPropsInternal, ImageDisplayType } from './PropertyFieldImageSelector';\nimport * as strings from 'propertyFieldStrings';\nimport styles from '../PropertyFields.module.scss';\nimport { PrimaryButton, DefaultButton } from \"office-ui-fabric-react/lib/Button\";\nimport { Panel, PanelType } from \"office-ui-fabric-react/lib/Panel\";\nimport { ChoiceGroup, IChoiceGroupOption } from 'office-ui-fabric-react/lib/ChoiceGroup';\nimport { autobind } from 'office-ui-fabric-react/lib/Utilities';\nimport { Nav } from \"office-ui-fabric-react/lib/Nav\";\nimport { LinkType } from \"../../components/LinkPickerPanel/ILinkPickerPanelProps\";\nimport LinkPickerPanel from \"../../components/LinkPickerPanel/LinkPickerPanel\";\n\nexport interface IPropertyFieldImageSelectorHostProps extends IPropertyFieldImageSelectorPropsInternal{}\nexport interface IPropertyFieldImageSelectorHostState{\n    imageMode: ImageDisplayType;\n}\n\nexport default class PropertyFieldImageSelectorHost extends React.Component<IPropertyFieldImageSelectorHostProps, IPropertyFieldImageSelectorHostState> {\n    public constructor(props: IPropertyFieldImageSelectorHostProps){\n        super(props);\n        this.state = {\n            imageMode: this.props.imageMode ? this.props.imageMode : ImageDisplayType.Custom,\n        };\n    }\n\n    public getIcon(imageMode: string){\n        switch(ImageDisplayType[imageMode]){\n            case ImageDisplayType.Auto: return \"Photo2\";\n            case ImageDisplayType.Custom: return \"Photo2Add\";\n        }\n    }\n\n    public getChoiceLabelText(imageMode: string){\n        switch(ImageDisplayType[imageMode]){\n            case ImageDisplayType.Auto: return strings.ImageSelectorTypeAuto;\n            case ImageDisplayType.Custom: return strings.ImageSelectorTypeCustom;\n        }\n    }\n\n    public changeImageType(ev: React.SyntheticEvent<HTMLElement>, option: IChoiceGroupOption){\n        this.props.changeImageMode(Number(option.key) as ImageDisplayType);\n        this.setState({imageMode : Number(option.key) as ImageDisplayType});\n        this.setState(this.state);\n    }\n\n    public getPropertyByString(o, s) {\n        s = s.replace(/\\[(\\w+)\\]/g, '.$1'); // convert indexes to properties\n        s = s.replace(/^\\./, '');           // strip a leading dot\n        var a = s.split('.');\n        for (var i = 0, n = a.length; i < n; ++i) {\n            var k = a[i];\n            if (k in o) {\n                o = o[k];\n            } else {\n                return;\n            }\n        }\n        return o;\n    }\n\n    private linkPickerPanel: LinkPickerPanel;\n\n    public openLinkPicker(event){\n        this.linkPickerPanel.pickLink().then(({name, url}) => {\n            this.props.changeImage(url, name);\n            this.render();\n        });\n    }\n    \n    public render(): JSX.Element {\n        return (\n            <div className={styles[\"image-selector\"]}>\n                <ChoiceGroup \n                // className={styles[\"root\"]}\n                    onChange={this.changeImageType.bind(this)}\n                    selectedKey={this.state.imageMode.toString()}\n                    options={ [\n                    {\n                        key: ImageDisplayType.Auto.toString(),\n                        iconProps: { iconName: 'Photo2' },\n                        text: strings.ImageSelectorTypeAuto\n                    },\n                    {\n                        key: ImageDisplayType.Custom.toString(),\n                        iconProps: { iconName: 'Photo2Add' },\n                        text: strings.ImageSelectorTypeCustom\n                    }\n                    ] }\n                />\n                <div className={styles[\"preview\"]}>\n                    <label className=\"title-label\">{this.props.label}</label>\n                    { (this.state.imageMode!=ImageDisplayType.Auto || this.getPropertyByString(this.props.properties.properties,this.props.targetProperty)) &&\n                        <img src={this.getPropertyByString(this.props.properties.properties,this.props.targetProperty)} role=\"presentation\" width=\"150px\" height=\"119px\" alt=\"\"/>\n                    }\n                    { this.state.imageMode==ImageDisplayType.Auto && !this.getPropertyByString(this.props.properties.properties,this.props.targetProperty) &&\n                        <div>{strings.NoPreviewText}</div>\n                    }\n                    <PrimaryButton hidden={this.state.imageMode==ImageDisplayType.Auto} onClick={this.openLinkPicker.bind(this)}>{strings.ChangeImageButtonText}</PrimaryButton>\n                    {/* <button hidden={this.state.imageMode==ImageDisplayType.Auto} onClick={this.openLinkPicker.bind(this)} label={strings.ChangeImageButtonText}/> */}\n                </div>\n                <LinkPickerPanel\n                    webPartContext={this.props.context}\n                    className={styles[\"link-picker\"]}\n                    webAbsUrl={this.props.context.pageContext.web.absoluteUrl}\n                    linkType={ LinkType.image | LinkType.folder }\n                    ref={ (ref) => { this.linkPickerPanel = ref; } } />\n            </div>\n        );\n    }\n}"],"sourceRoot":"../../../../../src"}