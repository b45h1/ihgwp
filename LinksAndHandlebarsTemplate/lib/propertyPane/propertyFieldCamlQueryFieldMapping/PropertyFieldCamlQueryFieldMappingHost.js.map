{"version":3,"sources":["propertyPane/propertyFieldCamlQueryFieldMapping/PropertyFieldCamlQueryFieldMappingHost.tsx"],"names":[],"mappings":"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","file":"PropertyFieldCamlQueryFieldMappingHost.js","sourcesContent":["/**\n * @file PropertyFieldCamlQueryHost.tsx\n * Renders the controls for PropertyFieldCamlQuery component\n *\n * @copyright 2017 Shire\n * Released under MIT licence\n *\n * Uses the PropertyFieldSPListQueryHost by Olivier Carpentier\n * \n */\nimport * as React from 'react';\nimport { FormEvent } from 'react';\nimport { \n  IPropertyFieldCamlQueryFieldMappingPropsInternal,\n  IField,\n  IList,\n  ISort,\n  SortDirection,\n  IMapping,\n  SPFieldType,\n  SPFieldRequiredLevel\n} from './PropertyFieldCamlQueryFieldMapping';\nimport { Dropdown, IDropdownOption } from 'office-ui-fabric-react/lib/Dropdown';\nimport { Label } from 'office-ui-fabric-react/lib/Label';\nimport { Slider } from 'office-ui-fabric-react/lib/Slider';\nimport { TextField } from 'office-ui-fabric-react/lib/TextField';\nimport { Checkbox } from 'office-ui-fabric-react/lib/Checkbox';\nimport { Button, ButtonType, CommandButton } from 'office-ui-fabric-react/lib/Button';\nimport { Spinner, SpinnerType } from 'office-ui-fabric-react/lib/Spinner';\nimport { Dialog, DialogType } from 'office-ui-fabric-react/lib/Dialog';\nimport { Async } from 'office-ui-fabric-react/lib/Utilities';\nimport styles from '../PropertyFields.module.scss';\nimport * as strings from 'propertyFieldStrings';\nimport pnp from 'sp-pnp-js';\n// import 'camljs';\nimport * as CamlBuilder from 'camljs';\nimport { List } from 'linqts';\n\n/**\n * @interface\n * PropertyFieldCamlQueryHost properties interface\n *\n */\nexport interface IPropertyFieldCamlQueryFieldMappingHostProps extends IPropertyFieldCamlQueryFieldMappingPropsInternal {\n}\n\nexport interface IFilter {\n  field?: string;\n  fieldKind?: number;\n  operator?: string;\n  value?: string;\n}\n\n\nexport interface IPropertyFieldCamlQueryFieldMappingHostState {\n  lists: IList[];\n  fields: List<IField>;  \n  arranged: IDropdownOption[];\n  selectedList?: IList;\n  sort?: ISort;\n  max?: number;\n  operators?: IDropdownOption[];\n  filters?: IFilter[];\n  filterType: string;\n  fieldMappings?: IMapping[];\n  errorMessage?: string;\n  loadedList: boolean;\n  loadedFields: boolean;\n  isCreateOpen: boolean;\n}\n\n/**\n * @class\n * Renders the controls for PropertyFieldCamlQuery component\n */\nexport default class PropertyFieldCamlQueryFieldMappingHost extends React.Component<IPropertyFieldCamlQueryFieldMappingHostProps, IPropertyFieldCamlQueryFieldMappingHostState> {\n\n  private latestValidateValue: string;\n  private latestMappingValidateValue: IMapping[];\n  private async: Async;\n  private delayedValidate: (value: string) => void;\n  private delayedMappingValidate: (value: IMapping[]) => void;\n  private listElementId = \"input-new-list\";\n  private listIsDocLib = false;\n\n  /**\n   * @function\n   * Constructor\n   */\n  constructor(props: IPropertyFieldCamlQueryFieldMappingHostProps) {\n    super(props);\n    this.onChangedList = this.onChangedList.bind(this);\n    this.onChangedField = this.onChangedField.bind(this);\n    this.onChangedArranged = this.onChangedArranged.bind(this);\n    this.onChangedMax = this.onChangedMax.bind(this);\n    this.loadFields = this.loadFields.bind(this);\n    this.onClickAddFilter = this.onClickAddFilter.bind(this);\n    this.onClickRemoveFilter = this.onClickRemoveFilter.bind(this);\n    this.onChangedFilterField = this.onChangedFilterField.bind(this);\n    this.onChangedFilterOperator = this.onChangedFilterOperator.bind(this);\n    this.onChangedFilterValue = this.onChangedFilterValue.bind(this);\n    this.createNewList = this.createNewList.bind(this);\n    this.openCreateNewListDialog = this.openCreateNewListDialog.bind(this);\n    this.cancelListCreate = this.cancelListCreate.bind(this);\n\n    this.state = {\n      loadedList: false,\n      loadedFields: false,\n\t\t\tlists: [],\n      fields: new List<IField>(),\n      arranged: [{key: SortDirection.Ascending, text: 'Ascending'}, {key: SortDirection.Descending, text: 'Descending'}],\n      selectedList: {},\n      sort: {},\n      operators: [\n        {key: 'Eq', text: strings.SPListQueryOperatorEq},\n        {key: 'Ne', text: strings.SPListQueryOperatorNe},\n        {key: 'startsWith', text: strings.SPListQueryOperatorStartsWith},\n        {key: 'substringof', text: strings.SPListQueryOperatorSubstringof},\n        {key: 'Lt', text: strings.SPListQueryOperatorLt},\n        {key: 'Le', text: strings.SPListQueryOperatorLe},\n        {key: 'Gt', text: strings.SPListQueryOperatorGt},\n        {key: 'Ge', text: strings.SPListQueryOperatorGe}\n      ],\n      filters: [],\n      filterType: strings.SPListFilterCompareAny,\n      fieldMappings: [],\n      max: 100,\n      errorMessage: '',\n      isCreateOpen: false\n    };\n\n    this.props.fieldMappings.map((item: IMapping, index?: number) => {\n        this.state.fieldMappings.push({\n          name: item.name, \n          type: item.type, \n          requiredLevel: item.requiredLevel, \n          enabled: item.requiredLevel===SPFieldRequiredLevel.Required, \n          mappedTo: ''});\n      });\n\n    this.loadDefaultData();\n    this.loadLists();\n    this.loadFields();\n\n    this.async = new Async(this);\n    this.validate = this.validate.bind(this);\n    this.notifyAfterValidate = this.notifyAfterValidate.bind(this);\n    this.delayedValidate = this.async.debounce(this.validate, this.props.deferredValidationTime);\n  }\n\n  private loadDefaultData(): void {\n    if(this.props && this.props.properties[this.props.dataPropertyPath])\n    {\n      var stateObj = JSON.parse(this.props.properties[this.props.dataPropertyPath]);\n      this.setState({max : stateObj.max});\n      this.setState({selectedList : stateObj.selectedList});\n      this.setState({sort : stateObj.sort});\n      this.setState({fieldMappings : stateObj.fieldMappings});\n      this.setState({filterType : stateObj.filterType});\n      this.setState({filters : stateObj.filters});\n    }\n  }\n\n  /**\n   * @function\n   * Loads the list from SharePoint current web site\n   */\n  private loadLists(): void {\n    pnp.sp.web.lists.select(\"Title\",\"Id\",\"BaseTemplate\").filter(\"Hidden eq false\").get().then((lists: ISPList[]) => {\n      this.setState({lists : []});\n      lists.map((list: ISPList) => {\n        this.state.lists.push({\n          id: list.Id,\n          title: list.Title,\n          isDocLib: [101,109,119].indexOf(list.BaseTemplate) > -1\n        });\n      });\n      this.setState({loadedList : true});\n      this.saveState();\n    });\n  }\n\n  private loadFields(updateView: boolean = false): void {\n    if(this.state.selectedList && this.state.selectedList.id){\n      pnp.sp.web.lists.getById(this.state.selectedList.id).fields.select(\"Title\",\"InternalName\",\"TypeAsString\").filter(\"Hidden eq false\").orderBy(\"Title\").get().then((response: ISPField[]) => {\n        this.setState({fields : new List<IField>()});\n        response.map((field: ISPField) => {\n          const option = {\n            internalName: field.InternalName,\n            name: field.Title,\n            kind: this.getKindForType(field.TypeAsString)\n          };\n          this.state.fields.Add(option);\n        });\n        //If list was just created, add all fields to the default view.\n        if(updateView && this.state.fields.Count() > 0)\n          this.addFieldsToView(0);\n        this.setState({loadedFields : true});\n        this.saveState();\n        this.saveQuery();\n      });\n    }\n  }\n\n  private getKindForType(type:string):SPFieldType{\n    switch(type){\n      case \"URL\": \n        return SPFieldType.URL;\n      case \"Boolean\": \n        return SPFieldType.Boolean;\n      case \"PublishingScheduleStartDateFieldType\":\n      case \"PublishingScheduleEndDateFieldType\":\n      case \"Date\":\n        return SPFieldType.Date;\n      case \"DateTime\":\n        return SPFieldType.DateTime;\n      case \"User\":\n        return SPFieldType.User;\n      case \"Lookup\":\n        return SPFieldType.Lookup;\n      case \"Integer\":\n        return SPFieldType.Integer;\n      case \"Number\":\n        return SPFieldType.Number;\n      case \"Counter\":\n        return SPFieldType.Counter;\n      case \"Choice\":\n        return SPFieldType.Choice;\n      case \"TaxonomyFieldType\":\n        return SPFieldType.Taxonomy;\n      default: return SPFieldType.Text;\n    }\n  }\n\n  private getFieldList(fieldType:SPFieldType): IDropdownOption[]{\n    const fields = this.state.fields.Where(f=>f.kind==fieldType).ToArray();\n    const options = [];\n    fields.forEach(element => {\n      options.push({key:element.internalName,text:element.name});\n    });\n    return options;\n  }\n\n  private getFieldByInternalName(fieldTypeName:string): IField{\n    const fields = this.state.fields.Where(f=>f.internalName==fieldTypeName).ToArray();\n    if(fields == null || fields.length == 0)\n      return null;\n    return fields[0];\n  }\n\n  private saveState(): void {\n      this.setState(this.state);\n  }\n\n  private saveQuery(): void {\n      var listViewFields : string[] = [];\n      if(this.state.fieldMappings.length===0){\n        this.state.fields.ForEach(element => {\n          listViewFields.push(element.internalName.trim().replace(' ','_x0020_'));\n        });\n      }\n      else{\n        this.state.fieldMappings.map((mappedField: IMapping) => {\n          if(typeof mappedField.mappedTo != 'undefined' && mappedField.enabled)\n            listViewFields.push(mappedField.mappedTo.trim().replace(' ','_x0020_'));\n        });\n      }\n      if(listViewFields.indexOf(\"Title\")==-1){\n        listViewFields.push(\"Title\");\n      }\n      if(this.state.selectedList.isDocLib){\n        listViewFields.push('EncodedAbsUrl');\n      }\n      const conditions : CamlBuilder.IExpression[] = [];\n      this.state.filters.forEach(element => {\n        if(element.field == null || element.field == '' || element.operator == null || element.operator == '' || element.value == null)\n          return;\n        console.log('operator');\n        \n        var field : IField = this.getFieldByInternalName(element.field as string);\n        console.log(field.kind);\n\n        switch(field.kind){\n          case SPFieldType.Boolean:\n            if(element.operator===\"Ne\")\n              conditions.push(CamlBuilder.Expression().BooleanField(element.field).NotEqualTo(!!(element.value)));              \n            else\n              conditions.push(CamlBuilder.Expression().BooleanField(element.field).EqualTo(!!(element.value)));   \n            break;\n          case SPFieldType.Integer:\n            const integerValue = parseInt(element.value);\n            switch(element.operator){\n                case \"Ne\":\n                  conditions.push(CamlBuilder.Expression().IntegerField(element.field).NotEqualTo(integerValue));\n                  break;\n                case \"Le\":\n                  conditions.push(CamlBuilder.Expression().IntegerField(element.field).LessThanOrEqualTo(integerValue));                  \n                  break;\n                case \"Lt\":\n                  conditions.push(CamlBuilder.Expression().IntegerField(element.field).LessThan(integerValue));                  \n                  break;\n                case \"Ge\":\n                  conditions.push(CamlBuilder.Expression().IntegerField(element.field).GreaterThanOrEqualTo(integerValue));                  \n                  break;\n                case \"Gt\":\n                  conditions.push(CamlBuilder.Expression().IntegerField(element.field).GreaterThan(integerValue));                \n                  break;\n                default:\n                  conditions.push(CamlBuilder.Expression().IntegerField(element.field).EqualTo(integerValue));                  \n                  break;\n            }\n            break;\n          case SPFieldType.Counter:\n            const counterValue = parseInt(element.value);\n            switch(element.operator){\n                case \"Ne\":\n                  conditions.push(CamlBuilder.Expression().CounterField(element.field).NotEqualTo(counterValue));                \n                  break;\n                case \"Le\":\n                  conditions.push(CamlBuilder.Expression().CounterField(element.field).LessThanOrEqualTo(counterValue));                  \n                  break;\n                case \"Lt\":\n                  conditions.push(CamlBuilder.Expression().CounterField(element.field).LessThan(counterValue));                  \n                  break;\n                case \"Ge\":\n                  conditions.push(CamlBuilder.Expression().CounterField(element.field).GreaterThanOrEqualTo(counterValue));                  \n                  break;\n                case \"Gt\":\n                  conditions.push(CamlBuilder.Expression().CounterField(element.field).GreaterThan(counterValue));                \n                  break;\n                default:\n                  conditions.push(CamlBuilder.Expression().CounterField(element.field).EqualTo(counterValue));                  \n                  break;\n            }\n            break;\n          case SPFieldType.Date:\n            switch(element.operator){\n                case \"Ne\":\n                  conditions.push(CamlBuilder.Expression().DateField(element.field).NotEqualTo(element.value));                \n                  break;\n                case \"Le\":\n                  conditions.push(CamlBuilder.Expression().DateField(element.field).LessThanOrEqualTo(element.value));                  \n                  break;\n                case \"Lt\":\n                  conditions.push(CamlBuilder.Expression().DateField(element.field).LessThan(element.value));                  \n                  break;\n                case \"Ge\":\n                  conditions.push(CamlBuilder.Expression().DateField(element.field).GreaterThanOrEqualTo(element.value));                  \n                  break;\n                case \"Gt\":\n                  conditions.push(CamlBuilder.Expression().DateField(element.field).GreaterThan(element.value));                \n                  break;\n                default:\n                  conditions.push(CamlBuilder.Expression().DateField(element.field).EqualTo(element.value));                  \n                  break;\n              }\n            break;\n          case SPFieldType.DateTime:\n            switch(element.operator){\n                case \"Ne\":\n                  conditions.push(CamlBuilder.Expression().DateTimeField(element.field).NotEqualTo(element.value));                \n                  break;\n                case \"Le\":\n                  conditions.push(CamlBuilder.Expression().DateTimeField(element.field).LessThanOrEqualTo(element.value));                  \n                  break;\n                case \"Lt\":\n                  conditions.push(CamlBuilder.Expression().DateTimeField(element.field).LessThan(element.value));                  \n                  break;\n                case \"Ge\":\n                  conditions.push(CamlBuilder.Expression().DateTimeField(element.field).GreaterThanOrEqualTo(element.value));                  \n                  break;\n                case \"Gt\":\n                  conditions.push(CamlBuilder.Expression().DateTimeField(element.field).GreaterThan(element.value));                \n                  break;\n                default:\n                  conditions.push(CamlBuilder.Expression().DateTimeField(element.field).EqualTo(element.value));                  \n                  break;\n              }\n            break;\n          case SPFieldType.Lookup:\n            switch(element.operator){\n                case \"Ne\":\n                  conditions.push(CamlBuilder.Expression().LookupField(element.field).ValueAsText().NotEqualTo(element.value));                  \n                  break;\n                case \"startsWith\":\n                  conditions.push(CamlBuilder.Expression().LookupField(element.field).ValueAsText().BeginsWith(element.value));                \n                  break;\n                case \"substringOf\":\n                  conditions.push(CamlBuilder.Expression().LookupField(element.field).ValueAsText().Contains(element.value));      \n                  break;\n                default:\n                  conditions.push(CamlBuilder.Expression().LookupField(element.field).ValueAsText().EqualTo(element.value));                  \n                  break;\n              }\n            break;\n          case SPFieldType.Number:\n            const numberValue = parseFloat(element.value);\n            switch(element.operator){\n                case \"Ne\":\n                  conditions.push(CamlBuilder.Expression().NumberField(element.field).NotEqualTo(numberValue));                 \n                  break;\n                case \"Le\":\n                  conditions.push(CamlBuilder.Expression().NumberField(element.field).LessThanOrEqualTo(numberValue));                   \n                  break;\n                case \"Lt\":\n                  conditions.push(CamlBuilder.Expression().NumberField(element.field).LessThan(numberValue));                   \n                  break;\n                case \"Ge\":\n                  conditions.push(CamlBuilder.Expression().NumberField(element.field).GreaterThanOrEqualTo(numberValue));                   \n                  break;\n                case \"Gt\":\n                  conditions.push(CamlBuilder.Expression().NumberField(element.field).GreaterThan(numberValue));                 \n                  break;\n                default:\n                  conditions.push(CamlBuilder.Expression().NumberField(element.field).EqualTo(numberValue));                   \n                  break;\n              }\n            break;\n          case SPFieldType.URL:\n            switch(element.operator){\n                case \"Ne\":\n                  conditions.push(CamlBuilder.Expression().UrlField(element.field).NotEqualTo(element.value));                  \n                  break;\n                case \"startsWith\":\n                  conditions.push(CamlBuilder.Expression().UrlField(element.field).BeginsWith(element.value));                \n                  break;\n                case \"substringOf\":\n                  conditions.push(CamlBuilder.Expression().UrlField(element.field).Contains(element.value));      \n                  break;\n                default:\n                  conditions.push(CamlBuilder.Expression().UrlField(element.field).EqualTo(element.value));                  \n                  break;\n              }\n            break;\n          case SPFieldType.Choice:\n            switch(element.operator){\n                case \"Ne\":\n                  conditions.push(CamlBuilder.Expression().TextField(element.field).NotEqualTo(element.value));                  \n                  break;\n                case \"startsWith\":\n                  conditions.push(CamlBuilder.Expression().TextField(element.field).BeginsWith(element.value));                \n                  break;\n                case \"substringOf\":\n                  conditions.push(CamlBuilder.Expression().TextField(element.field).Contains(element.value));      \n                  break;\n                default:\n                  conditions.push(CamlBuilder.Expression().TextField(element.field).EqualTo(element.value));                  \n                  break;\n              }\n            break;\n          case SPFieldType.User:\n            if(element.value===\"Me\"){\n              conditions.push(CamlBuilder.Expression().UserField(element.field).EqualToCurrentUser());               \n            }\n            else{\n              switch(element.operator){\n                  case \"Ne\":\n                  conditions.push(CamlBuilder.Expression().UserField(element.field).ValueAsText().NotEqualTo(element.value));                  \n                  break;\n                case \"startsWith\":\n                  conditions.push(CamlBuilder.Expression().UserField(element.field).ValueAsText().BeginsWith(element.value));                \n                  break;\n                case \"substringOf\":\n                  conditions.push(CamlBuilder.Expression().UserField(element.field).ValueAsText().Contains(element.value));      \n                  break;\n                default:\n                  conditions.push(CamlBuilder.Expression().UserField(element.field).ValueAsText().EqualTo(element.value));                  \n                  break;\n                }\n            }\n            break;\n          default:\n            switch(element.operator){\n              case \"Ne\":\n                  conditions.push(CamlBuilder.Expression().TextField(element.field).NotEqualTo(element.value));                  \n                  break;\n                case \"startsWith\":\n                  conditions.push(CamlBuilder.Expression().TextField(element.field).BeginsWith(element.value));                \n                  break;\n                case \"substringof\":\n                  conditions.push(CamlBuilder.Expression().TextField(element.field).Contains(element.value));      \n                  break;\n                default:\n                  conditions.push(CamlBuilder.Expression().TextField(element.field).EqualTo(element.value));                  \n                  break;\n            }\n            break;\n        }\n      });\n      \n      var queryXml:string = '';\n      if(this.state.filterType===strings.SPListFilterCompareAny){\n        if(this.state.sort && this.state.sort.title){\n          if(this.state.sort.direction===SortDirection.Descending){\n            queryXml = new CamlBuilder() //Any orderby at this\n                .View(listViewFields)\n                .RowLimit(this.state.max)\n                .Query()\n                .Where()\n                .Any(conditions)\n                .OrderByDesc(this.state.sort.title)\n                .ToString();\n          }\n          else{\n            queryXml = new CamlBuilder() //Any orderby at this\n                .View(listViewFields)\n                .RowLimit(this.state.max)\n                .Query()\n                .Where()\n                .Any(conditions)\n                .OrderBy(this.state.sort.title)\n                .ToString();\n            }\n        }\n        else{\n          queryXml = new CamlBuilder() //Any orderby at this\n              .View(listViewFields)\n              .RowLimit(this.state.max)\n              .Query()\n              .Where()\n              .Any(conditions)\n              .ToString();\n        }\n      }\n      else{\n        if(this.state.sort && this.state.sort.title){\n          if(this.state.sort.direction===SortDirection.Descending){\n            queryXml = new CamlBuilder() //Any orderby at this\n                .View(listViewFields)\n                .RowLimit(this.state.max)\n                .Query()\n                .Where()\n                .All(conditions)\n                .OrderByDesc(this.state.sort.title)\n                .ToString();\n          }\n          else{\n            queryXml = new CamlBuilder() //Any orderby at this\n                .View(listViewFields)\n                .RowLimit(this.state.max)\n                .Query()\n                .Where()\n                .All(conditions)\n                .OrderBy(this.state.sort.title)\n                .ToString();\n            }\n        }\n        else{\n          queryXml = new CamlBuilder() //Any orderby at this\n              .View(listViewFields)\n              .RowLimit(this.state.max)\n              .Query()\n              .Where()\n              .All(conditions)\n              .ToString();\n        }\n      }\n\n      //Order\n\n      console.log(queryXml);\n      this.props.properties[this.props.dataPropertyPath] = JSON.stringify({\n        filters: this.state.filters,\n        max: this.state.max,\n        selectedList: this.state.selectedList,\n        sort: this.state.sort,\n        fieldMappings: this.state.fieldMappings\n      });\n      if (this.delayedValidate !== null && this.delayedValidate !== undefined) {\n        this.delayedValidate(queryXml);\n      }\n  }\n\n  /**\n   * @function\n   * Validates the new custom field value\n   */\n  private validate(value: string): void {\n    if (this.props.onGetErrorMessage === null || this.props.onGetErrorMessage === undefined) {\n      this.notifyAfterValidate(this.props.query, value);\n      return;\n    }\n\n    if (this.latestValidateValue === value)\n      return;\n    this.latestValidateValue = value;\n\n    var result: string | PromiseLike<string> = this.props.onGetErrorMessage(value || '');\n    if (result !== undefined) {\n      if (typeof result === 'string') {\n        if (result === undefined || result === '')\n          this.notifyAfterValidate(this.props.query, value);\n        this.setState({errorMessage : result});\n        this.setState(this.state);\n      }\n      else {\n        result.then((errorMessage: string) => {\n          if (errorMessage === undefined || errorMessage === '')\n            this.notifyAfterValidate(this.props.query, value);\n          this.setState({errorMessage : errorMessage});\n          this.setState(this.state);\n        });\n      }\n    }\n    else {\n      this.notifyAfterValidate(this.props.query, value);\n    }\n  }\n\n  /**\n   * @function\n   * Notifies the parent Web Part of a property value change\n   */\n  private notifyAfterValidate(oldValue: string, newValue: string) {\n    if (this.props.onPropertyChange && newValue != null) {\n      this.props.properties[this.props.targetProperty] = newValue;\n      this.props.onPropertyChange(this.props.targetProperty, oldValue, newValue);\n      if (this.props.render)\n        this.props.render();\n    }\n  }\n\n  /**\n   * @function\n   * Called when the component will unmount\n   */\n  public componentWillUnmount() {\n    this.async.dispose();\n  }\n\n  /**\n   * @function\n   * Raises when a list has been selected\n   */\n  private onChangedList(option: IDropdownOption, index?: number): void {\n    this.state.selectedList.id = option.key as string;\n    this.state.selectedList.title =  option.text as string;\n    \n    this.state.lists.forEach(value=>{\n      if(value.id==option.key)\n        this.state.selectedList.isDocLib = value.isDocLib;\n    });\n    \n    this.saveQuery();\n    this.saveState();\n    this.loadFields();\n  }\n\n   private onChangedField(option: IDropdownOption, index?: number): void {\n    this.state.sort.title =  option.key as string;\n    this.saveQuery();\n    this.saveState();\n  }\n\n   private onChangedArranged(option: IDropdownOption, index?: number): void {\n    this.state.sort.direction =  option.key as number;\n    this.saveQuery();\n    this.saveState();\n  }\n\n  private onChangedMax(newValue?: number): void {\n    this.setState({max : newValue});\n    this.saveQuery();\n    this.saveState();\n  }\n\n  private onClickAddFilter(elm?: any): void {\n    this.state.filters.push({});\n    this.saveState();\n    this.saveQuery();\n  }\n\n  private onClickRemoveFilter(index: number): void {\n    if (index > -1) {\n      this.state.filters.splice(index, 1);\n      this.saveState();\n      this.saveQuery();\n    }\n  }\n\n  private onChangedFilterField(option: IDropdownOption, index?: number, selectedIndex?: number): void {\n    this.state.filters[selectedIndex].field = option.key as string;\n    this.saveState();\n    this.saveQuery();\n  }\n\n  private onChangedFilterOperator(option: IDropdownOption, index?: number, selectedIndex?: number): void {\n    this.state.filters[selectedIndex].operator = option.key as string;\n    this.saveState();\n    this.saveQuery();\n  }\n\n  private onChangedFilterValue(value?: string, index?: number): void {\n    this.state.filters[index].value = value;\n    this.saveState();\n    this.saveQuery();\n  }\n\n  private onChangedFieldMapping(option: IDropdownOption,  index?:number):void {\n    this.state.fieldMappings[index].mappedTo = option.key.toString();\n    this.saveState();\n    this.saveQuery();\n  }\n\n  private onChangedFilterType(option: IDropdownOption,  index?:number):void {\n    this.setState({filterType : option.key.toString()});\n    this.saveState();\n    this.saveQuery();\n  }\n\n  private onChangedFieldMappingEnabled(sender: FormEvent<HTMLElement|HTMLInputElement>,checked?: boolean, index?:number){\n    this.state.fieldMappings[index].enabled = checked;\n    this.saveState();\n    this.saveQuery();\n  }\n\n  private openCreateNewListDialog(element?: any): void {\n    this.setState({isCreateOpen : true});\n    this.saveState();\n  }\n\n  private createNewList(element?: any): void {\n    var title = document.getElementsByClassName(this.listElementId)[0][\"value\"];\n\n    const desc = 'List created by an SPFX webpart';\n    pnp.sp.web.lists.add(title,desc,100).then((result)=>{\n      this.state.selectedList.id = result.data['Id'];\n      this.state.selectedList.title = result.data['Title'];\n      if(this.props.createTitleRequired)\n        this.setTitleOptional(result.list);\n      else\n        this.createField(result.list,this.props.createFields,0);\n    });\n    \n  }\n\n  private setTitleOptional(list:any){\n    list.fields.getByTitle('Title').update({\n      Required:false\n    }).then(result=>{\n      this.createField(list,this.props.createFields,0);\n    });\n  }\n\n  private createField(list:any,fieldXmls:string[],currentIndex:number){\n      list.fields.createFieldAsXml(fieldXmls[currentIndex]).then(result=>{\n        currentIndex++;\n        if(currentIndex < fieldXmls.length)\n          this.createField(list,fieldXmls,currentIndex);\n        else\n          this.saveAndReloadData();\n      });\n  }\n\n  private addFieldsToView(idx: number){\n    //Skip adding the Title, already in view by default.\n    if(this.state.fields.ElementAt(idx).internalName == 'Title' && this.state.fields.Count() > idx+1) {\n      this.addFieldsToView(idx+1);\n    }else{\n      pnp.sp.web.lists.getById(this.state.selectedList.id).views.getByTitle(\"All Items\").fields.add(this.state.fields.ElementAt(idx).internalName).then(_ =>{\n        if(this.state.fields.Count() > idx+1)\n          this.addFieldsToView(idx+1);\n      });\n    }\n  }\n\n  private saveAndReloadData(){\n    this.saveState();\n    this.saveQuery();\n\n    this.loadDefaultData();\n    this.loadLists();\n    //Added boolean to trigger updating the default view.\n    this.loadFields(true);\n    \n    document.getElementsByClassName(this.listElementId)[0][\"value\"] = \"\";\n    this.setState({isCreateOpen : false});\n  }\n\n  private cancelListCreate(element?: any): void {\n    this.setState({isCreateOpen : false});\n    document.getElementsByClassName(this.listElementId)[0][\"value\"] = \"\";\n    this.saveState();\n  }\n\n  private openListInNewTab(){\n    pnp.sp.web.lists.getById(this.state.selectedList.id).defaultView.get().then((data)=>{\n      window.open(data.ServerRelativeUrl);\n    });\n  }\n\n\n  /**\n   * @function\n   * Renders the controls\n   */\n  public render(): JSX.Element {\n\n    if (this.state.loadedList === false){//} || this.state.loadedFields === false) {\n      return (\n        <div>\n          <Label>{this.props.label}</Label>\n          <Spinner type={ SpinnerType.normal } />\n        </div>\n      );\n    }\n    \n    //Renders content\n    return (\n      <div>\n        {this.props.showCreate &&\n          <div>\n            <Dialog type={DialogType.close} isOpen={this.state.isCreateOpen} title={strings.SPListCreate} \n              containerClassName={styles.msDialogMainCustom} onDismiss={this.cancelListCreate} isDarkOverlay={true} isBlocking={false}>\n                {/* <TextField placeholder={strings.SPListCreatePlaceholder} inputClassName={this.listElementId} required={true}></TextField> */}\n                <textarea placeholder={strings.SPListCreatePlaceholder} required={true} className={this.listElementId}/>\n                <div style={{marginTop: '30px', marginBottom: '30px'}}>\n                    <Button buttonType={ButtonType.primary} onClick={this.createNewList}>{strings.CreateButton}</Button>\n                    <Button buttonType={ButtonType.normal} onClick={this.cancelListCreate}>{strings.CancelButton}</Button>\n                    {/* <button onClick={this.createNewList} label={strings.CreateButton}/>\n                    <button onClick={this.cancelListCreate} label={strings.CancelButton}/> */}\n                  </div>\n            </Dialog>\n            <Button\n            iconProps={{iconName:\"Add\"}}\n            disabled={this.props.disabled}\n            buttonType={ButtonType.command}\n            onClick={this.openCreateNewListDialog}>\n              {strings.SPListCreate}\n            </Button>\n            {/* <button\n            // icon=\"Add\"\n            disabled={this.props.disabled}\n            // buttonType={ButtonType.command}\n            onClick={this.openCreateNewListDialog} label={strings.SPListCreate}\n            /> */}\n          </div>\n        }\n        <Label hidden={!this.props.label}>{this.props.label}</Label>\n        {/* <label hidden={!this.props.label}>{this.props.label}</label> */}\n        <Dropdown\n          label={strings.SPListQueryList}\n          onChanged={this.onChangedList}\n          options={this.state.lists.map(l=>{return {key:l.id,text:l.title};})}\n          selectedKey={this.state.selectedList.id}\n          disabled={this.props.disabled}\n        />\n        <CommandButton\n          iconProps={{iconName:\"Edit\"}}\n          disabled={this.props.disabled}\n          buttonType={ButtonType.command}\n          onClick={()=>this.openListInNewTab()}>\n          {strings.SPListQueryOpenList}\n        </CommandButton>\n        {/* <button\n          // iconProps={{iconName:\"Edit\"}}\n          disabled={this.props.disabled}\n          // buttonType={ButtonType.command}\n          onClick={()=>this.openListInNewTab()} label={strings.SPListQueryOpenList} /> */}\n        \n        {this.state.fieldMappings.map((mapping: IMapping, index: number) => {\n          return(\n                <Dropdown\n                    label={mapping.name}\n                    disabled={this.props.disabled === false && this.state.selectedList != null && this.state.selectedList != '' ? false : true }\n                    options={this.getFieldList(mapping.type)}\n                    selectedKey={mapping.mappedTo}\n                    onChanged={(option: IDropdownOption, selectIndex?: number) => this.onChangedFieldMapping(option, index)}/>\n            );\n        })}\n\n        {this.props.showOrderBy != false ?\n          <div>\n            <Dropdown\n              label={strings.SPListQueryOrderBy}\n              options={this.state.fields.Select<IDropdownOption>(f=>{return {key:f.internalName,text:f.name};}).ToArray()}\n              selectedKey={this.state.sort.title}\n              onChanged={this.onChangedField}\n              disabled={this.props.disabled === false && this.state.selectedList != null && this.state.selectedList != '' ? false : true }\n            />\n            <Dropdown\n              label={strings.SPListQueryArranged}\n              options={this.state.arranged}\n              selectedKey={this.state.sort.direction}\n              onChanged={this.onChangedArranged}\n              disabled={this.props.disabled === false && this.state.selectedList != null && this.state.selectedList != '' ? false : true }\n            />\n           </div>\n          : ''}\n\n        {this.props.showMax != false ?\n          <Slider label={strings.SPListQueryMax}\n            min={0}\n            className={styles[\"slider\"]}\n            max={this.props.max == null ? 500 : this.props.max}\n            defaultValue={this.state.max}\n            onChange={this.onChangedMax}\n            disabled={this.props.disabled === false && this.state.selectedList != null && this.state.selectedList != '' ? false : true }\n          />\n          : ''}\n\n          {this.state.filters != null && this.state.filters.length > 1 ?\n            <Dropdown\n              label={strings.SPListFilterCompareType}\n              disabled={this.props.disabled}\n              options={[\n                {key: strings.SPListFilterCompareAny, text: strings.SPListFilterCompareAny},\n                {key: strings.SPListFilterCompareAll, text: strings.SPListFilterCompareAll}\n              ]}\n              selectedKey={this.state.filterType}\n              onChanged={this.onChangedFilterType.bind(this)}\n            />\n          : ''}\n\n        {this.state.filters != null && this.state.filters.length > 0 ? \n          this.state.filters.map((value: IFilter, index: number) => {\n            return (\n              <div>\n                <Label>Filter</Label>\n                <Dropdown\n                  label=''\n                  disabled={this.props.disabled}\n                  options={this.state.fields.Select<IDropdownOption>(f=>{return {key:f.internalName,text:f.name};}).ToArray()}\n                  selectedKey={value.field}\n                  onChanged={(option: IDropdownOption, selectIndex?: number) => this.onChangedFilterField(option, selectIndex, index)}\n                />\n                <Dropdown\n                  label=''\n                  disabled={this.props.disabled}\n                  options={this.state.operators}\n                  selectedKey={value.operator}\n                  onChanged={(option: IDropdownOption, selectIndex?: number) => this.onChangedFilterOperator(option, selectIndex, index)}\n                />\n                <TextField disabled={this.props.disabled} defaultValue={value.value} onChanged={(value2: string) => this.onChangedFilterValue(value2, index)} />\n                <Button disabled={this.props.disabled} buttonType={ButtonType.command} onClick={() => this.onClickRemoveFilter(index)} iconProps={{iconName:\"Delete\"}}>\n                  {strings.SPListQueryRemove}\n                </Button>\n\n                {/* <button disabled={this.props.disabled} onClick={() => this.onClickRemoveFilter(index)}\n                  label={strings.SPListQueryRemove}/> */}\n              </div>\n            );\n          })\n          \n        : ''}\n\n        {this.props.showFilters != false ?\n          <Button buttonType={ButtonType.command} onClick={this.onClickAddFilter}\n          disabled={this.props.disabled === false && this.state.selectedList != null && this.state.selectedList != '' ? false : true } iconProps={{iconName:\"Add\"}}>\n          {strings.SPListQueryAdd}\n          </Button>\n          // <button onClick={this.onClickAddFilter}\n          // disabled={this.props.disabled === false && this.state.selectedList != null && this.state.selectedList != '' ? false : true } label={strings.SPListQueryAdd}/>\n          : ''}\n\n        { this.state.errorMessage != null && this.state.errorMessage != '' && this.state.errorMessage != undefined ?\n              <div style={{paddingBottom: '8px'}}><div aria-live='assertive' className='ms-u-screenReaderOnly' data-automation-id='error-message'>{  this.state.errorMessage }</div>\n              <span>\n                <p className='ms-TextField-errorMessage ms-u-slideDownIn20'>{ this.state.errorMessage }</p>\n              </span>\n              </div>\n            : ''}\n\n      </div>\n    );\n  }\n}\n\n/**\n * @interface\n * Defines a SharePoint list\n */\ninterface ISPList {\n  Title: string;\n  Id: string;\n  BaseTemplate: number;\n}\n\ninterface ISPField {\n  Title: string;\n  InternalName: string;\n  TypeAsString: string;\n}"],"sourceRoot":"../../../../../src"}