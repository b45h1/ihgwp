{"version":3,"sources":["webparts/handlebarTemplateDisplay/HandlebarTemplateDisplayWebPart.ts"],"names":[],"mappings":"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","file":"webparts/handlebarTemplateDisplay/HandlebarTemplateDisplayWebPart.js","sourcesContent":["import * as React from 'react';\nimport * as ReactDom from 'react-dom';\nimport { Version, DisplayMode } from '@microsoft/sp-core-library';\nimport { SPHttpClient } from '@microsoft/sp-http';\nimport {\n  BaseClientSideWebPart,\n  IPropertyPaneConfiguration,\n  PropertyPaneTextField,\n  PropertyPaneButton,\n  PropertyPaneButtonType,\n  PropertyPaneLink,\n  PropertyPaneLabel\n} from '@microsoft/sp-webpart-base';\n\nimport * as strings from 'handlebarTemplateDisplayStrings';\nimport HandlebarTemplateDisplay from './components/HandlebarTemplateDisplay';\nimport { IHandlebarTemplateDisplayProps } from './components/IHandlebarTemplateDisplayProps';\nimport { IHandlebarTemplateDisplayWebPartProps } from './IHandlebarTemplateDisplayWebPartProps';\nimport { PropertyFieldCamlQueryFieldMapping, PropertyFieldCamlQueryOrderBy } from \"../../propertyPane/propertyFieldCamlQueryFieldMapping/PropertyFieldCamlQueryFieldMapping\";\nimport QueryStringParser from \"../../utilities/urlparser/queryStringParser\";\nimport pnp from 'sp-pnp-js';\n\nexport default class HandlebarTemplateDisplayWebPart extends BaseClientSideWebPart<IHandlebarTemplateDisplayWebPartProps> {\n  constructor(){\n    super();\n    this.onPropertyPaneFieldChanged = this.onPropertyPaneFieldChanged.bind(this);\n  }\n  \n  public onInit(): Promise<void> {\n    return super.onInit().then(_ => {\n      pnp.setup({\n        spfxContext: this.context\n      });\n      \n    });\n  }\n  \n  private _fields : any[];\n  public get fields() : any[] {\n    return this._fields;\n  }\n  public set fields(v : any[]) {\n    this._fields = v;\n  }\n  \n\n  private _webpart : any;\n  public get webpart() : any {\n    return this._webpart;\n  }\n  public set webpart(v : any) {\n    this._webpart = v;\n  }\n\n  public render(): void {\n    const propData = this.properties.listQueryData ? JSON.parse(this.properties.listQueryData) : {fieldMappings:[], selectedList:{}};\n    const element: React.ReactElement<IHandlebarTemplateDisplayProps > = React.createElement(\n      HandlebarTemplateDisplay,\n      {\n        isEdit: this.displayMode===DisplayMode.Edit,\n        title: this.properties.title,\n        items: [],\n        templateUrl: this.properties.handlebarTemplateUrl,\n        template: \"\",\n        cssUrl: this.properties.cssUrl,\n        jsUrl: this.properties.jsUrl,\n        context: this.context,\n        listIsSelected: propData.selectedList.id!==undefined,\n        containerClass: this.properties.containerClass,\n        setTitle: this.setTitle.bind(this),\n        setTemplateUrl: this.setTemplateUrl.bind(this),\n        setStyleUrl: this.setCSSUrl.bind(this),\n        setScriptUrl: this.setJSUrl.bind(this)\n      }\n    );\n\n    if(propData.selectedList.id){\n      pnp.sp.web.lists.getById(propData.selectedList.id).getItemsByCAMLQuery({ ViewXml: QueryStringParser.ReplaceQueryStringParameters(this.properties.listQuery)}).then((response:any[])=>{\n        response.forEach(value => {\n          element.props.items.push(value);\n        });\n        \n        this.context.spHttpClient.get(this.properties.handlebarTemplateUrl, SPHttpClient.configurations.v1).then((templateResponse)=>{\n          templateResponse.text().then((s)=>{\n            element.props.template = s;\n            this.webpart = ReactDom.render(element, this.domElement);\n          });\n        }).catch((error)=>{\n          this.webpart = ReactDom.render(element, this.domElement);\n        });        \n      }).catch((error)=>{\n        this.webpart = ReactDom.render(element, this.domElement);\n      });\n    }\n    else{\n      this.webpart = ReactDom.render(element, this.domElement);\n    }\n  }\n\n  protected get dataVersion(): Version {\n    return Version.parse('1.0');\n  }\n\n  protected getPropertyPaneConfiguration(): IPropertyPaneConfiguration {\n    return {\n      pages: [\n        {\n          header: {\n            description: strings.PropertyPaneDescription\n          },\n          groups: [\n            {\n              groupName: strings.BasicGroupName,\n              groupFields: [\n                PropertyFieldCamlQueryFieldMapping('listQuery',{\n                  label: strings.QueryFieldLabel,\n                  dataPropertyPath: 'listQueryData',\n                  query: this.properties.listQuery,\n                  fieldMappings: [],\n                  createFields:[],\n                  createTitleRequired:false,\n                  includeHidden: false,\n                  orderBy: PropertyFieldCamlQueryOrderBy.Title,\n                  showOrderBy: true,\n                  showFilters: true,\n                  showMax:true,\n                  showCreate:false,\n                  render: this.render.bind(this),\n                  onPropertyChange: this.onPropertyPaneFieldChanged.bind(this),\n                  context: this.context,\n                  properties: this.properties,\n                  disabled: false,\n                  onGetErrorMessage: null,\n                  deferredValidationTime: 0,\n                  key: 'spListQueryFieldId'\n                }),\n                PropertyPaneLabel(\"templateLabel\",{\n                  text: strings.TemplateFieldLabel,\n                }),\n                PropertyPaneLink(\"handlebarTemplateUrl\",{\n                  href: this.properties.handlebarTemplateUrl,\n                  text: this.properties.handlebarTemplateUrl,\n                  target: '_blank'\n                }),\n                PropertyPaneButton(\"templateChange\",{\n                  text: strings.TemplateFieldButtonText,\n                  buttonType: PropertyPaneButtonType.Primary,\n                  onClick: this.openTemplateSelector.bind(this)\n                }),\n                PropertyPaneLabel(\"cssLabel\",{\n                  text: strings.StyleFieldLabel,\n                }),\n                PropertyPaneLink(\"cssUrl\",{\n                  href: this.properties.cssUrl,\n                  text: this.properties.cssUrl,\n                  target: '_blank'\n                }),\n                PropertyPaneButton(\"cssChange\",{\n                  text: strings.StyleFieldButtonText,\n                  buttonType: PropertyPaneButtonType.Primary,\n                  onClick: this.openStyleSelector.bind(this)\n                }),\n                PropertyPaneLabel(\"jsLabel\",{\n                  text: strings.ScriptFieldLabel,\n                }),\n                PropertyPaneLink(\"jsUrl\",{\n                  href: this.properties.jsUrl,\n                  text: this.properties.jsUrl,\n                  target: '_blank'\n                }),\n                PropertyPaneButton(\"jsChange\",{\n                  text: strings.ScriptFieldButtonText,\n                  buttonType: PropertyPaneButtonType.Primary,\n                  onClick: this.openScriptSelector.bind(this)\n                }),\n                PropertyPaneTextField(\"containerClass\",{\n                  label: strings.ContainerClassLabel\n                })\n              ]\n            }\n          ]\n        }\n      ]\n    };\n  }\n\n  public openTemplateSelector(event){\n      this.webpart.openTemplateLinkPicker();\n  }\n\n  public openStyleSelector(event){\n      this.webpart.openStyleLinkPicker();\n  }\n\n  public openScriptSelector(event){\n      this.webpart.openScriptLinkPicker();\n  }\n\n  public setTitle(title: string){\n    this.properties.title = title;\n  }\n\n  public setTemplateUrl(url: string, name?: string){\n    const oldUrl = this.properties.handlebarTemplateUrl;\n    this.properties.handlebarTemplateUrl = url;\n    this.onPropertyPaneFieldChanged(\"handlebarTemplateUrl\",oldUrl, url);\n    this.render();\n    this.context.propertyPane.refresh();\n  }\n\n  public setCSSUrl(url: string, name?: string){\n    const oldUrl = this.properties.cssUrl;\n    this.properties.cssUrl = url;\n    this.onPropertyPaneFieldChanged(\"cssUrl\",oldUrl, url);\n    this.render();\n    this.context.propertyPane.refresh();\n  }\n\n  public setJSUrl(url: string, name?: string){\n    const oldUrl = this.properties.jsUrl;\n    this.properties.jsUrl = url;\n    this.onPropertyPaneFieldChanged(\"jsUrl\",oldUrl, url);\n    this.render();\n    this.context.propertyPane.refresh();\n  }\n}\n"],"sourceRoot":"..\\..\\..\\src"}