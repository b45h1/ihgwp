{"version":3,"sources":["utilities/urlparser/queryStringParser.ts"],"names":[],"mappings":";;AAAA;IAAA;IA6BA,CAAC;IA5BiB,qCAAmB,GAAjC,UAAkC,IAAY,EAAE,GAAW;QACvD,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;YAAC,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC;QACrC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QAEvC,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC1B,GAAG,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;QAExB,IAAM,KAAK,GAAG,IAAI,MAAM,CAAC,MAAM,GAAG,IAAI,GAAG,mBAAmB,CAAC,CAAC;QAC9D,IAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAChC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAC1B,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAAC,MAAM,CAAC,EAAE,CAAC;QAC3B,MAAM,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;IAC9D,CAAC;IAEa,8CAA4B,GAA1C,UAA2C,KAAa;QACpD,IAAM,OAAO,GAAG,IAAI,MAAM,CAAC,yBAAyB,CAAC,CAAC;QACtD,IAAM,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACrC,EAAE,CAAA,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,GAAC,CAAC,CAAC,CAAA,CAAC;YAC9B,QAAQ,CAAC,OAAO,CAAC,UAAA,OAAO;gBACpB,EAAE,CAAA,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,GAAC,CAAC,CAAC,CAAC,CAAA,CAAC;oBACpC,IAAM,OAAO,GAAG,OAAO,CAAC;oBACxB,IAAM,YAAY,GAAG,OAAO,CAAC,OAAO,CAAC,eAAe,EAAC,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,EAAC,EAAE,CAAC,CAAC;oBACzE,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,OAAO,EAAC,iBAAiB,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC,CAAC;gBACvF,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IACL,wBAAC;AAAD,CA7BA,AA6BC,IAAA","file":"queryStringParser.js","sourcesContent":["export default class QueryStringParser{\n    public static getQueryStringValue(name: string, url?:string):string{\n        if (!url) url = window.location.href;\n        name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n\n        name = name.toLowerCase();\n        url = url.toLowerCase();\n\n        const regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\");\n        const results = regex.exec(url);\n        if (!results) return null;\n        if (!results[2]) return '';\n        return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n    }\n\n    public static ReplaceQueryStringParameters(value: string): string {\n        const qsRegex = new RegExp(/\\[QueryString\\.(.*?)\\]/g);\n        const qsParams = qsRegex.exec(value);\n        if(qsParams && qsParams.length>0){\n            qsParams.forEach(element => {\n                if(element.indexOf('[QueryString.')>-1){\n                    const origVal = element;\n                    const paramElement = element.replace(\"[QueryString.\",\"\").replace(\"]\",\"\");\n                    value = value.replace(origVal,QueryStringParser.getQueryStringValue(paramElement));\n                }\n            });\n        }\n        return value;\n    }\n}"],"sourceRoot":"../../../../../src"}